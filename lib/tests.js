(function() {
  var $, CND, CODEC, D, HOLLERITH, after, alert, badge, clear_leveldb, db, debug, echo, get_new_db_name, help, immediately, info, join, leveldown, levelup, log, njs_path, read_all_keys, rpr, show_keys_and_key_bfrs, step, suspend, test, urge, warn, whisper;

  njs_path = require('path');

  join = njs_path.join;

  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'HOLLERITH/tests';

  log = CND.get_logger('plain', badge);

  info = CND.get_logger('info', badge);

  whisper = CND.get_logger('whisper', badge);

  alert = CND.get_logger('alert', badge);

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  echo = CND.echo.bind(CND);

  suspend = require('coffeenode-suspend');

  step = suspend.step;

  after = suspend.after;

  immediately = suspend.immediately;

  test = require('guy-test');

  D = require('pipedreams2');

  $ = D.remit.bind(D);

  HOLLERITH = require('./main');

  db = null;

  levelup = require('levelup');

  leveldown = require('leveldown');

  CODEC = require('./codec');

  this._feed_test_data = function(db, probes_idx, settings, handler) {
    var arity;
    switch (arity = arguments.length) {
      case 3:
        handler = settings;
        settings = null;
        break;
      case 4:
        null;
        break;
      default:
        throw new Error("expected 3 or 4 arguments, got " + arity);
    }
    step((function(_this) {
      return function*(resume) {
        var i, input, j, key, len, len1, probe, ref, ref1, url_key;
        (yield HOLLERITH.clear(db, resume));
        whisper("writing test dataset #" + probes_idx + " with settings " + (rpr(settings)));
        input = D.create_throughstream();
        switch (probes_idx) {
          case 0:
          case 2:
            input.pipe(HOLLERITH.$write(db, settings)).pipe(D.$on_end(function() {
              whisper("test data written");
              return handler(null);
            }));
            ref = _this._feed_test_data.probes[probes_idx];
            for (i = 0, len = ref.length; i < len; i++) {
              probe = ref[i];
              input.write(probe);
              (yield setImmediate(resume));
            }
            return input.end();
          case 1:
            input.pipe(HOLLERITH.$write(db, settings)).pipe(D.$on_end(function() {
              whisper("test data written");
              return handler(null);
            }));
            ref1 = _this._feed_test_data.probes[probes_idx];
            for (j = 0, len1 = ref1.length; j < len1; j++) {
              url_key = ref1[j];
              key = HOLLERITH.key_from_url(db, url_key);
              input.write(key);
              (yield setImmediate(resume));
            }
            return input.end();
          default:
            return handler(new Error("illegal probes index " + (rpr(probes_idx))));
        }
      };
    })(this));
    return null;
  };

  this._feed_test_data.probes = [];

  this._feed_test_data.probes.push([['𧷟1', 'guide/lineup/length', 1], ['𧷟2', 'guide/lineup/length', 2], ['𧷟3', 'guide/lineup/length', 3], ['𧷟4', 'guide/lineup/length', 4], ['𧷟', 'guide/lineup/length', 5], ['𧷟6', 'guide/lineup/length', 6], ['𧷟', 'cp/cid', 163295], ['𧷟', 'guide/uchr/has', ['八', '刀', '宀', '', '貝']], ['𧷟', 'rank/cjt', 5432], ['八', 'factor/strokeclass/wbf', '34'], ['刀', 'factor/strokeclass/wbf', '5(12)3'], ['宀', 'factor/strokeclass/wbf', '44'], ['', 'factor/strokeclass/wbf', '12'], ['貝', 'factor/strokeclass/wbf', '25(12)'], ['八', 'rank/cjt', 12541], ['刀', 'rank/cjt', 12542], ['宀', 'rank/cjt', 12543], ['', 'rank/cjt', 12544], ['貝', 'rank/cjt', 12545]]);

  this._feed_test_data.probes.push(['so|glyph:劬|cp/fncr:u-cjk/52ac|0', 'so|glyph:邭|cp/fncr:u-cjk/90ad|0', 'so|glyph:𠴦|cp/fncr:u-cjk-xb/20d26|0', 'so|glyph:𤿯|cp/fncr:u-cjk-xb/24fef|0', 'so|glyph:𧑴|cp/fncr:u-cjk-xb/27474|0', 'so|glyph:𨒡|cp/fncr:u-cjk-xb/284a1|0', 'so|glyph:𪚧|cp/fncr:u-cjk-xb/2a6a7|0', 'so|glyph:𪚫|cp/fncr:u-cjk-xb/2a6ab|0', 'so|glyph:𤿯|strokeorder:352513553254|0', 'so|glyph:𠴦|strokeorder:3525141121|0', 'so|glyph:𨒡|strokeorder:35251454|0', 'so|glyph:邭|strokeorder:3525152|0', 'so|glyph:𪚫|strokeorder:352515251115115113541|0', 'so|glyph:𪚧|strokeorder:35251525112511511|0', 'so|glyph:𧑴|strokeorder:352515251214251214|0', 'so|glyph:劬|strokeorder:3525153|0']);

  this._feed_test_data.probes.push([['丁', 'strokecount', 2], ['三', 'strokecount', 3], ['夫', 'strokecount', 5], ['國', 'strokecount', 11], ['形', 'strokecount', 7], ['丁', 'componentcount', 1], ['三', 'componentcount', 1], ['夫', 'componentcount', 1], ['國', 'componentcount', 4], ['形', 'componentcount', 2], ['丁', 'components', ['丁']], ['三', 'components', ['三']], ['夫', 'components', ['夫']], ['國', 'components', ['囗', '戈', '口', '一']], ['形', 'components', ['开', '彡']]]);

  this["XXX"] = function(T, done) {
    var db_settings, input_A, input_B, log_ticks, log_ticks_id, n, route;
    log_ticks_id = null;
    log_ticks = function() {
      debug("------------------------------------ tick");
      return log_ticks_id = immediately(log_ticks);
    };
    levelup = require('levelup');
    leveldown = require('leveldown');
    route = '/tmp/X-test-db';
    db_settings = {
      keyEncoding: 'JSON',
      valueEncoding: 'JSON',
      sync: true
    };
    db = levelup(route, db_settings);
    input_A = D.create_throughstream();
    n = 10;
    input_B = input_A.pipe(D.$map((function(_this) {
      return function(data, handler) {
        var key, value;
        key = data[0], value = data[1];
        return db.get(key, function(error) {
          if (error != null) {
            if (error['type'] === 'NotFoundError') {
              whisper("ok, not in DB: " + (rpr(key)));
              return handler(null, data);
            } else {
              return handler(error);
            }
          } else {
            return handler(new Error("key already in DB: " + (rpr(key))));
          }
        });
      };
    })(this))).pipe(D.$batch(5)).pipe((function(_this) {
      return function(db) {
        return $(function(batch, send) {
          var i, key, len, ref, results, value;
          results = [];
          for (i = 0, len = batch.length; i < len; i++) {
            ref = batch[i], key = ref[0], value = ref[1];
            results.push(db.put(key, value));
          }
          return results;
        });
      };
    })(this)(db));
    input_B.on('end', (function(_this) {
      return function() {
        help("input_B/end");
        clearImmediate(log_ticks_id);
        return done();
      };
    })(this));
    return step((function(_this) {
      return function*(resume) {
        var i, key, record, record_idx, ref, value;
        (yield clear_leveldb(db, resume));
        whisper("erased and re-opened LevelDB at " + route);
        for (record_idx = i = 0, ref = n; 0 <= ref ? i < ref : i > ref; record_idx = 0 <= ref ? ++i : --i) {
          key = "record-" + record_idx;
          value = record_idx;
          record = [key, value];
          whisper("input_A.write " + (rpr(record)));
          (yield input_A.write(record, resume));
        }
        whisper("calling input_A.end()");
        return (yield input_A.end(resume));
      };
    })(this));
  };

  this["YYY"] = function(T, done) {
    var input_A, input_B, log_ticks, log_ticks_id, n, route;
    log_ticks_id = null;
    log_ticks = function() {
      debug("------------------------------------ tick");
      return log_ticks_id = immediately(log_ticks);
    };
    route = '/tmp/X-test-db';
    db = HOLLERITH.new_db(route);
    input_A = D.create_throughstream();
    n = 10;
    input_B = input_A.pipe(D.$map((function(_this) {
      return function(phrase, handler) {
        var key, obj, prd, sbj;
        sbj = phrase[0], prd = phrase[1], obj = phrase[2];
        key = ['spo', sbj, prd];
        return HOLLERITH.has(db, key, function(error, status) {
          if (error != null) {
            return handler(error);
          }
          if (status) {
            return handler(new Error("phrase already in DB: " + (rpr(phrase))));
          } else {
            whisper("ok: " + (rpr(phrase)));
            return handler(null, phrase);
          }
        });
      };
    })(this))).pipe(HOLLERITH.$write(db, {
      batch: 3
    }));
    input_B.on('end', (function(_this) {
      return function() {
        help("input_B/end");
        clearImmediate(log_ticks_id);
        return done();
      };
    })(this));
    return step((function(_this) {
      return function*(resume) {
        var i, obj, phrase, prd, record_idx, ref, sbj;
        (yield HOLLERITH.clear(db, resume));
        for (record_idx = i = 0, ref = n; 0 <= ref ? i < ref : i > ref; record_idx = 0 <= ref ? ++i : --i) {
          sbj = "record";
          prd = "nr-" + record_idx;
          obj = record_idx;
          phrase = [sbj, prd, obj];
          whisper("input_A.write " + (rpr(phrase)));
          (yield input_A.write(phrase, resume));
        }
        whisper("calling input_A.end()");
        return (yield input_A.end(resume));
      };
    })(this));
  };

  show_keys_and_key_bfrs = function(keys, key_bfrs) {
    var columnify_settings, data, f, i, idx, key, key_txt, len, p;
    f = function(p) {
      var t;
      return ((function() {
        var i, len, ref, results;
        ref = (p.toString('hex')).split(/(..)/);
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          t = ref[i];
          if (t !== '') {
            results.push(t);
          }
        }
        return results;
      })()).join(' ');
    };
    columnify_settings = {
      paddingChr: ' '
    };
    data = [];
    key_bfrs = (function() {
      var i, len, results;
      results = [];
      for (i = 0, len = key_bfrs.length; i < len; i++) {
        p = key_bfrs[i];
        results.push(f(p));
      }
      return results;
    })();
    for (idx = i = 0, len = keys.length; i < len; idx = ++i) {
      key = keys[idx];
      key_txt = (rpr(key)).replace(/\\u0000/g, '∇');
      data.push({
        'str': key_txt,
        'bfr': key_bfrs[idx]
      });
    }
    help('\n' + CND.columnify(data, columnify_settings));
    return null;
  };

  get_new_db_name = function() {
    get_new_db_name.idx += +1;
    return "/tmp/hollerith2-testdb-" + get_new_db_name.idx;
  };

  get_new_db_name.idx = 0;

  read_all_keys = function(db, handler) {
    var Z, input;
    Z = [];
    input = db.createKeyStream();
    input.on('end', function() {
      return handler(null, Z);
    });
    return input.pipe($((function(_this) {
      return function(data, send) {
        return Z.push(data);
      };
    })(this)));
  };

  clear_leveldb = function(leveldb, handler) {
    return step((function(_this) {
      return function*(resume) {
        var route;
        route = leveldb['location'];
        (yield leveldb.close(resume));
        whisper("closed LevelDB");
        (yield leveldown.destroy(route, resume));
        whisper("destroyed LevelDB");
        (yield leveldb.open(resume));
        whisper("re-opened LevelDB");
        return handler(null);
      };
    })(this));
  };

  this._main = function(handler) {
    db = HOLLERITH.new_db(join(__dirname, '..', 'dbs/tests'));
    return test(this, {
      'timeout': 2500
    });
  };

  if (module.parent == null) {
    this["YYY"](null, function() {
      return help("(done)");
    });
  }

}).call(this);

//# sourceMappingURL=data:application/json;base64,
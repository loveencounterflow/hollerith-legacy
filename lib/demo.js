(function() {
  var $, CND, D, HOLLERITH, after, alert, badge, debug, echo, eventually, every, help, immediately, info, join, log, new_db, njs_path, options, repeat_immediately, rpr, step, suspend, urge, warn, whisper, ƒ,
    slice = [].slice;

  njs_path = require('path');

  join = njs_path.join;

  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'HOLLERITH/test';

  log = CND.get_logger('plain', badge);

  info = CND.get_logger('info', badge);

  whisper = CND.get_logger('whisper', badge);

  alert = CND.get_logger('alert', badge);

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  echo = CND.echo.bind(CND);

  suspend = require('coffeenode-suspend');

  step = suspend.step;

  after = suspend.after;

  eventually = suspend.eventually;

  immediately = suspend.immediately;

  repeat_immediately = suspend.repeat_immediately;

  every = suspend.every;

  D = require('pipedreams2');

  $ = D.remit.bind(D);

  new_db = require('level');

  HOLLERITH = require('./main');

  ƒ = CND.format_number.bind(CND);

  options = null;

  D.new_indexer = function(idx) {
    if (idx == null) {
      idx = 0;
    }
    return (function(_this) {
      return function(data) {
        return [idx++, data];
      };
    })(this);
  };

  this.initialize = function(handler) {
    options['db'] = HOLLERITH.new_db(options['route']);
    return handler(null);
  };

  this.read_sub = function(db, settings, read) {
    var arity, indexed, insert_index, open_stream_count, ref;
    switch (arity = arguments.length) {
      case 2:
        read = settings;
        settings = null;
        break;
      case 3:
        null;
        break;
      default:
        throw new Error("expected 2 or 3 arguments, got " + arity);
    }
    indexed = (ref = settings != null ? settings['indexed'] : void 0) != null ? ref : false;
    insert_index = indexed ? D.new_indexer() : function(x) {
      return x;
    };
    open_stream_count = 0;
    return $((function(_this) {
      return function(outer_data, outer_send, outer_end) {
        var sub_input;
        if (outer_data != null) {
          open_stream_count += +1;
          sub_input = read(outer_data).pipe($(function(bkey, send) {
            return send(bkey.toString('utf-8'));
          })).pipe((function() {
            var buffer;
            buffer = [];
            return $(function(inner_data, _, inner_end) {
              if (inner_data != null) {
                buffer.push(inner_data);
              }
              if (inner_end != null) {
                outer_send(insert_index(buffer));
                return open_stream_count += -1;
              }
            });
          })());
        }
        if (outer_end != null) {
          return repeat_immediately(function() {
            if (open_stream_count !== 0) {
              return true;
            }
            outer_end();
            return false;
          });
        }
      };
    })(this));
  };

  this.main = function(first_query) {
    if (first_query == null) {
      first_query = {
        gte: 'os|rank/cjt:0',
        lte: 'os|rank/cjt:9'
      };
    }
    return step((function(_this) {
      return function*(resume) {
        var CHR, count_chrs, db, input;
        (yield _this.initialize(resume));
        db = options['db'];
        CHR = require('/Volumes/Storage/io/coffeenode-chr');
        count_chrs = function(text) {
          return (CHR.chrs_from_text(text, {
            input: 'xncr'
          })).length;
        };
        input = db['%self'].createKeyStream(first_query);

        /* TAINT We can currently not use `HOLLERITH2.read_sub` because HOLLERITH2 assumes a key-only
        DB that uses binary encoding with a custom https://github.com/deanlandolt/bytewise layer; the current
        Jizura DB version uses UTF-8 strings and is a key/value DB.
         */
        return input.pipe(_this._$split_key()).pipe(_this.read_sub(db, {
          indexed: true
        }, function(key) {
          var glyph, ok, pt, rank, sk, sub_key;
          pt = key[0], ok = key[1], rank = key[2], sk = key[3], glyph = key[4];
          sub_key = "so|glyph:" + glyph + "|pod:";
          return db['%self'].createValueStream({
            gte: sub_key,
            lte: sub_key + '\uffff'
          });
        })).pipe(D.$densort(0, 0, true)).pipe($(function(arg, send) {
          var glyph, idx, lineup, pod, ref, strokeorder;
          idx = arg[0], (ref = arg[1], pod = ref[0]);
          debug('©jd5cE', pod);
          if (pod['strokeorder/short'] == null) {
            return warn('©9YXoq', pod);
          } else {
            glyph = pod['glyph/uchr'];
            strokeorder = pod['strokeorder/short'][0].length;
            lineup = pod['guide/lineup/uchr'].replace(/\u3000/g, '');
            return send([glyph, strokeorder, lineup]);
          }
        })).pipe($(function(arg, send) {
          var glyph, lineup, strokeorder;
          glyph = arg[0], strokeorder = arg[1], lineup = arg[2];
          return send([glyph, strokeorder, count_chrs(lineup)]);
        })).pipe(D.$sort(function(a, b) {
          var idx;
          idx = 1;
          if (a[idx] > b[idx]) {
            return +1;
          }
          if (a[idx] < b[idx]) {
            return -1;
          }
          return 0;
        })).pipe(D.$show());
      };
    })(this));
  };

  this._$split_key = function() {
    return $((function(_this) {
      return function(bkey, send) {
        var key;
        key = bkey.toString('utf-8');
        key = (key.split('|')).slice(0, 3);
        key = [key[0]].concat(slice.call(key[1].split(':')), slice.call(key[2].split(':')));
        return send(key);
      };
    })(this));
  };

  this._lte_from_gte = function(gte) {
    var R, last_idx;
    R = new Buffer((last_idx = Buffer.byteLength(gte)) + 1);
    R.write(gte);
    R[last_idx] = 0xff;
    return R;
  };

  this.$lineup_from_glyph = function(db) {
    var settings;
    settings = {
      indexed: false,
      single: true
    };
    return this.read_sub(db, settings, (function(_this) {
      return function(glyph) {
        var lte, sub_input;
        lte = "so|glyph:" + glyph + "|guide/lineup/uchr:";
        sub_input = db['%self'].createKeyStream({
          gte: lte,
          lte: _this._lte_from_gte(lte)
        });
        return sub_input;
      };
    })(this));
  };

  this.$shapeclass_wbf_from_glyph_and_lineup = function(db) {

    /* TAINT wrong */
    var settings;
    settings = {
      indexed: false,
      single: true
    };
    return this.read_sub(db, settings, (function(_this) {
      return function(arg) {
        var glyph, i, len, lineup_glyph, lineup_glyphs, results;
        glyph = arg[0], lineup_glyphs = arg[1];
        results = [];
        for (i = 0, len = lineup_glyphs.length; i < len; i++) {
          lineup_glyph = lineup_glyphs[i];
          results.push((function(lineup_glyph) {
            var gte, sub_input;
            gte = "so|glyph:" + lineup_glyph + "|factor/strokeclass/wbf:";
            sub_input = db['%self'].createKeyStream({
              gte: gte,
              lte: _this._lte_from_gte(gte)
            });
            return sub_input;
          })(lineup_glyph));
        }
        return results;
      };
    })(this));
  };

  HOLLERITH.$pick_subject = function() {
    return $((function(_this) {
      return function(lkey, send) {
        var _, pt, v0, v1;
        pt = lkey[0], _ = lkey[1], v0 = lkey[2], _ = lkey[3], v1 = lkey[4];
        return send(pt === 'so' ? v0 : v1);
      };
    })(this));
  };

  HOLLERITH.$pick_object = function() {
    return $((function(_this) {
      return function(lkey, send) {
        var _, pt, v0, v1;
        pt = lkey[0], _ = lkey[1], v0 = lkey[2], _ = lkey[3], v1 = lkey[4];
        return send(pt === 'so' ? v1 : v0);
      };
    })(this));
  };

  HOLLERITH.$pick_values = function() {
    return $((function(_this) {
      return function(lkey, send) {
        var _, pt, v0, v1;
        pt = lkey[0], _ = lkey[1], v0 = lkey[2], _ = lkey[3], v1 = lkey[4];
        return send(pt === 'so' ? [v0, v1] : [v1, v0]);
      };
    })(this));
  };

  this.$foobar = function() {

    /* TAINT picking first from list should be done by read_sub with single: yes */
    return D.combine([
      $((function(_this) {
        return function(keylist, send) {
          return send(keylist[0]);
        };
      })(this)), this._$split_key(), HOLLERITH.$pick_values()
    ]);
  };

  this.read_shapeclasswbf_by_factor = function(db, handler) {
    var CHR, as_uchr;
    CHR = require('/Volumes/Storage/io/coffeenode-chr');
    as_uchr = function(text) {
      return CHR.as_uchr(text, {
        input: 'xncr'
      });
    };
    return step((function(_this) {
      return function(resume) {
        var Z, gte, input, lte;
        Z = {};
        gte = "os|factor/strokeclass/wbf:";
        lte = _this._lte_from_gte(gte);
        input = db['%self'].createKeyStream({
          gte: gte,
          lte: lte
        });
        input.on('end', function() {
          return handler(null, Z);
        });
        return input.pipe(_this._$split_key()).pipe(HOLLERITH.$pick_values()).pipe($(function(arg, send) {
          var factor, shapeclass_wbf;
          factor = arg[0], shapeclass_wbf = arg[1];
          factor = as_uchr(factor);
          Z[factor] = shapeclass_wbf;
          return send([factor, shapeclass_wbf]);
        }));
      };
    })(this));
  };

  this.find_good_kwic_sample_glyphs = function(db, shapeclasswbf_by_factor) {
    return step((function(_this) {
      return function(resume) {
        var CHR, chrs_from_text, gte, input, lte;
        CHR = require('/Volumes/Storage/io/coffeenode-chr');
        chrs_from_text = function(text) {
          return CHR.chrs_from_text(text, {
            input: 'xncr'
          });
        };
        gte = 'os|guide/lineup/length:05';
        lte = _this._lte_from_gte(gte);
        input = db['%self'].createKeyStream({
          gte: gte,
          lte: lte
        });
        return input.pipe(_this._$split_key()).pipe($(function(lkey, send) {
          var glyph, ok, pt, rank, sk;
          pt = lkey[0], ok = lkey[1], rank = lkey[2], sk = lkey[3], glyph = lkey[4];
          return send(glyph);
        })).pipe(_this.$lineup_from_glyph(db)).pipe(_this.$foobar()).pipe($(function(arg, send) {
          var glyph, lineup;
          glyph = arg[0], lineup = arg[1];
          return send([glyph, chrs_from_text(lineup.replace(/\u3000/g, ''))]);
        })).pipe($(function(arg, send) {
          var counts, factor, factors, glyph, i, len, shapeclass_idx, shapeclass_wbf;
          glyph = arg[0], factors = arg[1];
          counts = [0, 0, 0, 0, 0];
          for (i = 0, len = factors.length; i < len; i++) {
            factor = factors[i];
            if ((shapeclass_wbf = shapeclasswbf_by_factor[factor]) == null) {
              warn(glyph, factor);
              echo(glyph, factor);
              continue;
            }
            shapeclass_idx = (parseInt(shapeclass_wbf[0], 10)) - 1;
            counts[shapeclass_idx] = 1;
          }
          if ((counts.join('')) === '11111') {
            return debug('©edwTH', glyph, factors, counts);
          }
        }));
      };
    })(this));
  };

  this.f = function() {
    return step((function(_this) {
      return function*(resume) {
        var db, shapeclasswbf_by_factor;
        (yield _this.initialize(resume));
        db = options['db'];
        shapeclasswbf_by_factor = (yield _this.read_shapeclasswbf_by_factor(db, resume));
        return _this.find_good_kwic_sample_glyphs(db, shapeclasswbf_by_factor);
      };
    })(this));
  };

  if (module.parent == null) {
    options = {
      'route': '/Volumes/Storage/io/jizura-datasources/data/leveldb'
    };
    debug('©AoOAS', options);
    this.f();
  }

}).call(this);

//# sourceMappingURL=data:application/json;base64,
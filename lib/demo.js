(function() {
  var $, CND, D, HOLLERITH, after, alert, badge, debug, echo, eventually, every, f, help, immediately, info, log, new_db, options, repeat_immediately, rpr, step, suspend, urge, warn, whisper, ƒ;

  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'HOLLERITH/test';

  log = CND.get_logger('plain', badge);

  info = CND.get_logger('info', badge);

  whisper = CND.get_logger('whisper', badge);

  alert = CND.get_logger('alert', badge);

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  echo = CND.echo.bind(CND);

  suspend = require('coffeenode-suspend');

  step = suspend.step;

  after = suspend.after;

  eventually = suspend.eventually;

  immediately = suspend.immediately;

  repeat_immediately = suspend.repeat_immediately;

  every = suspend.every;

  D = require('pipedreams2');

  $ = D.remit.bind(D);

  new_db = require('level');

  HOLLERITH = require('./main');

  ƒ = CND.format_number.bind(CND);

  options = null;

  D.new_indexer = function(idx) {
    if (idx == null) {
      idx = 0;
    }
    return (function(_this) {
      return function(data) {
        return [idx++, data];
      };
    })(this);
  };

  this.initialize = function(handler) {
    options['db'] = HOLLERITH.new_db(options['route']);
    return handler(null);
  };

  this.feed_demo_data = function(db, handler) {
    var count, substrate, zero;
    substrate = db['%self'];
    count = 0;
    zero = HOLLERITH._zero;
    return step((function(_this) {
      return function*(resume) {
        var fact_name, glyph, i, idx, j, k, len, n, os_key, ref, so_key, value;
        for (n = i = 1000; i < 1005; n = ++i) {
          (yield substrate.put(HOLLERITH._encode(db, n), zero, resume));
        }
        (yield substrate.put(HOLLERITH._encode(db, 'A'), zero, resume));
        (yield substrate.put(HOLLERITH._encode(db, 'B'), zero, resume));
        (yield substrate.put(HOLLERITH._encode(db, 'C'), zero, resume));
        (yield substrate.put(HOLLERITH._encode(db, 'a'), zero, resume));
        (yield substrate.put(HOLLERITH._encode(db, 'b'), zero, resume));
        (yield substrate.put(HOLLERITH._encode(db, 'c'), zero, resume));
        (yield substrate.put(HOLLERITH._encode(db, '𪜄'), zero, resume));
        (yield substrate.put(HOLLERITH._encode(db, '一'), zero, resume));
        (yield substrate.put(HOLLERITH._encode(db, '二'), zero, resume));
        (yield substrate.put(HOLLERITH._encode(db, '三'), zero, resume));
        (yield substrate.put(HOLLERITH._encode(db, null), zero, resume));
        (yield substrate.put(HOLLERITH._encode(db, void 0), zero, resume));
        (yield substrate.put(HOLLERITH._encode(db, true), zero, resume));
        (yield substrate.put(HOLLERITH._encode(db, false), zero, resume));
        (yield substrate.put(HOLLERITH._encode(db, +Infinity), zero, resume));
        (yield substrate.put(HOLLERITH._encode(db, -Infinity), zero, resume));
        (yield substrate.put(HOLLERITH._encode(db, {
          foo: 1,
          bar: 1
        }), zero, resume));
        (yield substrate.put(HOLLERITH._encode(db, {
          bar: 1,
          foo: 1
        }), zero, resume));
        for (idx = j = 1000; j < 1005; idx = ++j) {
          ref = ['strokeorder', 'components', 'reading'];
          for (k = 0, len = ref.length; k < len; k++) {
            fact_name = ref[k];
            value = idx;
            glyph = String.fromCodePoint(0x4e00 + idx);
            so_key = HOLLERITH._encode(db, ['<', ['glyph', glyph], [fact_name, value], null]);
            os_key = HOLLERITH._encode(db, ['>', [fact_name, value], ['glyph', glyph], null]);
            (yield substrate.put(os_key, zero, resume));
            (yield substrate.put(so_key, zero, resume));
            count += +1;
          }
        }
        help("inserted " + count + " entries");
        if (handler != null) {
          return handler(null);
        }
      };
    })(this));
  };

  this.main = function() {
    return step((function(_this) {
      return function*(resume) {
        var db;
        (yield _this.initialize(resume));
        db = options['db'];
        if (!/jizura/i.test(options['route'])) {
          (yield HOLLERITH.clear(db, resume));
          return (yield _this.feed_demo_data(db, resume));
        }
      };
    })(this));
  };

  if (module.parent == null) {
    options = {
      'route': '/tmp/leveldb'
    };
    this.main();
    f = function() {
      debug('©VhyC6', HOLLERITH.new_key(db, 'so', 'glyph', '家'));
      debug('©VhyC6', HOLLERITH.new_keys(db, 'so', 'glyph', '家', 'strokeorder', '4451353334'));
      return debug('©VhyC6', HOLLERITH.new_key(db, 'so', 'glyph', '家', 'pod', {
        '%foo': 'bar'
      }));
    };
  }

}).call(this);

//# sourceMappingURL=data:application/json;base64,
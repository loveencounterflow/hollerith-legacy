(function() {
  var CND, _decode, _encode, _invert_buffer, badge, buffer_too_short_error, bytecount_date, bytecount_number, bytecount_singular, debug, grow_rbuffer, last_unicode_chr, max_bytes_per_chr, rbuffer, rbuffer_delta_size, rbuffer_max_size, rbuffer_min_size, rbuffer_new_size, read_date, read_nnumber, read_pnumber, read_singular, read_text, release_extraneous_rbuffer_bytes, rpr, tm_date, tm_false, tm_hi, tm_list, tm_lo, tm_ninfinity, tm_nnumber, tm_null, tm_pinfinity, tm_pnumber, tm_text, tm_true, warn, write, write_date, write_infinity, write_number, write_singular, write_text;

  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'HOLLERITH/CODEC';

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  last_unicode_chr = (String.fromCharCode(0xdbff)) + (String.fromCharCode(0xdfff));


  /* should always be 3 in modern versions of NodeJS: */

  max_bytes_per_chr = Math.max((new Buffer("\uffff")).length, (new Buffer(last_unicode_chr)).length / 2);

  rbuffer_min_size = 1024;

  rbuffer_delta_size = 1024;

  rbuffer_max_size = 65536;

  rbuffer_new_size = Math.floor((rbuffer_max_size + rbuffer_min_size) / 2);

  rbuffer = new Buffer(rbuffer_min_size);

  buffer_too_short_error = new Error("buffer too short");

  this['typemarkers'] = {};

  tm_lo = this['typemarkers']['lo'] = 0x00;

  tm_null = this['typemarkers']['null'] = 'B'.codePointAt(0);

  tm_false = this['typemarkers']['false'] = 'C'.codePointAt(0);

  tm_true = this['typemarkers']['true'] = 'D'.codePointAt(0);

  tm_list = this['typemarkers']['list'] = 'E'.codePointAt(0);

  tm_date = this['typemarkers']['date'] = 'G'.codePointAt(0);

  tm_ninfinity = this['typemarkers']['ninfinity'] = 'J'.codePointAt(0);

  tm_nnumber = this['typemarkers']['nnumber'] = 'K'.codePointAt(0);

  tm_pnumber = this['typemarkers']['pnumber'] = 'L'.codePointAt(0);

  tm_pinfinity = this['typemarkers']['pinfinity'] = 'M'.codePointAt(0);

  tm_text = this['typemarkers']['text'] = 'T'.codePointAt(0);

  tm_hi = this['typemarkers']['hi'] = 0xff;

  this['bytecounts'] = {};

  bytecount_singular = this['bytecounts']['singular'] = 1;

  bytecount_number = this['bytecounts']['number'] = 9;

  bytecount_date = this['bytecounts']['date'] = bytecount_number + 1;

  this['sentinels'] = {};


  /* http://www.merlyn.demon.co.uk/js-datex.htm */

  this['sentinels']['firstdate'] = new Date(-8640000000000000);

  this['sentinels']['lastdate'] = new Date(+8640000000000000);

  this['keys'] = {};

  this['keys']['lo'] = new Buffer([this['typemarkers']['lo']]);

  this['keys']['hi'] = new Buffer([this['typemarkers']['hi']]);

  grow_rbuffer = function(delta_size) {
    var new_result_buffer;
    if (delta_size == null) {
      delta_size = rbuffer_delta_size;
    }
    if (delta_size < 1) {
      return null;
    }
    new_result_buffer = new Buffer(rbuffer.length + delta_size);
    rbuffer.copy(new_result_buffer);
    rbuffer = new_result_buffer;
    return null;
  };

  release_extraneous_rbuffer_bytes = function() {
    if (rbuffer.length > rbuffer_max_size) {
      rbuffer = new Buffer(rbuffer_new_size);
    }
    return null;
  };

  write_singular = function(idx, value) {
    var typemarker;
    if (!(rbuffer.length >= idx + bytecount_singular)) {
      throw buffer_too_short_error;
    }
    if (value === null) {
      typemarker = tm_null;
    } else if (value === false) {
      typemarker = tm_false;
    } else if (value === true) {
      typemarker = tm_true;
    } else {
      throw new Error("unable to encode value of type " + (CND.type_of(value)));
    }
    rbuffer[idx] = typemarker;
    return idx + bytecount_singular;
  };

  read_singular = function(buffer, idx) {
    var typemarker, value;
    switch (typemarker = buffer[idx]) {
      case tm_null:
        value = null;
        break;
      case tm_false:
        value = false;
        break;
      case tm_true:
        value = true;
        break;
      default:
        throw new Error("unable to decode 0x" + (typemarker.toString(16)) + " at index " + idx + " (" + (rpr(buffer)) + ")");
    }
    return [idx + bytecount_singular, value];
  };

  write_number = function(idx, number) {
    var type;
    if (!(rbuffer.length >= idx + bytecount_number)) {
      throw buffer_too_short_error;
    }
    if (number < 0) {
      type = tm_nnumber;
      number = -number;
    } else {
      type = tm_pnumber;
    }
    rbuffer[idx] = type;
    rbuffer.writeDoubleBE(number, idx + 1);
    if (type === tm_nnumber) {
      _invert_buffer(rbuffer, idx);
    }
    return idx + bytecount_number;
  };

  write_infinity = function(idx, number) {
    if (!(rbuffer.length >= idx + bytecount_singular)) {
      throw buffer_too_short_error;
    }
    rbuffer[idx] = number === -Infinity ? tm_ninfinity : tm_pinfinity;
    return idx + bytecount_singular;
  };

  read_nnumber = function(buffer, idx) {
    var copy;
    if (buffer[idx] !== tm_nnumber) {
      throw new Error("not a negative number at index " + idx);
    }
    copy = _invert_buffer(new Buffer(buffer.slice(idx, idx + bytecount_number)), 0);
    return [idx + bytecount_number, -(copy.readDoubleBE(1))];
  };

  read_pnumber = function(buffer, idx) {
    if (buffer[idx] !== tm_pnumber) {
      throw new Error("not a positive number at index " + idx);
    }
    return [idx + bytecount_number, buffer.readDoubleBE(idx + 1)];
  };

  _invert_buffer = function(buffer, idx) {
    var i, j, ref, ref1;
    for (i = j = ref = idx + 1, ref1 = idx + 8; ref <= ref1 ? j <= ref1 : j >= ref1; i = ref <= ref1 ? ++j : --j) {
      buffer[i] = ~buffer[i];
    }
    return buffer;
  };

  write_date = function(idx, date) {
    var new_idx, number;
    number = +date;
    rbuffer[idx] = tm_date;
    new_idx = write_number(idx + 1, number);
    return new_idx;
  };

  read_date = function(buffer, idx) {
    var ref, ref1, type, value;
    if (buffer[idx] !== tm_date) {
      throw new Error("not a date at index " + idx);
    }
    switch (type = buffer[idx + 1]) {
      case tm_nnumber:
        ref = read_nnumber(buffer, idx + 1), idx = ref[0], value = ref[1];
        break;
      case tm_pnumber:
        ref1 = read_pnumber(buffer, idx + 1), idx = ref1[0], value = ref1[1];
        break;
      default:
        throw new Error("unknown date type marker 0x" + (type.toString(16)) + " at index " + idx);
    }
    return [idx, new Date(value)];
  };

  write_text = function(idx, text) {
    var byte_count, length_estimate;
    text = text.replace(/\x01/g, '\x01\x02');
    text = text.replace(/\x00/g, '\x01\x01');
    length_estimate = max_bytes_per_chr * text.length + 3;
    grow_rbuffer(length_estimate - rbuffer.length - idx - 1);
    rbuffer[idx] = tm_text;
    byte_count = rbuffer.write(text, idx + 1);
    rbuffer[idx + byte_count + 1] = tm_lo;
    return idx + byte_count + 2;
  };

  read_text = function(buffer, idx) {
    var byte, stop_idx, text;
    if (buffer[idx] !== tm_text) {
      throw new Error("not a text at index " + idx);
    }
    stop_idx = idx;
    while (true) {
      stop_idx += +1;
      if ((byte = buffer[stop_idx]) === tm_lo) {
        break;
      }
      if (byte == null) {
        throw new Error("runaway string at index " + idx);
      }
    }
    text = buffer.toString('utf-8', idx + 1, stop_idx);
    text = text.replace(/\x01\x02/g, '\x01');
    text = text.replace(/\x01\x01/g, '\x00');
    return [stop_idx + 1, text];
  };

  write = function(idx, value) {
    var type;
    switch (type = CND.type_of(value)) {
      case 'text':
        return write_text(idx, value);
      case 'number':
        return write_number(idx, value);
      case 'jsinfinity':
        return write_infinity(idx, value);
      case 'jsdate':
        return write_date(idx, value);
    }
    return write_singular(idx, value);
  };

  this.encode = function(key, extra_byte) {
    var R, idx, type;
    rbuffer.fill(0x99);
    if ((type = CND.type_of(key)) !== 'list') {
      throw new Error("expected a list, got a " + type);
    }
    idx = _encode(key, 0, true);
    if (extra_byte != null) {
      rbuffer[idx] = extra_byte;
      idx += +1;
    }
    R = new Buffer(idx);
    rbuffer.copy(R, 0, 0, idx);
    release_extraneous_rbuffer_bytes();
    return R;
  };

  _encode = function(key, idx, is_top_level) {
    var element, element_idx, error, j, k, last_element_idx, len, len1, sub_element;
    last_element_idx = key.length - 1;
    for (element_idx = j = 0, len = key.length; j < len; element_idx = ++j) {
      element = key[element_idx];
      while (true) {
        try {
          if (CND.isa_list(element)) {
            if (!(is_top_level && element_idx === last_element_idx)) {
              throw new Error("unable to write a list in non-final position");
            }
            rbuffer[idx] = tm_list;
            idx += +1;
            for (k = 0, len1 = element.length; k < len1; k++) {
              sub_element = element[k];
              idx = _encode([sub_element], idx, false);
            }
          } else {
            idx = write(idx, element);
          }
          break;
        } catch (_error) {
          error = _error;
          if (error !== buffer_too_short_error) {
            warn("detected problem with key " + (rpr(key)));
            throw error;
          }
          grow_rbuffer();
        }
      }
    }
    return idx;
  };

  this.decode = function(buffer) {
    return (_decode(buffer, 0))[1];
  };

  _decode = function(buffer, idx) {
    var R, last_idx, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, type, value;
    R = [];
    last_idx = buffer.length - 1;
    while (true) {
      if (idx > last_idx) {
        break;
      }
      switch (type = buffer[idx]) {
        case tm_list:
          ref = _decode(buffer, idx + 1), idx = ref[0], value = ref[1];
          break;
        case tm_text:
          ref1 = read_text(buffer, idx), idx = ref1[0], value = ref1[1];
          break;
        case tm_nnumber:
          ref2 = read_nnumber(buffer, idx), idx = ref2[0], value = ref2[1];
          break;
        case tm_ninfinity:
          ref3 = [idx + 1, -Infinity], idx = ref3[0], value = ref3[1];
          break;
        case tm_pnumber:
          ref4 = read_pnumber(buffer, idx), idx = ref4[0], value = ref4[1];
          break;
        case tm_pinfinity:
          ref5 = [idx + 1, +Infinity], idx = ref5[0], value = ref5[1];
          break;
        case tm_date:
          ref6 = read_date(buffer, idx), idx = ref6[0], value = ref6[1];
          break;
        default:
          ref7 = read_singular(buffer, idx), idx = ref7[0], value = ref7[1];
      }
      R.push(value);
    }
    return [idx, R];
  };

}).call(this);

//# sourceMappingURL=data:application/json;base64,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R0FBRixFQUFPLENBQVAsQ0FBUCxDQWhCUTtFQUFBLENBbFBWLENBQUE7QUFBQSIsImZpbGUiOiJjb2RlYy5qcyIsInNvdXJjZVJvb3QiOiIvc291cmNlLyIsInNvdXJjZXNDb250ZW50IjpbIlxuXG5cbiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xuQ05EICAgICAgICAgICAgICAgICAgICAgICA9IHJlcXVpcmUgJ2NuZCdcbnJwciAgICAgICAgICAgICAgICAgICAgICAgPSBDTkQucnByXG5iYWRnZSAgICAgICAgICAgICAgICAgICAgID0gJ0hPTExFUklUSC9DT0RFQydcbmRlYnVnICAgICAgICAgICAgICAgICAgICAgPSBDTkQuZ2V0X2xvZ2dlciAnZGVidWcnLCAgICAgYmFkZ2Vcbndhcm4gICAgICAgICAgICAgICAgICAgICAgPSBDTkQuZ2V0X2xvZ2dlciAnd2FybicsICAgICBiYWRnZVxuXG5cbiMtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxubGFzdF91bmljb2RlX2NociAgICAgICAgPSAoIFN0cmluZy5mcm9tQ2hhckNvZGUgMHhkYmZmICkgKyAoIFN0cmluZy5mcm9tQ2hhckNvZGUgMHhkZmZmIClcbiMjIyBzaG91bGQgYWx3YXlzIGJlIDMgaW4gbW9kZXJuIHZlcnNpb25zIG9mIE5vZGVKUzogIyMjXG5tYXhfYnl0ZXNfcGVyX2NociAgICAgICA9IE1hdGgubWF4ICggbmV3IEJ1ZmZlciBcIlxcdWZmZmZcIiApLmxlbmd0aCwgKCBuZXcgQnVmZmVyIGxhc3RfdW5pY29kZV9jaHIgKS5sZW5ndGggLyAyXG5yYnVmZmVyX21pbl9zaXplICAgICAgICA9IDEwMjRcbnJidWZmZXJfZGVsdGFfc2l6ZSAgICAgID0gMTAyNFxucmJ1ZmZlcl9tYXhfc2l6ZSAgICAgICAgPSA2NTUzNlxucmJ1ZmZlcl9uZXdfc2l6ZSAgICAgICAgPSBNYXRoLmZsb29yICggcmJ1ZmZlcl9tYXhfc2l6ZSArIHJidWZmZXJfbWluX3NpemUgKSAvIDJcbnJidWZmZXIgICAgICAgICAgICAgICAgID0gbmV3IEJ1ZmZlciByYnVmZmVyX21pbl9zaXplXG5idWZmZXJfdG9vX3Nob3J0X2Vycm9yICA9IG5ldyBFcnJvciBcImJ1ZmZlciB0b28gc2hvcnRcIlxuXG4jLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbkBbICd0eXBlbWFya2VycycgXSAgPSB7fVxuIy4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uXG50bV9sbyAgICAgICAgICAgICAgID0gQFsgJ3R5cGVtYXJrZXJzJyAgXVsgJ2xvJyAgICAgICAgIF0gPSAweDAwXG50bV9udWxsICAgICAgICAgICAgID0gQFsgJ3R5cGVtYXJrZXJzJyAgXVsgJ251bGwnICAgICAgIF0gPSAnQicuY29kZVBvaW50QXQgMFxudG1fZmFsc2UgICAgICAgICAgICA9IEBbICd0eXBlbWFya2VycycgIF1bICdmYWxzZScgICAgICBdID0gJ0MnLmNvZGVQb2ludEF0IDBcbnRtX3RydWUgICAgICAgICAgICAgPSBAWyAndHlwZW1hcmtlcnMnICBdWyAndHJ1ZScgICAgICAgXSA9ICdEJy5jb2RlUG9pbnRBdCAwXG50bV9saXN0ICAgICAgICAgICAgID0gQFsgJ3R5cGVtYXJrZXJzJyAgXVsgJ2xpc3QnICAgICAgIF0gPSAnRScuY29kZVBvaW50QXQgMFxudG1fZGF0ZSAgICAgICAgICAgICA9IEBbICd0eXBlbWFya2VycycgIF1bICdkYXRlJyAgICAgICBdID0gJ0cnLmNvZGVQb2ludEF0IDBcbnRtX25pbmZpbml0eSAgICAgICAgPSBAWyAndHlwZW1hcmtlcnMnICBdWyAnbmluZmluaXR5JyAgXSA9ICdKJy5jb2RlUG9pbnRBdCAwXG50bV9ubnVtYmVyICAgICAgICAgID0gQFsgJ3R5cGVtYXJrZXJzJyAgXVsgJ25udW1iZXInICAgIF0gPSAnSycuY29kZVBvaW50QXQgMFxudG1fcG51bWJlciAgICAgICAgICA9IEBbICd0eXBlbWFya2VycycgIF1bICdwbnVtYmVyJyAgICBdID0gJ0wnLmNvZGVQb2ludEF0IDBcbnRtX3BpbmZpbml0eSAgICAgICAgPSBAWyAndHlwZW1hcmtlcnMnICBdWyAncGluZmluaXR5JyAgXSA9ICdNJy5jb2RlUG9pbnRBdCAwXG50bV90ZXh0ICAgICAgICAgICAgID0gQFsgJ3R5cGVtYXJrZXJzJyAgXVsgJ3RleHQnICAgICAgIF0gPSAnVCcuY29kZVBvaW50QXQgMFxudG1faGkgICAgICAgICAgICAgICA9IEBbICd0eXBlbWFya2VycycgIF1bICdoaScgICAgICAgICBdID0gMHhmZlxuXG4jLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbkBbICdieXRlY291bnRzJyBdICAgPSB7fVxuIy4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uXG5ieXRlY291bnRfc2luZ3VsYXIgID0gQFsgJ2J5dGVjb3VudHMnICAgXVsgJ3Npbmd1bGFyJyAgIF0gPSAxXG5ieXRlY291bnRfbnVtYmVyICAgID0gQFsgJ2J5dGVjb3VudHMnICAgXVsgJ251bWJlcicgICAgIF0gPSA5XG5ieXRlY291bnRfZGF0ZSAgICAgID0gQFsgJ2J5dGVjb3VudHMnICAgXVsgJ2RhdGUnICAgICAgIF0gPSBieXRlY291bnRfbnVtYmVyICsgMVxuXG4jLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbkBbICdzZW50aW5lbHMnIF0gID0ge31cbiMuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLlxuIyMjIGh0dHA6Ly93d3cubWVybHluLmRlbW9uLmNvLnVrL2pzLWRhdGV4Lmh0bSAjIyNcbkBbICdzZW50aW5lbHMnIF1bICdmaXJzdGRhdGUnIF0gPSBuZXcgRGF0ZSAtODY0MDAwMDAwMDAwMDAwMFxuQFsgJ3NlbnRpbmVscycgXVsgJ2xhc3RkYXRlJyAgXSA9IG5ldyBEYXRlICs4NjQwMDAwMDAwMDAwMDAwXG5cbiMtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuQFsgJ2tleXMnIF0gID0ge31cbiMuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLlxuQFsgJ2tleXMnIF1bICdsbycgXSA9IG5ldyBCdWZmZXIgWyBAWyAndHlwZW1hcmtlcnMnIF1bICdsbycgXSBdXG5AWyAna2V5cycgXVsgJ2hpJyBdID0gbmV3IEJ1ZmZlciBbIEBbICd0eXBlbWFya2VycycgXVsgJ2hpJyBdIF1cblxuIy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5ncm93X3JidWZmZXIgPSAoIGRlbHRhX3NpemUgKSAtPlxuICBkZWx0YV9zaXplID89IHJidWZmZXJfZGVsdGFfc2l6ZVxuICByZXR1cm4gbnVsbCBpZiBkZWx0YV9zaXplIDwgMVxuICAjIHdhcm4gXCJncm93aW5nIHJidWZmZXIgKCN7ZGVsdGFfc2l6ZX0gYnl0ZXMpXCJcbiAgbmV3X3Jlc3VsdF9idWZmZXIgPSBuZXcgQnVmZmVyIHJidWZmZXIubGVuZ3RoICsgZGVsdGFfc2l6ZVxuICByYnVmZmVyLmNvcHkgbmV3X3Jlc3VsdF9idWZmZXJcbiAgcmJ1ZmZlciAgICAgPSBuZXdfcmVzdWx0X2J1ZmZlclxuICByZXR1cm4gbnVsbFxuXG4jLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbnJlbGVhc2VfZXh0cmFuZW91c19yYnVmZmVyX2J5dGVzID0gLT5cbiAgcmJ1ZmZlciA9IG5ldyBCdWZmZXIgcmJ1ZmZlcl9uZXdfc2l6ZSBpZiByYnVmZmVyLmxlbmd0aCA+IHJidWZmZXJfbWF4X3NpemVcbiAgcmV0dXJuIG51bGxcblxuXG4jPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiMgVkFSQUlOVFNcbiMtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxud3JpdGVfc2luZ3VsYXIgPSAoIGlkeCwgdmFsdWUgKSAtPlxuICB0aHJvdyBidWZmZXJfdG9vX3Nob3J0X2Vycm9yIHVubGVzcyByYnVmZmVyLmxlbmd0aCA+PSBpZHggKyBieXRlY291bnRfc2luZ3VsYXJcbiAgaWYgICAgICB2YWx1ZSBpcyBudWxsICAgdGhlbiB0eXBlbWFya2VyID0gdG1fbnVsbFxuICBlbHNlIGlmIHZhbHVlIGlzIGZhbHNlICB0aGVuIHR5cGVtYXJrZXIgPSB0bV9mYWxzZVxuICBlbHNlIGlmIHZhbHVlIGlzIHRydWUgICB0aGVuIHR5cGVtYXJrZXIgPSB0bV90cnVlXG4gIGVsc2UgdGhyb3cgbmV3IEVycm9yIFwidW5hYmxlIHRvIGVuY29kZSB2YWx1ZSBvZiB0eXBlICN7Q05ELnR5cGVfb2YgdmFsdWV9XCJcbiAgcmJ1ZmZlclsgaWR4IF0gPSB0eXBlbWFya2VyXG4gIHJldHVybiBpZHggKyBieXRlY291bnRfc2luZ3VsYXJcblxuIy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5yZWFkX3Npbmd1bGFyID0gKCBidWZmZXIsIGlkeCApIC0+XG4gIHN3aXRjaCB0eXBlbWFya2VyID0gYnVmZmVyWyBpZHggXVxuICAgIHdoZW4gdG1fbnVsbCAgdGhlbiB2YWx1ZSA9IG51bGxcbiAgICB3aGVuIHRtX2ZhbHNlIHRoZW4gdmFsdWUgPSBmYWxzZVxuICAgIHdoZW4gdG1fdHJ1ZSAgdGhlbiB2YWx1ZSA9IHRydWVcbiAgICBlbHNlIHRocm93IG5ldyBFcnJvciBcInVuYWJsZSB0byBkZWNvZGUgMHgje3R5cGVtYXJrZXIudG9TdHJpbmcgMTZ9IGF0IGluZGV4ICN7aWR4fSAoI3tycHIgYnVmZmVyfSlcIlxuICByZXR1cm4gWyBpZHggKyBieXRlY291bnRfc2luZ3VsYXIsIHZhbHVlLCBdXG5cblxuIz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4jIE5VTUJFUlNcbiMtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxud3JpdGVfbnVtYmVyID0gKCBpZHgsIG51bWJlciApIC0+XG4gIHRocm93IGJ1ZmZlcl90b29fc2hvcnRfZXJyb3IgdW5sZXNzIHJidWZmZXIubGVuZ3RoID49IGlkeCArIGJ5dGVjb3VudF9udW1iZXJcbiAgaWYgbnVtYmVyIDwgMFxuICAgIHR5cGUgICAgPSB0bV9ubnVtYmVyXG4gICAgbnVtYmVyICA9IC1udW1iZXJcbiAgZWxzZVxuICAgIHR5cGUgICAgPSB0bV9wbnVtYmVyXG4gIHJidWZmZXJbIGlkeCBdID0gdHlwZVxuICByYnVmZmVyLndyaXRlRG91YmxlQkUgbnVtYmVyLCBpZHggKyAxXG4gIF9pbnZlcnRfYnVmZmVyIHJidWZmZXIsIGlkeCBpZiB0eXBlIGlzIHRtX25udW1iZXJcbiAgcmV0dXJuIGlkeCArIGJ5dGVjb3VudF9udW1iZXJcblxuIy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG53cml0ZV9pbmZpbml0eSA9ICggaWR4LCBudW1iZXIgKSAtPlxuICB0aHJvdyBidWZmZXJfdG9vX3Nob3J0X2Vycm9yIHVubGVzcyByYnVmZmVyLmxlbmd0aCA+PSBpZHggKyBieXRlY291bnRfc2luZ3VsYXJcbiAgcmJ1ZmZlclsgaWR4IF0gPSBpZiBudW1iZXIgaXMgLUluZmluaXR5IHRoZW4gdG1fbmluZmluaXR5IGVsc2UgdG1fcGluZmluaXR5XG4gIHJldHVybiBpZHggKyBieXRlY291bnRfc2luZ3VsYXJcblxuIy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5yZWFkX25udW1iZXIgPSAoIGJ1ZmZlciwgaWR4ICkgLT5cbiAgdGhyb3cgbmV3IEVycm9yIFwibm90IGEgbmVnYXRpdmUgbnVtYmVyIGF0IGluZGV4ICN7aWR4fVwiIHVubGVzcyBidWZmZXJbIGlkeCBdIGlzIHRtX25udW1iZXJcbiAgY29weSA9IF9pbnZlcnRfYnVmZmVyICggbmV3IEJ1ZmZlciBidWZmZXIuc2xpY2UgaWR4LCBpZHggKyBieXRlY291bnRfbnVtYmVyICksIDBcbiAgcmV0dXJuIFsgaWR4ICsgYnl0ZWNvdW50X251bWJlciwgLSggY29weS5yZWFkRG91YmxlQkUgMSApLCBdXG5cbiMtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxucmVhZF9wbnVtYmVyID0gKCBidWZmZXIsIGlkeCApIC0+XG4gIHRocm93IG5ldyBFcnJvciBcIm5vdCBhIHBvc2l0aXZlIG51bWJlciBhdCBpbmRleCAje2lkeH1cIiB1bmxlc3MgYnVmZmVyWyBpZHggXSBpcyB0bV9wbnVtYmVyXG4gIHJldHVybiBbIGlkeCArIGJ5dGVjb3VudF9udW1iZXIsIGJ1ZmZlci5yZWFkRG91YmxlQkUgaWR4ICsgMSwgXVxuXG4jLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbl9pbnZlcnRfYnVmZmVyID0gKCBidWZmZXIsIGlkeCApIC0+XG4gIGJ1ZmZlclsgaSBdID0gfmJ1ZmZlclsgaSBdIGZvciBpIGluIFsgaWR4ICsgMSAuLiBpZHggKyA4IF1cbiAgcmV0dXJuIGJ1ZmZlclxuXG5cbiM9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuIyBEQVRFU1xuIy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG53cml0ZV9kYXRlID0gKCBpZHgsIGRhdGUgKSAtPlxuICBudW1iZXIgICAgICAgICAgPSArZGF0ZVxuICByYnVmZmVyWyBpZHggXSAgPSB0bV9kYXRlXG4gIG5ld19pZHggICAgICAgICA9IHdyaXRlX251bWJlciBpZHggKyAxLCBudW1iZXJcbiAgcmV0dXJuIG5ld19pZHhcblxuIy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5yZWFkX2RhdGUgPSAoIGJ1ZmZlciwgaWR4ICkgLT5cbiAgdGhyb3cgbmV3IEVycm9yIFwibm90IGEgZGF0ZSBhdCBpbmRleCAje2lkeH1cIiB1bmxlc3MgYnVmZmVyWyBpZHggXSBpcyB0bV9kYXRlXG4gIHN3aXRjaCB0eXBlID0gYnVmZmVyWyBpZHggKyAxIF1cbiAgICB3aGVuIHRtX25udW1iZXIgICAgdGhlbiBbIGlkeCwgdmFsdWUsIF0gPSByZWFkX25udW1iZXIgICAgYnVmZmVyLCBpZHggKyAxXG4gICAgd2hlbiB0bV9wbnVtYmVyICAgIHRoZW4gWyBpZHgsIHZhbHVlLCBdID0gcmVhZF9wbnVtYmVyICAgIGJ1ZmZlciwgaWR4ICsgMVxuICAgIGVsc2UgdGhyb3cgbmV3IEVycm9yIFwidW5rbm93biBkYXRlIHR5cGUgbWFya2VyIDB4I3t0eXBlLnRvU3RyaW5nIDE2fSBhdCBpbmRleCAje2lkeH1cIlxuICByZXR1cm4gWyBpZHgsICggbmV3IERhdGUgdmFsdWUgKSwgXVxuXG5cbiM9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuIyBURVhUU1xuIy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG53cml0ZV90ZXh0ID0gKCBpZHgsIHRleHQgKSAtPlxuICB0ZXh0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPSB0ZXh0LnJlcGxhY2UgL1xceDAxL2csICdcXHgwMVxceDAyJ1xuICB0ZXh0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPSB0ZXh0LnJlcGxhY2UgL1xceDAwL2csICdcXHgwMVxceDAxJ1xuICBsZW5ndGhfZXN0aW1hdGUgICAgICAgICAgICAgICAgICAgPSBtYXhfYnl0ZXNfcGVyX2NociAqIHRleHQubGVuZ3RoICsgM1xuICBncm93X3JidWZmZXIgbGVuZ3RoX2VzdGltYXRlIC0gcmJ1ZmZlci5sZW5ndGggLSBpZHggLSAxXG4gIHJidWZmZXJbIGlkeCAgICAgICAgICAgICAgICAgICAgXSA9IHRtX3RleHRcbiAgYnl0ZV9jb3VudCAgICAgICAgICAgICAgICAgICAgICAgID0gcmJ1ZmZlci53cml0ZSB0ZXh0LCBpZHggKyAxXG4gIHJidWZmZXJbIGlkeCArIGJ5dGVfY291bnQgKyAxICAgXSA9IHRtX2xvXG4gIHJldHVybiBpZHggKyBieXRlX2NvdW50ICsgMlxuXG4jLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbnJlYWRfdGV4dCA9ICggYnVmZmVyLCBpZHggKSAtPlxuICAjIHVyZ2UgJ8KpSjJkNlInLCBidWZmZXJbIGlkeCBdLCBidWZmZXJbIGlkeCBdIGlzIHRtX3RleHRcbiAgdGhyb3cgbmV3IEVycm9yIFwibm90IGEgdGV4dCBhdCBpbmRleCAje2lkeH1cIiB1bmxlc3MgYnVmZmVyWyBpZHggXSBpcyB0bV90ZXh0XG4gIHN0b3BfaWR4ID0gaWR4XG4gIGxvb3BcbiAgICBzdG9wX2lkeCArPSArMVxuICAgIGJyZWFrIGlmICggYnl0ZSA9IGJ1ZmZlclsgc3RvcF9pZHggXSApIGlzIHRtX2xvXG4gICAgdGhyb3cgbmV3IEVycm9yIFwicnVuYXdheSBzdHJpbmcgYXQgaW5kZXggI3tpZHh9XCIgdW5sZXNzIGJ5dGU/XG4gIHRleHQgPSBidWZmZXIudG9TdHJpbmcgJ3V0Zi04JywgaWR4ICsgMSwgc3RvcF9pZHhcbiAgdGV4dCA9IHRleHQucmVwbGFjZSAvXFx4MDFcXHgwMi9nLCAnXFx4MDEnXG4gIHRleHQgPSB0ZXh0LnJlcGxhY2UgL1xceDAxXFx4MDEvZywgJ1xceDAwJ1xuICByZXR1cm4gWyBzdG9wX2lkeCArIDEsIHRleHQsIF1cblxuXG4jPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiMgTElTVFNcbiMtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5cbiM9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuI1xuIy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG53cml0ZSA9ICggaWR4LCB2YWx1ZSApIC0+XG4gIHN3aXRjaCB0eXBlID0gQ05ELnR5cGVfb2YgdmFsdWVcbiAgICB3aGVuICd0ZXh0JyAgICAgICB0aGVuIHJldHVybiB3cml0ZV90ZXh0ICAgICBpZHgsIHZhbHVlXG4gICAgd2hlbiAnbnVtYmVyJyAgICAgdGhlbiByZXR1cm4gd3JpdGVfbnVtYmVyICAgaWR4LCB2YWx1ZVxuICAgIHdoZW4gJ2pzaW5maW5pdHknIHRoZW4gcmV0dXJuIHdyaXRlX2luZmluaXR5IGlkeCwgdmFsdWVcbiAgICB3aGVuICdqc2RhdGUnICAgICB0aGVuIHJldHVybiB3cml0ZV9kYXRlICAgICBpZHgsIHZhbHVlXG4gICMuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi5cbiAgcmV0dXJuIHdyaXRlX3Npbmd1bGFyICBpZHgsIHZhbHVlXG5cblxuIz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4jIFBVQkxJQyBBUElcbiMtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuQGVuY29kZSA9ICgga2V5LCBleHRyYV9ieXRlICkgLT5cbiAgcmJ1ZmZlci5maWxsIDB4OTlcbiAgdGhyb3cgbmV3IEVycm9yIFwiZXhwZWN0ZWQgYSBsaXN0LCBnb3QgYSAje3R5cGV9XCIgdW5sZXNzICggdHlwZSA9IENORC50eXBlX29mIGtleSApIGlzICdsaXN0J1xuICBpZHggPSBfZW5jb2RlIGtleSwgMCwgdHJ1ZVxuICAjLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uXG4gIGlmIGV4dHJhX2J5dGU/XG4gICAgcmJ1ZmZlclsgaWR4IF0gID0gZXh0cmFfYnl0ZVxuICAgIGlkeCAgICAgICAgICAgICs9ICsxXG4gICMuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi5cbiAgUiA9IG5ldyBCdWZmZXIgaWR4XG4gIHJidWZmZXIuY29weSBSLCAwLCAwLCBpZHhcbiAgcmVsZWFzZV9leHRyYW5lb3VzX3JidWZmZXJfYnl0ZXMoKVxuICAjLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uXG4gIHJldHVybiBSXG5cbiMtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuX2VuY29kZSA9ICgga2V5LCBpZHgsIGlzX3RvcF9sZXZlbCApIC0+XG4gIGxhc3RfZWxlbWVudF9pZHggPSBrZXkubGVuZ3RoIC0gMVxuICBmb3IgZWxlbWVudCwgZWxlbWVudF9pZHggaW4ga2V5XG4gICAgbG9vcFxuICAgICAgdHJ5XG4gICAgICAgIGlmIENORC5pc2FfbGlzdCBlbGVtZW50XG4gICAgICAgICAgdW5sZXNzIGlzX3RvcF9sZXZlbCBhbmQgZWxlbWVudF9pZHggaXMgbGFzdF9lbGVtZW50X2lkeFxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yIFwidW5hYmxlIHRvIHdyaXRlIGEgbGlzdCBpbiBub24tZmluYWwgcG9zaXRpb25cIlxuICAgICAgICAgIHJidWZmZXJbIGlkeCBdICA9IHRtX2xpc3RcbiAgICAgICAgICBpZHggICAgICAgICAgICArPSArMVxuICAgICAgICAgIGZvciBzdWJfZWxlbWVudCBpbiBlbGVtZW50XG4gICAgICAgICAgICBpZHggPSBfZW5jb2RlIFsgc3ViX2VsZW1lbnQsIF0sIGlkeCwgZmFsc2VcbiAgICAgICAgZWxzZVxuICAgICAgICAgIGlkeCA9IHdyaXRlIGlkeCwgZWxlbWVudFxuICAgICAgICBicmVha1xuICAgICAgY2F0Y2ggZXJyb3JcbiAgICAgICAgdW5sZXNzIGVycm9yIGlzIGJ1ZmZlcl90b29fc2hvcnRfZXJyb3JcbiAgICAgICAgICB3YXJuIFwiZGV0ZWN0ZWQgcHJvYmxlbSB3aXRoIGtleSAje3JwciBrZXl9XCJcbiAgICAgICAgICB0aHJvdyBlcnJvclxuICAgICAgICBncm93X3JidWZmZXIoKVxuICAjLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uXG4gIHJldHVybiBpZHhcblxuIy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5AZGVjb2RlID0gKCBidWZmZXIgKSAtPlxuICByZXR1cm4gKCBfZGVjb2RlIGJ1ZmZlciwgMCApWyAxIF1cblxuIy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5fZGVjb2RlID0gKCBidWZmZXIsIGlkeCApIC0+XG4gIFIgICAgICAgICA9IFtdXG4gIGxhc3RfaWR4ICA9IGJ1ZmZlci5sZW5ndGggLSAxXG4gIGxvb3BcbiAgICBicmVhayBpZiBpZHggPiBsYXN0X2lkeFxuICAgIHN3aXRjaCB0eXBlID0gYnVmZmVyWyBpZHggXVxuICAgICAgd2hlbiB0bV9saXN0ICAgICAgIHRoZW4gWyBpZHgsIHZhbHVlLCBdID0gX2RlY29kZSAgICAgICAgIGJ1ZmZlciwgaWR4ICsgMVxuICAgICAgd2hlbiB0bV90ZXh0ICAgICAgIHRoZW4gWyBpZHgsIHZhbHVlLCBdID0gcmVhZF90ZXh0ICAgICAgIGJ1ZmZlciwgaWR4XG4gICAgICB3aGVuIHRtX25udW1iZXIgICAgdGhlbiBbIGlkeCwgdmFsdWUsIF0gPSByZWFkX25udW1iZXIgICAgYnVmZmVyLCBpZHhcbiAgICAgIHdoZW4gdG1fbmluZmluaXR5ICB0aGVuIFsgaWR4LCB2YWx1ZSwgXSA9IFsgaWR4ICsgMSwgLUluZmluaXR5LCBdXG4gICAgICB3aGVuIHRtX3BudW1iZXIgICAgdGhlbiBbIGlkeCwgdmFsdWUsIF0gPSByZWFkX3BudW1iZXIgICAgYnVmZmVyLCBpZHhcbiAgICAgIHdoZW4gdG1fcGluZmluaXR5ICB0aGVuIFsgaWR4LCB2YWx1ZSwgXSA9IFsgaWR4ICsgMSwgK0luZmluaXR5LCBdXG4gICAgICB3aGVuIHRtX2RhdGUgICAgICAgdGhlbiBbIGlkeCwgdmFsdWUsIF0gPSByZWFkX2RhdGUgICAgICAgYnVmZmVyLCBpZHhcbiAgICAgIGVsc2UgICAgICAgICAgICAgICAgICAgIFsgaWR4LCB2YWx1ZSwgXSA9IHJlYWRfc2luZ3VsYXIgICBidWZmZXIsIGlkeFxuICAgIFIucHVzaCB2YWx1ZVxuICAjLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uXG4gIHJldHVybiBbIGlkeCwgUiBdXG5cblxuXG5cblxuXG5cbiJdfQ==
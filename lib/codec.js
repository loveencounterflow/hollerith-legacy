(function() {
  var $, CND, D, _invert_buffer, after, alert, badge, buffer_too_short_error, bytecount_date, bytecount_number, bytecount_singular, debug, echo, eventually, every, grow_rbuffer, help, immediately, info, join, last_unicode_chr, log, max_bytes_per_chr, njs_path, rbuffer, rbuffer_delta_size, rbuffer_max_size, rbuffer_min_size, rbuffer_new_size, read_date, read_nnumber, read_pnumber, read_singular, read_text, release_extraneous_rbuffer_bytes, repeat_immediately, rpr, step, suspend, tm_date, tm_false, tm_hi, tm_lo, tm_ninfinity, tm_nnumber, tm_null, tm_pinfinity, tm_pnumber, tm_text, tm_true, urge, warn, whisper, write, write_date, write_infinity, write_number, write_singular, write_text;

  njs_path = require('path');

  join = njs_path.join;

  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'HOLLERITH/CODEC';

  log = CND.get_logger('plain', badge);

  info = CND.get_logger('info', badge);

  whisper = CND.get_logger('whisper', badge);

  alert = CND.get_logger('alert', badge);

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  echo = CND.echo.bind(CND);

  suspend = require('coffeenode-suspend');

  step = suspend.step;

  after = suspend.after;

  eventually = suspend.eventually;

  immediately = suspend.immediately;

  repeat_immediately = suspend.repeat_immediately;

  every = suspend.every;

  D = require('pipedreams2');

  $ = D.remit.bind(D);

  last_unicode_chr = (String.fromCharCode(0xdbff)) + (String.fromCharCode(0xdfff));


  /* should always be 3 in modern versions of NodeJS: */

  max_bytes_per_chr = Math.max((new Buffer("\uffff")).length, (new Buffer(last_unicode_chr)).length / 2);

  rbuffer_min_size = 1024;

  rbuffer_delta_size = 1024;

  rbuffer_max_size = 65536;

  rbuffer_new_size = Math.floor((rbuffer_max_size + rbuffer_min_size) / 2);

  rbuffer = new Buffer(rbuffer_min_size);

  buffer_too_short_error = new Error("buffer too short");


  /* http://www.merlyn.demon.co.uk/js-datex.htm */

  this.first_date = new Date(-8640000000000000);

  this.last_date = new Date(+8640000000000000);

  this['typemarkers'] = {};

  tm_lo = this['typemarkers']['lo'] = 0x00;

  tm_null = this['typemarkers']['null'] = 'B'.codePointAt(0);

  tm_false = this['typemarkers']['false'] = 'C'.codePointAt(0);

  tm_true = this['typemarkers']['true'] = 'D'.codePointAt(0);

  tm_date = this['typemarkers']['date'] = 'G'.codePointAt(0);

  tm_ninfinity = this['typemarkers']['ninfinity'] = 'J'.codePointAt(0);

  tm_nnumber = this['typemarkers']['nnumber'] = 'K'.codePointAt(0);

  tm_pnumber = this['typemarkers']['pnumber'] = 'L'.codePointAt(0);

  tm_pinfinity = this['typemarkers']['pinfinity'] = 'M'.codePointAt(0);

  tm_text = this['typemarkers']['text'] = 'T'.codePointAt(0);

  tm_hi = this['typemarkers']['hi'] = 0xff;

  this['bytecounts'] = {};

  bytecount_singular = this['bytecounts']['singular'] = 1;

  bytecount_number = this['bytecounts']['number'] = 9;

  bytecount_date = this['bytecounts']['date'] = bytecount_number + 1;

  grow_rbuffer = function(delta_size) {
    var new_result_buffer;
    if (delta_size == null) {
      delta_size = rbuffer_delta_size;
    }
    if (delta_size < 1) {
      return null;
    }
    new_result_buffer = new Buffer(rbuffer.length + delta_size);
    rbuffer.copy(new_result_buffer);
    rbuffer = new_result_buffer;
    return null;
  };

  release_extraneous_rbuffer_bytes = function() {
    if (rbuffer.length > rbuffer_max_size) {
      rbuffer = new Buffer(rbuffer_new_size);
    }
    return null;
  };

  write_singular = function(idx, value) {
    var typemarker;
    if (!(rbuffer.length >= idx + bytecount_singular)) {
      throw buffer_too_short_error;
    }
    if (value === null) {
      typemarker = tm_null;
    } else if (value === false) {
      typemarker = tm_false;
    } else if (value === true) {
      typemarker = tm_true;
    } else {
      throw new Error("unable to encode value of type " + (CND.type_of(value)));
    }
    rbuffer[idx] = typemarker;
    return idx + bytecount_singular;
  };

  read_singular = function(buffer, idx) {
    var typemarker, value;
    switch (typemarker = buffer[idx]) {
      case tm_null:
        value = null;
        break;
      case tm_false:
        value = false;
        break;
      case tm_true:
        value = true;
        break;
      default:
        throw new Error("not a variant at index " + idx);
    }
    return [idx + bytecount_singular, value];
  };

  write_number = function(idx, number) {
    var type;
    if (!(rbuffer.length >= idx + bytecount_number)) {
      throw buffer_too_short_error;
    }
    if (number < 0) {
      type = tm_nnumber;
      number = -number;
    } else {
      type = tm_pnumber;
    }
    rbuffer[idx] = type;
    rbuffer.writeDoubleBE(number, idx + 1);
    if (type === tm_nnumber) {
      _invert_buffer(rbuffer, idx);
    }
    return idx + bytecount_number;
  };

  write_infinity = function(idx, number) {
    if (!(rbuffer.length >= idx + bytecount_singular)) {
      throw buffer_too_short_error;
    }
    rbuffer[idx] = number === -Infinity ? tm_ninfinity : tm_pinfinity;
    return idx + bytecount_singular;
  };

  read_nnumber = function(buffer, idx) {
    var copy;
    if (buffer[idx] !== tm_nnumber) {
      throw new Error("not a negative number at index " + idx);
    }
    copy = _invert_buffer(new Buffer(buffer.slice(idx, idx + bytecount_number)), 0);
    return [idx + bytecount_number, -(copy.readDoubleBE(1))];
  };

  read_pnumber = function(buffer, idx) {
    if (buffer[idx] !== tm_pnumber) {
      throw new Error("not a positive number at index " + idx);
    }
    return [idx + bytecount_number, buffer.readDoubleBE(idx + 1)];
  };

  _invert_buffer = function(buffer, idx) {
    var i, j, ref, ref1;
    for (i = j = ref = idx + 1, ref1 = idx + 8; ref <= ref1 ? j <= ref1 : j >= ref1; i = ref <= ref1 ? ++j : --j) {
      buffer[i] = ~buffer[i];
    }
    return buffer;
  };

  write_date = function(idx, date) {
    var new_idx, number;
    number = +date;
    rbuffer[idx] = tm_date;
    new_idx = write_number(idx + 1, number);
    return new_idx;
  };

  read_date = function(buffer, idx) {
    var ref, ref1, type, value;
    if (buffer[idx] !== tm_date) {
      throw new Error("not a date at index " + idx);
    }
    switch (type = buffer[idx + 1]) {
      case tm_nnumber:
        ref = read_nnumber(buffer, idx + 1), idx = ref[0], value = ref[1];
        break;
      case tm_pnumber:
        ref1 = read_pnumber(buffer, idx + 1), idx = ref1[0], value = ref1[1];
        break;
      default:
        throw new Error("unknown date type marker 0x" + (type.toString(16)) + " at index " + idx);
    }
    return [idx, new Date(value)];
  };

  write_text = function(idx, text) {
    var byte_count, length_estimate;
    text = text.replace(/\x01/g, '\x01\x02');
    text = text.replace(/\x00/g, '\x01\x01');
    length_estimate = max_bytes_per_chr * text.length + 3;
    grow_rbuffer(length_estimate - rbuffer.length - idx - 1);
    rbuffer[idx] = tm_text;
    byte_count = rbuffer.write(text, idx + 1);
    rbuffer[idx + byte_count + 1] = tm_lo;
    return idx + byte_count + 2;
  };

  read_text = function(buffer, idx) {
    var byte, stop_idx, text;
    if (buffer[idx] !== tm_text) {
      throw new Error("not a text at index " + idx);
    }
    stop_idx = idx;
    while (true) {
      stop_idx += +1;
      if ((byte = buffer[stop_idx]) === tm_lo) {
        break;
      }
      if (byte == null) {
        throw new Error("runaway string at index " + idx);
      }
    }
    text = buffer.toString('utf-8', idx + 1, stop_idx);
    text = text.replace(/\x01\x02/g, '\x01');
    text = text.replace(/\x01\x01/g, '\x00');
    return [stop_idx + 1, text];
  };

  write = function(idx, value) {
    var type;
    switch (type = CND.type_of(value)) {
      case 'text':
        return write_text(idx, value);
      case 'number':
        return write_number(idx, value);
      case 'jsinfinity':
        return write_infinity(idx, value);
      case 'jsdate':
        return write_date(idx, value);
    }
    return write_singular(idx, value);
  };

  this.encode = function(value) {
    var R, element, error, idx, j, len, type;
    if ((type = CND.type_of(value)) !== 'list') {
      throw new Error("expected a list, got a " + type);
    }
    idx = 0;
    for (j = 0, len = value.length; j < len; j++) {
      element = value[j];
      while (true) {
        try {
          idx = write(idx, element);
          break;
        } catch (_error) {
          error = _error;
          if (error !== buffer_too_short_error) {
            throw error;
          }
          grow_rbuffer();
        }
      }
    }
    R = new Buffer(idx);
    rbuffer.copy(R, 0, 0, idx);
    release_extraneous_rbuffer_bytes();
    return R;
  };

  this.decode = function(buffer) {
    var R, idx, last_idx, ref, ref1, ref2, ref3, ref4, ref5, ref6, type, value;
    R = [];
    idx = 0;
    last_idx = buffer.length - 1;
    while (true) {
      if (idx > last_idx) {
        break;
      }
      switch (type = buffer[idx]) {
        case tm_text:
          ref = read_text(buffer, idx), idx = ref[0], value = ref[1];
          break;
        case tm_nnumber:
          ref1 = read_nnumber(buffer, idx), idx = ref1[0], value = ref1[1];
          break;
        case tm_ninfinity:
          ref2 = [idx + 1, -Infinity], idx = ref2[0], value = ref2[1];
          break;
        case tm_pnumber:
          ref3 = read_pnumber(buffer, idx), idx = ref3[0], value = ref3[1];
          break;
        case tm_pinfinity:
          ref4 = [idx + 1, +Infinity], idx = ref4[0], value = ref4[1];
          break;
        case tm_date:
          ref5 = read_date(buffer, idx), idx = ref5[0], value = ref5[1];
          break;
        default:
          ref6 = read_singular(buffer, idx), idx = ref6[0], value = ref6[1];
      }
      R.push(value);
    }
    return R;
  };

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvZGVjLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFJQTtBQUFBLE1BQUEsNnFCQUFBOztBQUFBLEVBQUEsUUFBQSxHQUE0QixPQUFBLENBQVEsTUFBUixDQUE1QixDQUFBOztBQUFBLEVBRUEsSUFBQSxHQUE0QixRQUFRLENBQUMsSUFGckMsQ0FBQTs7QUFBQSxFQUlBLEdBQUEsR0FBNEIsT0FBQSxDQUFRLEtBQVIsQ0FKNUIsQ0FBQTs7QUFBQSxFQUtBLEdBQUEsR0FBNEIsR0FBRyxDQUFDLEdBTGhDLENBQUE7O0FBQUEsRUFNQSxLQUFBLEdBQTRCLGlCQU41QixDQUFBOztBQUFBLEVBT0EsR0FBQSxHQUE0QixHQUFHLENBQUMsVUFBSixDQUFlLE9BQWYsRUFBNEIsS0FBNUIsQ0FQNUIsQ0FBQTs7QUFBQSxFQVFBLElBQUEsR0FBNEIsR0FBRyxDQUFDLFVBQUosQ0FBZSxNQUFmLEVBQTRCLEtBQTVCLENBUjVCLENBQUE7O0FBQUEsRUFTQSxPQUFBLEdBQTRCLEdBQUcsQ0FBQyxVQUFKLENBQWUsU0FBZixFQUE0QixLQUE1QixDQVQ1QixDQUFBOztBQUFBLEVBVUEsS0FBQSxHQUE0QixHQUFHLENBQUMsVUFBSixDQUFlLE9BQWYsRUFBNEIsS0FBNUIsQ0FWNUIsQ0FBQTs7QUFBQSxFQVdBLEtBQUEsR0FBNEIsR0FBRyxDQUFDLFVBQUosQ0FBZSxPQUFmLEVBQTRCLEtBQTVCLENBWDVCLENBQUE7O0FBQUEsRUFZQSxJQUFBLEdBQTRCLEdBQUcsQ0FBQyxVQUFKLENBQWUsTUFBZixFQUE0QixLQUE1QixDQVo1QixDQUFBOztBQUFBLEVBYUEsSUFBQSxHQUE0QixHQUFHLENBQUMsVUFBSixDQUFlLE1BQWYsRUFBNEIsS0FBNUIsQ0FiNUIsQ0FBQTs7QUFBQSxFQWNBLElBQUEsR0FBNEIsR0FBRyxDQUFDLFVBQUosQ0FBZSxNQUFmLEVBQTRCLEtBQTVCLENBZDVCLENBQUE7O0FBQUEsRUFlQSxJQUFBLEdBQTRCLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBVCxDQUFjLEdBQWQsQ0FmNUIsQ0FBQTs7QUFBQSxFQWlCQSxPQUFBLEdBQTRCLE9BQUEsQ0FBUSxvQkFBUixDQWpCNUIsQ0FBQTs7QUFBQSxFQWtCQSxJQUFBLEdBQTRCLE9BQU8sQ0FBQyxJQWxCcEMsQ0FBQTs7QUFBQSxFQW1CQSxLQUFBLEdBQTRCLE9BQU8sQ0FBQyxLQW5CcEMsQ0FBQTs7QUFBQSxFQW9CQSxVQUFBLEdBQTRCLE9BQU8sQ0FBQyxVQXBCcEMsQ0FBQTs7QUFBQSxFQXFCQSxXQUFBLEdBQTRCLE9BQU8sQ0FBQyxXQXJCcEMsQ0FBQTs7QUFBQSxFQXNCQSxrQkFBQSxHQUE0QixPQUFPLENBQUMsa0JBdEJwQyxDQUFBOztBQUFBLEVBdUJBLEtBQUEsR0FBNEIsT0FBTyxDQUFDLEtBdkJwQyxDQUFBOztBQUFBLEVBOEJBLENBQUEsR0FBNEIsT0FBQSxDQUFRLGFBQVIsQ0E5QjVCLENBQUE7O0FBQUEsRUErQkEsQ0FBQSxHQUE0QixDQUFDLENBQUMsS0FBSyxDQUFDLElBQVIsQ0FBYSxDQUFiLENBL0I1QixDQUFBOztBQUFBLEVBb0NBLGdCQUFBLEdBQTBCLENBQUUsTUFBTSxDQUFDLFlBQVAsQ0FBb0IsTUFBcEIsQ0FBRixDQUFBLEdBQWlDLENBQUUsTUFBTSxDQUFDLFlBQVAsQ0FBb0IsTUFBcEIsQ0FBRixDQXBDM0QsQ0FBQTs7QUFxQ0E7QUFBQSx3REFyQ0E7O0FBQUEsRUFzQ0EsaUJBQUEsR0FBMEIsSUFBSSxDQUFDLEdBQUwsQ0FBUyxDQUFNLElBQUEsTUFBQSxDQUFPLFFBQVAsQ0FBTixDQUF1QixDQUFDLE1BQWpDLEVBQXlDLENBQU0sSUFBQSxNQUFBLENBQU8sZ0JBQVAsQ0FBTixDQUErQixDQUFDLE1BQWhDLEdBQXlDLENBQWxGLENBdEMxQixDQUFBOztBQUFBLEVBdUNBLGdCQUFBLEdBQTBCLElBdkMxQixDQUFBOztBQUFBLEVBd0NBLGtCQUFBLEdBQTBCLElBeEMxQixDQUFBOztBQUFBLEVBeUNBLGdCQUFBLEdBQTBCLEtBekMxQixDQUFBOztBQUFBLEVBMENBLGdCQUFBLEdBQTBCLElBQUksQ0FBQyxLQUFMLENBQVcsQ0FBRSxnQkFBQSxHQUFtQixnQkFBckIsQ0FBQSxHQUEwQyxDQUFyRCxDQTFDMUIsQ0FBQTs7QUFBQSxFQTJDQSxPQUFBLEdBQThCLElBQUEsTUFBQSxDQUFPLGdCQUFQLENBM0M5QixDQUFBOztBQUFBLEVBNENBLHNCQUFBLEdBQThCLElBQUEsS0FBQSxDQUFNLGtCQUFOLENBNUM5QixDQUFBOztBQThDQTtBQUFBLGtEQTlDQTs7QUFBQSxFQStDQSxJQUFDLENBQUEsVUFBRCxHQUE4QixJQUFBLElBQUEsQ0FBSyxDQUFBLGdCQUFMLENBL0M5QixDQUFBOztBQUFBLEVBZ0RBLElBQUMsQ0FBQSxTQUFELEdBQThCLElBQUEsSUFBQSxDQUFLLENBQUEsZ0JBQUwsQ0FoRDlCLENBQUE7O0FBQUEsRUFtREEsSUFBRyxDQUFBLGFBQUEsQ0FBSCxHQUFzQixFQW5EdEIsQ0FBQTs7QUFBQSxFQXFEQSxLQUFBLEdBQXNCLElBQUcsQ0FBQSxhQUFBLENBQWtCLENBQUEsSUFBQSxDQUFyQixHQUFzQyxJQXJENUQsQ0FBQTs7QUFBQSxFQXNEQSxPQUFBLEdBQXNCLElBQUcsQ0FBQSxhQUFBLENBQWtCLENBQUEsTUFBQSxDQUFyQixHQUFzQyxHQUFHLENBQUMsV0FBSixDQUFnQixDQUFoQixDQXRENUQsQ0FBQTs7QUFBQSxFQXVEQSxRQUFBLEdBQXNCLElBQUcsQ0FBQSxhQUFBLENBQWtCLENBQUEsT0FBQSxDQUFyQixHQUFzQyxHQUFHLENBQUMsV0FBSixDQUFnQixDQUFoQixDQXZENUQsQ0FBQTs7QUFBQSxFQXdEQSxPQUFBLEdBQXNCLElBQUcsQ0FBQSxhQUFBLENBQWtCLENBQUEsTUFBQSxDQUFyQixHQUFzQyxHQUFHLENBQUMsV0FBSixDQUFnQixDQUFoQixDQXhENUQsQ0FBQTs7QUFBQSxFQTBEQSxPQUFBLEdBQXNCLElBQUcsQ0FBQSxhQUFBLENBQWtCLENBQUEsTUFBQSxDQUFyQixHQUFzQyxHQUFHLENBQUMsV0FBSixDQUFnQixDQUFoQixDQTFENUQsQ0FBQTs7QUFBQSxFQTREQSxZQUFBLEdBQXNCLElBQUcsQ0FBQSxhQUFBLENBQWtCLENBQUEsV0FBQSxDQUFyQixHQUFzQyxHQUFHLENBQUMsV0FBSixDQUFnQixDQUFoQixDQTVENUQsQ0FBQTs7QUFBQSxFQTZEQSxVQUFBLEdBQXNCLElBQUcsQ0FBQSxhQUFBLENBQWtCLENBQUEsU0FBQSxDQUFyQixHQUFzQyxHQUFHLENBQUMsV0FBSixDQUFnQixDQUFoQixDQTdENUQsQ0FBQTs7QUFBQSxFQThEQSxVQUFBLEdBQXNCLElBQUcsQ0FBQSxhQUFBLENBQWtCLENBQUEsU0FBQSxDQUFyQixHQUFzQyxHQUFHLENBQUMsV0FBSixDQUFnQixDQUFoQixDQTlENUQsQ0FBQTs7QUFBQSxFQStEQSxZQUFBLEdBQXNCLElBQUcsQ0FBQSxhQUFBLENBQWtCLENBQUEsV0FBQSxDQUFyQixHQUFzQyxHQUFHLENBQUMsV0FBSixDQUFnQixDQUFoQixDQS9ENUQsQ0FBQTs7QUFBQSxFQWdFQSxPQUFBLEdBQXNCLElBQUcsQ0FBQSxhQUFBLENBQWtCLENBQUEsTUFBQSxDQUFyQixHQUFzQyxHQUFHLENBQUMsV0FBSixDQUFnQixDQUFoQixDQWhFNUQsQ0FBQTs7QUFBQSxFQWlFQSxLQUFBLEdBQXNCLElBQUcsQ0FBQSxhQUFBLENBQWtCLENBQUEsSUFBQSxDQUFyQixHQUFzQyxJQWpFNUQsQ0FBQTs7QUFBQSxFQW9FQSxJQUFHLENBQUEsWUFBQSxDQUFILEdBQXNCLEVBcEV0QixDQUFBOztBQUFBLEVBc0VBLGtCQUFBLEdBQXNCLElBQUcsQ0FBQSxZQUFBLENBQWtCLENBQUEsVUFBQSxDQUFyQixHQUFzQyxDQXRFNUQsQ0FBQTs7QUFBQSxFQXVFQSxnQkFBQSxHQUFzQixJQUFHLENBQUEsWUFBQSxDQUFrQixDQUFBLFFBQUEsQ0FBckIsR0FBc0MsQ0F2RTVELENBQUE7O0FBQUEsRUF3RUEsY0FBQSxHQUFzQixJQUFHLENBQUEsWUFBQSxDQUFrQixDQUFBLE1BQUEsQ0FBckIsR0FBc0MsZ0JBQUEsR0FBbUIsQ0F4RS9FLENBQUE7O0FBQUEsRUEyRUEsWUFBQSxHQUFlLFNBQUUsVUFBRixHQUFBO0FBQ2IsUUFBQSxpQkFBQTs7TUFBQSxhQUFjO0tBQWQ7QUFDQSxJQUFBLElBQWUsVUFBQSxHQUFhLENBQTVCO0FBQUEsYUFBTyxJQUFQLENBQUE7S0FEQTtBQUFBLElBR0EsaUJBQUEsR0FBd0IsSUFBQSxNQUFBLENBQU8sT0FBTyxDQUFDLE1BQVIsR0FBaUIsVUFBeEIsQ0FIeEIsQ0FBQTtBQUFBLElBSUEsT0FBTyxDQUFDLElBQVIsQ0FBYSxpQkFBYixDQUpBLENBQUE7QUFBQSxJQUtBLE9BQUEsR0FBYyxpQkFMZCxDQUFBO0FBTUEsV0FBTyxJQUFQLENBUGE7RUFBQSxDQTNFZixDQUFBOztBQUFBLEVBcUZBLGdDQUFBLEdBQW1DLFNBQUEsR0FBQTtBQUNqQyxJQUFBLElBQXlDLE9BQU8sQ0FBQyxNQUFSLEdBQWlCLGdCQUExRDtBQUFBLE1BQUEsT0FBQSxHQUFjLElBQUEsTUFBQSxDQUFPLGdCQUFQLENBQWQsQ0FBQTtLQUFBO0FBQ0EsV0FBTyxJQUFQLENBRmlDO0VBQUEsQ0FyRm5DLENBQUE7O0FBQUEsRUE2RkEsY0FBQSxHQUFpQixTQUFFLEdBQUYsRUFBTyxLQUFQLEdBQUE7QUFDZixRQUFBLFVBQUE7QUFBQSxJQUFBLElBQUEsQ0FBQSxDQUFvQyxPQUFPLENBQUMsTUFBUixJQUFrQixHQUFBLEdBQU0sa0JBQTVELENBQUE7QUFBQSxZQUFNLHNCQUFOLENBQUE7S0FBQTtBQUNBLElBQUEsSUFBUSxLQUFBLEtBQVMsSUFBakI7QUFBNkIsTUFBQSxVQUFBLEdBQWEsT0FBYixDQUE3QjtLQUFBLE1BQ0ssSUFBRyxLQUFBLEtBQVMsS0FBWjtBQUF3QixNQUFBLFVBQUEsR0FBYSxRQUFiLENBQXhCO0tBQUEsTUFDQSxJQUFHLEtBQUEsS0FBUyxJQUFaO0FBQXdCLE1BQUEsVUFBQSxHQUFhLE9BQWIsQ0FBeEI7S0FBQSxNQUFBO0FBQ0EsWUFBVSxJQUFBLEtBQUEsQ0FBTSxpQ0FBQSxHQUFpQyxDQUFDLEdBQUcsQ0FBQyxPQUFKLENBQVksS0FBWixDQUFELENBQXZDLENBQVYsQ0FEQTtLQUhMO0FBQUEsSUFLQSxPQUFTLENBQUEsR0FBQSxDQUFULEdBQWlCLFVBTGpCLENBQUE7QUFNQSxXQUFPLEdBQUEsR0FBTSxrQkFBYixDQVBlO0VBQUEsQ0E3RmpCLENBQUE7O0FBQUEsRUF1R0EsYUFBQSxHQUFnQixTQUFFLE1BQUYsRUFBVSxHQUFWLEdBQUE7QUFDZCxRQUFBLGlCQUFBO0FBQUEsWUFBTyxVQUFBLEdBQWEsTUFBUSxDQUFBLEdBQUEsQ0FBNUI7QUFBQSxXQUNPLE9BRFA7QUFDcUIsUUFBQSxLQUFBLEdBQVEsSUFBUixDQURyQjtBQUNPO0FBRFAsV0FFTyxRQUZQO0FBRXFCLFFBQUEsS0FBQSxHQUFRLEtBQVIsQ0FGckI7QUFFTztBQUZQLFdBR08sT0FIUDtBQUdxQixRQUFBLEtBQUEsR0FBUSxJQUFSLENBSHJCO0FBR087QUFIUDtBQUlPLGNBQVUsSUFBQSxLQUFBLENBQU0seUJBQUEsR0FBMEIsR0FBaEMsQ0FBVixDQUpQO0FBQUEsS0FBQTtBQUtBLFdBQU8sQ0FBRSxHQUFBLEdBQU0sa0JBQVIsRUFBNEIsS0FBNUIsQ0FBUCxDQU5jO0VBQUEsQ0F2R2hCLENBQUE7O0FBQUEsRUFtSEEsWUFBQSxHQUFlLFNBQUUsR0FBRixFQUFPLE1BQVAsR0FBQTtBQUNiLFFBQUEsSUFBQTtBQUFBLElBQUEsSUFBQSxDQUFBLENBQW9DLE9BQU8sQ0FBQyxNQUFSLElBQWtCLEdBQUEsR0FBTSxnQkFBNUQsQ0FBQTtBQUFBLFlBQU0sc0JBQU4sQ0FBQTtLQUFBO0FBQ0EsSUFBQSxJQUFHLE1BQUEsR0FBUyxDQUFaO0FBQ0UsTUFBQSxJQUFBLEdBQVUsVUFBVixDQUFBO0FBQUEsTUFDQSxNQUFBLEdBQVUsQ0FBQSxNQURWLENBREY7S0FBQSxNQUFBO0FBSUUsTUFBQSxJQUFBLEdBQVUsVUFBVixDQUpGO0tBREE7QUFBQSxJQU1BLE9BQVMsQ0FBQSxHQUFBLENBQVQsR0FBaUIsSUFOakIsQ0FBQTtBQUFBLElBT0EsT0FBTyxDQUFDLGFBQVIsQ0FBc0IsTUFBdEIsRUFBOEIsR0FBQSxHQUFNLENBQXBDLENBUEEsQ0FBQTtBQVFBLElBQUEsSUFBK0IsSUFBQSxLQUFRLFVBQXZDO0FBQUEsTUFBQSxjQUFBLENBQWUsT0FBZixFQUF3QixHQUF4QixDQUFBLENBQUE7S0FSQTtBQVNBLFdBQU8sR0FBQSxHQUFNLGdCQUFiLENBVmE7RUFBQSxDQW5IZixDQUFBOztBQUFBLEVBZ0lBLGNBQUEsR0FBaUIsU0FBRSxHQUFGLEVBQU8sTUFBUCxHQUFBO0FBQ2YsSUFBQSxJQUFBLENBQUEsQ0FBb0MsT0FBTyxDQUFDLE1BQVIsSUFBa0IsR0FBQSxHQUFNLGtCQUE1RCxDQUFBO0FBQUEsWUFBTSxzQkFBTixDQUFBO0tBQUE7QUFBQSxJQUNBLE9BQVMsQ0FBQSxHQUFBLENBQVQsR0FBb0IsTUFBQSxLQUFVLENBQUEsUUFBYixHQUE0QixZQUE1QixHQUE4QyxZQUQvRCxDQUFBO0FBRUEsV0FBTyxHQUFBLEdBQU0sa0JBQWIsQ0FIZTtFQUFBLENBaElqQixDQUFBOztBQUFBLEVBc0lBLFlBQUEsR0FBZSxTQUFFLE1BQUYsRUFBVSxHQUFWLEdBQUE7QUFDYixRQUFBLElBQUE7QUFBQSxJQUFBLElBQStELE1BQVEsQ0FBQSxHQUFBLENBQVIsS0FBaUIsVUFBaEY7QUFBQSxZQUFVLElBQUEsS0FBQSxDQUFNLGlDQUFBLEdBQWtDLEdBQXhDLENBQVYsQ0FBQTtLQUFBO0FBQUEsSUFDQSxJQUFBLEdBQU8sY0FBQSxDQUFxQixJQUFBLE1BQUEsQ0FBTyxNQUFNLENBQUMsS0FBUCxDQUFhLEdBQWIsRUFBa0IsR0FBQSxHQUFNLGdCQUF4QixDQUFQLENBQXJCLEVBQXdFLENBQXhFLENBRFAsQ0FBQTtBQUVBLFdBQU8sQ0FBRSxHQUFBLEdBQU0sZ0JBQVIsRUFBMEIsQ0FBQSxDQUFHLElBQUksQ0FBQyxZQUFMLENBQWtCLENBQWxCLENBQUYsQ0FBM0IsQ0FBUCxDQUhhO0VBQUEsQ0F0SWYsQ0FBQTs7QUFBQSxFQTRJQSxZQUFBLEdBQWUsU0FBRSxNQUFGLEVBQVUsR0FBVixHQUFBO0FBQ2IsSUFBQSxJQUErRCxNQUFRLENBQUEsR0FBQSxDQUFSLEtBQWlCLFVBQWhGO0FBQUEsWUFBVSxJQUFBLEtBQUEsQ0FBTSxpQ0FBQSxHQUFrQyxHQUF4QyxDQUFWLENBQUE7S0FBQTtBQUNBLFdBQU8sQ0FBRSxHQUFBLEdBQU0sZ0JBQVIsRUFBMEIsTUFBTSxDQUFDLFlBQVAsQ0FBb0IsR0FBQSxHQUFNLENBQTFCLENBQTFCLENBQVAsQ0FGYTtFQUFBLENBNUlmLENBQUE7O0FBQUEsRUFpSkEsY0FBQSxHQUFpQixTQUFFLE1BQUYsRUFBVSxHQUFWLEdBQUE7QUFDZixRQUFBLGVBQUE7QUFBQSxTQUFvQyx1R0FBcEMsR0FBQTtBQUFBLE1BQUEsTUFBUSxDQUFBLENBQUEsQ0FBUixHQUFjLENBQUEsTUFBUyxDQUFBLENBQUEsQ0FBdkIsQ0FBQTtBQUFBLEtBQUE7QUFDQSxXQUFPLE1BQVAsQ0FGZTtFQUFBLENBakpqQixDQUFBOztBQUFBLEVBeUpBLFVBQUEsR0FBYSxTQUFFLEdBQUYsRUFBTyxJQUFQLEdBQUE7QUFDWCxRQUFBLGVBQUE7QUFBQSxJQUFBLE1BQUEsR0FBa0IsQ0FBQSxJQUFsQixDQUFBO0FBQUEsSUFDQSxPQUFTLENBQUEsR0FBQSxDQUFULEdBQWtCLE9BRGxCLENBQUE7QUFBQSxJQUVBLE9BQUEsR0FBa0IsWUFBQSxDQUFhLEdBQUEsR0FBTSxDQUFuQixFQUFzQixNQUF0QixDQUZsQixDQUFBO0FBR0EsV0FBTyxPQUFQLENBSlc7RUFBQSxDQXpKYixDQUFBOztBQUFBLEVBZ0tBLFNBQUEsR0FBWSxTQUFFLE1BQUYsRUFBVSxHQUFWLEdBQUE7QUFDVixRQUFBLHNCQUFBO0FBQUEsSUFBQSxJQUFvRCxNQUFRLENBQUEsR0FBQSxDQUFSLEtBQWlCLE9BQXJFO0FBQUEsWUFBVSxJQUFBLEtBQUEsQ0FBTSxzQkFBQSxHQUF1QixHQUE3QixDQUFWLENBQUE7S0FBQTtBQUNBLFlBQU8sSUFBQSxHQUFPLE1BQVEsQ0FBQSxHQUFBLEdBQU0sQ0FBTixDQUF0QjtBQUFBLFdBQ08sVUFEUDtBQUMwQixRQUFBLE1BQWtCLFlBQUEsQ0FBZ0IsTUFBaEIsRUFBd0IsR0FBQSxHQUFNLENBQTlCLENBQWxCLEVBQUUsWUFBRixFQUFPLGNBQVAsQ0FEMUI7QUFDTztBQURQLFdBRU8sVUFGUDtBQUUwQixRQUFBLE9BQWtCLFlBQUEsQ0FBZ0IsTUFBaEIsRUFBd0IsR0FBQSxHQUFNLENBQTlCLENBQWxCLEVBQUUsYUFBRixFQUFPLGVBQVAsQ0FGMUI7QUFFTztBQUZQO0FBR08sY0FBVSxJQUFBLEtBQUEsQ0FBTSw2QkFBQSxHQUE2QixDQUFDLElBQUksQ0FBQyxRQUFMLENBQWMsRUFBZCxDQUFELENBQTdCLEdBQStDLFlBQS9DLEdBQTJELEdBQWpFLENBQVYsQ0FIUDtBQUFBLEtBREE7QUFLQSxXQUFPLENBQUUsR0FBRixFQUFhLElBQUEsSUFBQSxDQUFLLEtBQUwsQ0FBYixDQUFQLENBTlU7RUFBQSxDQWhLWixDQUFBOztBQUFBLEVBNEtBLFVBQUEsR0FBYSxTQUFFLEdBQUYsRUFBTyxJQUFQLEdBQUE7QUFDWCxRQUFBLDJCQUFBO0FBQUEsSUFBQSxJQUFBLEdBQW9DLElBQUksQ0FBQyxPQUFMLENBQWEsT0FBYixFQUFzQixVQUF0QixDQUFwQyxDQUFBO0FBQUEsSUFDQSxJQUFBLEdBQW9DLElBQUksQ0FBQyxPQUFMLENBQWEsT0FBYixFQUFzQixVQUF0QixDQURwQyxDQUFBO0FBQUEsSUFFQSxlQUFBLEdBQW9DLGlCQUFBLEdBQW9CLElBQUksQ0FBQyxNQUF6QixHQUFrQyxDQUZ0RSxDQUFBO0FBQUEsSUFHQSxZQUFBLENBQWEsZUFBQSxHQUFrQixPQUFPLENBQUMsTUFBMUIsR0FBbUMsR0FBbkMsR0FBeUMsQ0FBdEQsQ0FIQSxDQUFBO0FBQUEsSUFJQSxPQUFTLENBQUEsR0FBQSxDQUFULEdBQW9DLE9BSnBDLENBQUE7QUFBQSxJQUtBLFVBQUEsR0FBb0MsT0FBTyxDQUFDLEtBQVIsQ0FBYyxJQUFkLEVBQW9CLEdBQUEsR0FBTSxDQUExQixDQUxwQyxDQUFBO0FBQUEsSUFNQSxPQUFTLENBQUEsR0FBQSxHQUFNLFVBQU4sR0FBbUIsQ0FBbkIsQ0FBVCxHQUFvQyxLQU5wQyxDQUFBO0FBT0EsV0FBTyxHQUFBLEdBQU0sVUFBTixHQUFtQixDQUExQixDQVJXO0VBQUEsQ0E1S2IsQ0FBQTs7QUFBQSxFQXVMQSxTQUFBLEdBQVksU0FBRSxNQUFGLEVBQVUsR0FBVixHQUFBO0FBRVYsUUFBQSxvQkFBQTtBQUFBLElBQUEsSUFBb0QsTUFBUSxDQUFBLEdBQUEsQ0FBUixLQUFpQixPQUFyRTtBQUFBLFlBQVUsSUFBQSxLQUFBLENBQU0sc0JBQUEsR0FBdUIsR0FBN0IsQ0FBVixDQUFBO0tBQUE7QUFBQSxJQUNBLFFBQUEsR0FBVyxHQURYLENBQUE7QUFFQSxXQUFBLElBQUEsR0FBQTtBQUNFLE1BQUEsUUFBQSxJQUFZLENBQUEsQ0FBWixDQUFBO0FBQ0EsTUFBQSxJQUFTLENBQUUsSUFBQSxHQUFPLE1BQVEsQ0FBQSxRQUFBLENBQWpCLENBQUEsS0FBaUMsS0FBMUM7QUFBQSxjQUFBO09BREE7QUFFQSxNQUFBLElBQXdELFlBQXhEO0FBQUEsY0FBVSxJQUFBLEtBQUEsQ0FBTSwwQkFBQSxHQUEyQixHQUFqQyxDQUFWLENBQUE7T0FIRjtJQUFBLENBRkE7QUFBQSxJQU1BLElBQUEsR0FBTyxNQUFNLENBQUMsUUFBUCxDQUFnQixPQUFoQixFQUF5QixHQUFBLEdBQU0sQ0FBL0IsRUFBa0MsUUFBbEMsQ0FOUCxDQUFBO0FBQUEsSUFPQSxJQUFBLEdBQU8sSUFBSSxDQUFDLE9BQUwsQ0FBYSxXQUFiLEVBQTBCLE1BQTFCLENBUFAsQ0FBQTtBQUFBLElBUUEsSUFBQSxHQUFPLElBQUksQ0FBQyxPQUFMLENBQWEsV0FBYixFQUEwQixNQUExQixDQVJQLENBQUE7QUFTQSxXQUFPLENBQUUsUUFBQSxHQUFXLENBQWIsRUFBZ0IsSUFBaEIsQ0FBUCxDQVhVO0VBQUEsQ0F2TFosQ0FBQTs7QUFBQSxFQXdNQSxLQUFBLEdBQVEsU0FBRSxHQUFGLEVBQU8sS0FBUCxHQUFBO0FBQ04sUUFBQSxJQUFBO0FBQUEsWUFBTyxJQUFBLEdBQU8sR0FBRyxDQUFDLE9BQUosQ0FBWSxLQUFaLENBQWQ7QUFBQSxXQUNPLE1BRFA7QUFDeUIsZUFBTyxVQUFBLENBQWUsR0FBZixFQUFvQixLQUFwQixDQUFQLENBRHpCO0FBQUEsV0FFTyxRQUZQO0FBRXlCLGVBQU8sWUFBQSxDQUFlLEdBQWYsRUFBb0IsS0FBcEIsQ0FBUCxDQUZ6QjtBQUFBLFdBR08sWUFIUDtBQUd5QixlQUFPLGNBQUEsQ0FBZSxHQUFmLEVBQW9CLEtBQXBCLENBQVAsQ0FIekI7QUFBQSxXQUlPLFFBSlA7QUFJeUIsZUFBTyxVQUFBLENBQWUsR0FBZixFQUFvQixLQUFwQixDQUFQLENBSnpCO0FBQUEsS0FBQTtBQU1BLFdBQU8sY0FBQSxDQUFnQixHQUFoQixFQUFxQixLQUFyQixDQUFQLENBUE07RUFBQSxDQXhNUixDQUFBOztBQUFBLEVBcU5BLElBQUMsQ0FBQSxNQUFELEdBQVUsU0FBRSxLQUFGLEdBQUE7QUFDUixRQUFBLG9DQUFBO0FBQUEsSUFBQSxJQUF3RCxDQUFFLElBQUEsR0FBTyxHQUFHLENBQUMsT0FBSixDQUFZLEtBQVosQ0FBVCxDQUFBLEtBQWdDLE1BQXhGO0FBQUEsWUFBVSxJQUFBLEtBQUEsQ0FBTSx5QkFBQSxHQUEwQixJQUFoQyxDQUFWLENBQUE7S0FBQTtBQUFBLElBQ0EsR0FBQSxHQUFNLENBRE4sQ0FBQTtBQUVBLFNBQUEsdUNBQUE7eUJBQUE7QUFDRSxhQUFBLElBQUEsR0FBQTtBQUNFO0FBQ0UsVUFBQSxHQUFBLEdBQU0sS0FBQSxDQUFNLEdBQU4sRUFBVyxPQUFYLENBQU4sQ0FBQTtBQUNBLGdCQUZGO1NBQUEsY0FBQTtBQUlFLFVBREksY0FDSixDQUFBO0FBQUEsVUFBQSxJQUFtQixLQUFBLEtBQVMsc0JBQTVCO0FBQUEsa0JBQU0sS0FBTixDQUFBO1dBQUE7QUFBQSxVQUNBLFlBQUEsQ0FBQSxDQURBLENBSkY7U0FERjtNQUFBLENBREY7QUFBQSxLQUZBO0FBQUEsSUFXQSxDQUFBLEdBQVEsSUFBQSxNQUFBLENBQU8sR0FBUCxDQVhSLENBQUE7QUFBQSxJQVlBLE9BQU8sQ0FBQyxJQUFSLENBQWEsQ0FBYixFQUFnQixDQUFoQixFQUFtQixDQUFuQixFQUFzQixHQUF0QixDQVpBLENBQUE7QUFBQSxJQWFBLGdDQUFBLENBQUEsQ0FiQSxDQUFBO0FBZUEsV0FBTyxDQUFQLENBaEJRO0VBQUEsQ0FyTlYsQ0FBQTs7QUFBQSxFQXdPQSxJQUFDLENBQUEsTUFBRCxHQUFVLFNBQUUsTUFBRixHQUFBO0FBQ1IsUUFBQSxzRUFBQTtBQUFBLElBQUEsQ0FBQSxHQUFZLEVBQVosQ0FBQTtBQUFBLElBQ0EsR0FBQSxHQUFZLENBRFosQ0FBQTtBQUFBLElBRUEsUUFBQSxHQUFZLE1BQU0sQ0FBQyxNQUFQLEdBQWdCLENBRjVCLENBQUE7QUFHQSxXQUFBLElBQUEsR0FBQTtBQUNFLE1BQUEsSUFBUyxHQUFBLEdBQU0sUUFBZjtBQUFBLGNBQUE7T0FBQTtBQUNBLGNBQU8sSUFBQSxHQUFPLE1BQVEsQ0FBQSxHQUFBLENBQXRCO0FBQUEsYUFDTyxPQURQO0FBQzBCLFVBQUEsTUFBa0IsU0FBQSxDQUFnQixNQUFoQixFQUF3QixHQUF4QixDQUFsQixFQUFFLFlBQUYsRUFBTyxjQUFQLENBRDFCO0FBQ087QUFEUCxhQUVPLFVBRlA7QUFFMEIsVUFBQSxPQUFrQixZQUFBLENBQWdCLE1BQWhCLEVBQXdCLEdBQXhCLENBQWxCLEVBQUUsYUFBRixFQUFPLGVBQVAsQ0FGMUI7QUFFTztBQUZQLGFBR08sWUFIUDtBQUcwQixVQUFBLE9BQWtCLENBQUUsR0FBQSxHQUFNLENBQVIsRUFBVyxDQUFBLFFBQVgsQ0FBbEIsRUFBRSxhQUFGLEVBQU8sZUFBUCxDQUgxQjtBQUdPO0FBSFAsYUFJTyxVQUpQO0FBSTBCLFVBQUEsT0FBa0IsWUFBQSxDQUFnQixNQUFoQixFQUF3QixHQUF4QixDQUFsQixFQUFFLGFBQUYsRUFBTyxlQUFQLENBSjFCO0FBSU87QUFKUCxhQUtPLFlBTFA7QUFLMEIsVUFBQSxPQUFrQixDQUFFLEdBQUEsR0FBTSxDQUFSLEVBQVcsQ0FBQSxRQUFYLENBQWxCLEVBQUUsYUFBRixFQUFPLGVBQVAsQ0FMMUI7QUFLTztBQUxQLGFBTU8sT0FOUDtBQU0wQixVQUFBLE9BQWtCLFNBQUEsQ0FBZ0IsTUFBaEIsRUFBd0IsR0FBeEIsQ0FBbEIsRUFBRSxhQUFGLEVBQU8sZUFBUCxDQU4xQjtBQU1PO0FBTlA7QUFPMEIsVUFBQSxPQUFrQixhQUFBLENBQWdCLE1BQWhCLEVBQXdCLEdBQXhCLENBQWxCLEVBQUUsYUFBRixFQUFPLGVBQVAsQ0FQMUI7QUFBQSxPQURBO0FBQUEsTUFTQSxDQUFDLENBQUMsSUFBRixDQUFPLEtBQVAsQ0FUQSxDQURGO0lBQUEsQ0FIQTtBQWVBLFdBQU8sQ0FBUCxDQWhCUTtFQUFBLENBeE9WLENBQUE7QUFBQSIsImZpbGUiOiJjb2RlYy5qcyIsInNvdXJjZVJvb3QiOiIvc291cmNlLyIsInNvdXJjZXNDb250ZW50IjpbIlxuXG5cbiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xubmpzX3BhdGggICAgICAgICAgICAgICAgICA9IHJlcXVpcmUgJ3BhdGgnXG4jIG5qc19mcyAgICAgICAgICAgICAgICAgICAgPSByZXF1aXJlICdmcydcbmpvaW4gICAgICAgICAgICAgICAgICAgICAgPSBuanNfcGF0aC5qb2luXG4jLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi5cbkNORCAgICAgICAgICAgICAgICAgICAgICAgPSByZXF1aXJlICdjbmQnXG5ycHIgICAgICAgICAgICAgICAgICAgICAgID0gQ05ELnJwclxuYmFkZ2UgICAgICAgICAgICAgICAgICAgICA9ICdIT0xMRVJJVEgvQ09ERUMnXG5sb2cgICAgICAgICAgICAgICAgICAgICAgID0gQ05ELmdldF9sb2dnZXIgJ3BsYWluJywgICAgIGJhZGdlXG5pbmZvICAgICAgICAgICAgICAgICAgICAgID0gQ05ELmdldF9sb2dnZXIgJ2luZm8nLCAgICAgIGJhZGdlXG53aGlzcGVyICAgICAgICAgICAgICAgICAgID0gQ05ELmdldF9sb2dnZXIgJ3doaXNwZXInLCAgIGJhZGdlXG5hbGVydCAgICAgICAgICAgICAgICAgICAgID0gQ05ELmdldF9sb2dnZXIgJ2FsZXJ0JywgICAgIGJhZGdlXG5kZWJ1ZyAgICAgICAgICAgICAgICAgICAgID0gQ05ELmdldF9sb2dnZXIgJ2RlYnVnJywgICAgIGJhZGdlXG53YXJuICAgICAgICAgICAgICAgICAgICAgID0gQ05ELmdldF9sb2dnZXIgJ3dhcm4nLCAgICAgIGJhZGdlXG5oZWxwICAgICAgICAgICAgICAgICAgICAgID0gQ05ELmdldF9sb2dnZXIgJ2hlbHAnLCAgICAgIGJhZGdlXG51cmdlICAgICAgICAgICAgICAgICAgICAgID0gQ05ELmdldF9sb2dnZXIgJ3VyZ2UnLCAgICAgIGJhZGdlXG5lY2hvICAgICAgICAgICAgICAgICAgICAgID0gQ05ELmVjaG8uYmluZCBDTkRcbiMuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLlxuc3VzcGVuZCAgICAgICAgICAgICAgICAgICA9IHJlcXVpcmUgJ2NvZmZlZW5vZGUtc3VzcGVuZCdcbnN0ZXAgICAgICAgICAgICAgICAgICAgICAgPSBzdXNwZW5kLnN0ZXBcbmFmdGVyICAgICAgICAgICAgICAgICAgICAgPSBzdXNwZW5kLmFmdGVyXG5ldmVudHVhbGx5ICAgICAgICAgICAgICAgID0gc3VzcGVuZC5ldmVudHVhbGx5XG5pbW1lZGlhdGVseSAgICAgICAgICAgICAgID0gc3VzcGVuZC5pbW1lZGlhdGVseVxucmVwZWF0X2ltbWVkaWF0ZWx5ICAgICAgICA9IHN1c3BlbmQucmVwZWF0X2ltbWVkaWF0ZWx5XG5ldmVyeSAgICAgICAgICAgICAgICAgICAgID0gc3VzcGVuZC5ldmVyeVxuIy4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uXG4jIEJZVEVXSVNFICAgICAgICAgICAgICAgICAgPSByZXF1aXJlICdieXRld2lzZSdcbiMgdGhyb3VnaCAgICAgICAgICAgICAgICAgICA9IHJlcXVpcmUgJ3Rocm91Z2gyJ1xuIyBMZXZlbEJhdGNoICAgICAgICAgICAgICAgID0gcmVxdWlyZSAnbGV2ZWwtYmF0Y2gtc3RyZWFtJ1xuIyBCYXRjaFN0cmVhbSAgICAgICAgICAgICAgID0gcmVxdWlyZSAnYmF0Y2gtc3RyZWFtJ1xuIyBwYXJhbGxlbCAgICAgICAgICAgICAgICAgID0gcmVxdWlyZSAnY29uY3VycmVudC13cml0YWJsZSdcbkQgICAgICAgICAgICAgICAgICAgICAgICAgPSByZXF1aXJlICdwaXBlZHJlYW1zMidcbiQgICAgICAgICAgICAgICAgICAgICAgICAgPSBELnJlbWl0LmJpbmQgRFxuIy4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uXG5cblxuIy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5sYXN0X3VuaWNvZGVfY2hyICAgICAgICA9ICggU3RyaW5nLmZyb21DaGFyQ29kZSAweGRiZmYgKSArICggU3RyaW5nLmZyb21DaGFyQ29kZSAweGRmZmYgKVxuIyMjIHNob3VsZCBhbHdheXMgYmUgMyBpbiBtb2Rlcm4gdmVyc2lvbnMgb2YgTm9kZUpTOiAjIyNcbm1heF9ieXRlc19wZXJfY2hyICAgICAgID0gTWF0aC5tYXggKCBuZXcgQnVmZmVyIFwiXFx1ZmZmZlwiICkubGVuZ3RoLCAoIG5ldyBCdWZmZXIgbGFzdF91bmljb2RlX2NociApLmxlbmd0aCAvIDJcbnJidWZmZXJfbWluX3NpemUgICAgICAgID0gMTAyNFxucmJ1ZmZlcl9kZWx0YV9zaXplICAgICAgPSAxMDI0XG5yYnVmZmVyX21heF9zaXplICAgICAgICA9IDY1NTM2XG5yYnVmZmVyX25ld19zaXplICAgICAgICA9IE1hdGguZmxvb3IgKCByYnVmZmVyX21heF9zaXplICsgcmJ1ZmZlcl9taW5fc2l6ZSApIC8gMlxucmJ1ZmZlciAgICAgICAgICAgICAgICAgPSBuZXcgQnVmZmVyIHJidWZmZXJfbWluX3NpemVcbmJ1ZmZlcl90b29fc2hvcnRfZXJyb3IgID0gbmV3IEVycm9yIFwiYnVmZmVyIHRvbyBzaG9ydFwiXG4jLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi5cbiMjIyBodHRwOi8vd3d3Lm1lcmx5bi5kZW1vbi5jby51ay9qcy1kYXRleC5odG0gIyMjXG5AZmlyc3RfZGF0ZSAgICAgICAgICAgICA9IG5ldyBEYXRlIC04NjQwMDAwMDAwMDAwMDAwXG5AbGFzdF9kYXRlICAgICAgICAgICAgICA9IG5ldyBEYXRlICs4NjQwMDAwMDAwMDAwMDAwXG5cbiMtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuQFsgJ3R5cGVtYXJrZXJzJyBdICA9IHt9XG4jLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi5cbnRtX2xvICAgICAgICAgICAgICAgPSBAWyAndHlwZW1hcmtlcnMnICBdWyAnbG8nICAgICAgICAgXSA9IDB4MDBcbnRtX251bGwgICAgICAgICAgICAgPSBAWyAndHlwZW1hcmtlcnMnICBdWyAnbnVsbCcgICAgICAgXSA9ICdCJy5jb2RlUG9pbnRBdCAwXG50bV9mYWxzZSAgICAgICAgICAgID0gQFsgJ3R5cGVtYXJrZXJzJyAgXVsgJ2ZhbHNlJyAgICAgIF0gPSAnQycuY29kZVBvaW50QXQgMFxudG1fdHJ1ZSAgICAgICAgICAgICA9IEBbICd0eXBlbWFya2VycycgIF1bICd0cnVlJyAgICAgICBdID0gJ0QnLmNvZGVQb2ludEF0IDBcbiMgdG1fZmlyc3RkYXRlICAgICAgICA9IEBbICd0eXBlbWFya2VycycgIF1bICdmaXJzdGRhdGUnICBdID0gJ0YnLmNvZGVQb2ludEF0IDBcbnRtX2RhdGUgICAgICAgICAgICAgPSBAWyAndHlwZW1hcmtlcnMnICBdWyAnZGF0ZScgICAgICAgXSA9ICdHJy5jb2RlUG9pbnRBdCAwXG4jIHRtX2xhc3RkYXRlICAgICAgICAgPSBAWyAndHlwZW1hcmtlcnMnICBdWyAnbGFzdGRhdGUnICAgXSA9ICdIJy5jb2RlUG9pbnRBdCAwXG50bV9uaW5maW5pdHkgICAgICAgID0gQFsgJ3R5cGVtYXJrZXJzJyAgXVsgJ25pbmZpbml0eScgIF0gPSAnSicuY29kZVBvaW50QXQgMFxudG1fbm51bWJlciAgICAgICAgICA9IEBbICd0eXBlbWFya2VycycgIF1bICdubnVtYmVyJyAgICBdID0gJ0snLmNvZGVQb2ludEF0IDBcbnRtX3BudW1iZXIgICAgICAgICAgPSBAWyAndHlwZW1hcmtlcnMnICBdWyAncG51bWJlcicgICAgXSA9ICdMJy5jb2RlUG9pbnRBdCAwXG50bV9waW5maW5pdHkgICAgICAgID0gQFsgJ3R5cGVtYXJrZXJzJyAgXVsgJ3BpbmZpbml0eScgIF0gPSAnTScuY29kZVBvaW50QXQgMFxudG1fdGV4dCAgICAgICAgICAgICA9IEBbICd0eXBlbWFya2VycycgIF1bICd0ZXh0JyAgICAgICBdID0gJ1QnLmNvZGVQb2ludEF0IDBcbnRtX2hpICAgICAgICAgICAgICAgPSBAWyAndHlwZW1hcmtlcnMnICBdWyAnaGknICAgICAgICAgXSA9IDB4ZmZcblxuIy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5AWyAnYnl0ZWNvdW50cycgXSAgID0ge31cbiMuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLlxuYnl0ZWNvdW50X3Npbmd1bGFyICA9IEBbICdieXRlY291bnRzJyAgIF1bICdzaW5ndWxhcicgICBdID0gMVxuYnl0ZWNvdW50X251bWJlciAgICA9IEBbICdieXRlY291bnRzJyAgIF1bICdudW1iZXInICAgICBdID0gOVxuYnl0ZWNvdW50X2RhdGUgICAgICA9IEBbICdieXRlY291bnRzJyAgIF1bICdkYXRlJyAgICAgICBdID0gYnl0ZWNvdW50X251bWJlciArIDFcblxuIy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5ncm93X3JidWZmZXIgPSAoIGRlbHRhX3NpemUgKSAtPlxuICBkZWx0YV9zaXplID89IHJidWZmZXJfZGVsdGFfc2l6ZVxuICByZXR1cm4gbnVsbCBpZiBkZWx0YV9zaXplIDwgMVxuICAjIHdhcm4gXCJncm93aW5nIHJidWZmZXIgKCN7ZGVsdGFfc2l6ZX0gYnl0ZXMpXCJcbiAgbmV3X3Jlc3VsdF9idWZmZXIgPSBuZXcgQnVmZmVyIHJidWZmZXIubGVuZ3RoICsgZGVsdGFfc2l6ZVxuICByYnVmZmVyLmNvcHkgbmV3X3Jlc3VsdF9idWZmZXJcbiAgcmJ1ZmZlciAgICAgPSBuZXdfcmVzdWx0X2J1ZmZlclxuICByZXR1cm4gbnVsbFxuXG4jLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbnJlbGVhc2VfZXh0cmFuZW91c19yYnVmZmVyX2J5dGVzID0gLT5cbiAgcmJ1ZmZlciA9IG5ldyBCdWZmZXIgcmJ1ZmZlcl9uZXdfc2l6ZSBpZiByYnVmZmVyLmxlbmd0aCA+IHJidWZmZXJfbWF4X3NpemVcbiAgcmV0dXJuIG51bGxcblxuXG4jPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiMgVkFSQUlOVFNcbiMtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxud3JpdGVfc2luZ3VsYXIgPSAoIGlkeCwgdmFsdWUgKSAtPlxuICB0aHJvdyBidWZmZXJfdG9vX3Nob3J0X2Vycm9yIHVubGVzcyByYnVmZmVyLmxlbmd0aCA+PSBpZHggKyBieXRlY291bnRfc2luZ3VsYXJcbiAgaWYgICAgICB2YWx1ZSBpcyBudWxsICAgdGhlbiB0eXBlbWFya2VyID0gdG1fbnVsbFxuICBlbHNlIGlmIHZhbHVlIGlzIGZhbHNlICB0aGVuIHR5cGVtYXJrZXIgPSB0bV9mYWxzZVxuICBlbHNlIGlmIHZhbHVlIGlzIHRydWUgICB0aGVuIHR5cGVtYXJrZXIgPSB0bV90cnVlXG4gIGVsc2UgdGhyb3cgbmV3IEVycm9yIFwidW5hYmxlIHRvIGVuY29kZSB2YWx1ZSBvZiB0eXBlICN7Q05ELnR5cGVfb2YgdmFsdWV9XCJcbiAgcmJ1ZmZlclsgaWR4IF0gPSB0eXBlbWFya2VyXG4gIHJldHVybiBpZHggKyBieXRlY291bnRfc2luZ3VsYXJcblxuIy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5yZWFkX3Npbmd1bGFyID0gKCBidWZmZXIsIGlkeCApIC0+XG4gIHN3aXRjaCB0eXBlbWFya2VyID0gYnVmZmVyWyBpZHggXVxuICAgIHdoZW4gdG1fbnVsbCAgdGhlbiB2YWx1ZSA9IG51bGxcbiAgICB3aGVuIHRtX2ZhbHNlIHRoZW4gdmFsdWUgPSBmYWxzZVxuICAgIHdoZW4gdG1fdHJ1ZSAgdGhlbiB2YWx1ZSA9IHRydWVcbiAgICBlbHNlIHRocm93IG5ldyBFcnJvciBcIm5vdCBhIHZhcmlhbnQgYXQgaW5kZXggI3tpZHh9XCJcbiAgcmV0dXJuIFsgaWR4ICsgYnl0ZWNvdW50X3Npbmd1bGFyLCB2YWx1ZSwgXVxuXG5cbiM9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuIyBOVU1CRVJTXG4jLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbndyaXRlX251bWJlciA9ICggaWR4LCBudW1iZXIgKSAtPlxuICB0aHJvdyBidWZmZXJfdG9vX3Nob3J0X2Vycm9yIHVubGVzcyByYnVmZmVyLmxlbmd0aCA+PSBpZHggKyBieXRlY291bnRfbnVtYmVyXG4gIGlmIG51bWJlciA8IDBcbiAgICB0eXBlICAgID0gdG1fbm51bWJlclxuICAgIG51bWJlciAgPSAtbnVtYmVyXG4gIGVsc2VcbiAgICB0eXBlICAgID0gdG1fcG51bWJlclxuICByYnVmZmVyWyBpZHggXSA9IHR5cGVcbiAgcmJ1ZmZlci53cml0ZURvdWJsZUJFIG51bWJlciwgaWR4ICsgMVxuICBfaW52ZXJ0X2J1ZmZlciByYnVmZmVyLCBpZHggaWYgdHlwZSBpcyB0bV9ubnVtYmVyXG4gIHJldHVybiBpZHggKyBieXRlY291bnRfbnVtYmVyXG5cbiMtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxud3JpdGVfaW5maW5pdHkgPSAoIGlkeCwgbnVtYmVyICkgLT5cbiAgdGhyb3cgYnVmZmVyX3Rvb19zaG9ydF9lcnJvciB1bmxlc3MgcmJ1ZmZlci5sZW5ndGggPj0gaWR4ICsgYnl0ZWNvdW50X3Npbmd1bGFyXG4gIHJidWZmZXJbIGlkeCBdID0gaWYgbnVtYmVyIGlzIC1JbmZpbml0eSB0aGVuIHRtX25pbmZpbml0eSBlbHNlIHRtX3BpbmZpbml0eVxuICByZXR1cm4gaWR4ICsgYnl0ZWNvdW50X3Npbmd1bGFyXG5cbiMtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxucmVhZF9ubnVtYmVyID0gKCBidWZmZXIsIGlkeCApIC0+XG4gIHRocm93IG5ldyBFcnJvciBcIm5vdCBhIG5lZ2F0aXZlIG51bWJlciBhdCBpbmRleCAje2lkeH1cIiB1bmxlc3MgYnVmZmVyWyBpZHggXSBpcyB0bV9ubnVtYmVyXG4gIGNvcHkgPSBfaW52ZXJ0X2J1ZmZlciAoIG5ldyBCdWZmZXIgYnVmZmVyLnNsaWNlIGlkeCwgaWR4ICsgYnl0ZWNvdW50X251bWJlciApLCAwXG4gIHJldHVybiBbIGlkeCArIGJ5dGVjb3VudF9udW1iZXIsIC0oIGNvcHkucmVhZERvdWJsZUJFIDEgKSwgXVxuXG4jLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbnJlYWRfcG51bWJlciA9ICggYnVmZmVyLCBpZHggKSAtPlxuICB0aHJvdyBuZXcgRXJyb3IgXCJub3QgYSBwb3NpdGl2ZSBudW1iZXIgYXQgaW5kZXggI3tpZHh9XCIgdW5sZXNzIGJ1ZmZlclsgaWR4IF0gaXMgdG1fcG51bWJlclxuICByZXR1cm4gWyBpZHggKyBieXRlY291bnRfbnVtYmVyLCBidWZmZXIucmVhZERvdWJsZUJFIGlkeCArIDEsIF1cblxuIy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5faW52ZXJ0X2J1ZmZlciA9ICggYnVmZmVyLCBpZHggKSAtPlxuICBidWZmZXJbIGkgXSA9IH5idWZmZXJbIGkgXSBmb3IgaSBpbiBbIGlkeCArIDEgLi4gaWR4ICsgOCBdXG4gIHJldHVybiBidWZmZXJcblxuXG4jPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiMgREFURVNcbiMtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxud3JpdGVfZGF0ZSA9ICggaWR4LCBkYXRlICkgLT5cbiAgbnVtYmVyICAgICAgICAgID0gK2RhdGVcbiAgcmJ1ZmZlclsgaWR4IF0gID0gdG1fZGF0ZVxuICBuZXdfaWR4ICAgICAgICAgPSB3cml0ZV9udW1iZXIgaWR4ICsgMSwgbnVtYmVyXG4gIHJldHVybiBuZXdfaWR4XG5cbiMtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxucmVhZF9kYXRlID0gKCBidWZmZXIsIGlkeCApIC0+XG4gIHRocm93IG5ldyBFcnJvciBcIm5vdCBhIGRhdGUgYXQgaW5kZXggI3tpZHh9XCIgdW5sZXNzIGJ1ZmZlclsgaWR4IF0gaXMgdG1fZGF0ZVxuICBzd2l0Y2ggdHlwZSA9IGJ1ZmZlclsgaWR4ICsgMSBdXG4gICAgd2hlbiB0bV9ubnVtYmVyICAgIHRoZW4gWyBpZHgsIHZhbHVlLCBdID0gcmVhZF9ubnVtYmVyICAgIGJ1ZmZlciwgaWR4ICsgMVxuICAgIHdoZW4gdG1fcG51bWJlciAgICB0aGVuIFsgaWR4LCB2YWx1ZSwgXSA9IHJlYWRfcG51bWJlciAgICBidWZmZXIsIGlkeCArIDFcbiAgICBlbHNlIHRocm93IG5ldyBFcnJvciBcInVua25vd24gZGF0ZSB0eXBlIG1hcmtlciAweCN7dHlwZS50b1N0cmluZyAxNn0gYXQgaW5kZXggI3tpZHh9XCJcbiAgcmV0dXJuIFsgaWR4LCAoIG5ldyBEYXRlIHZhbHVlICksIF1cblxuXG4jPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiMgVEVYVFxuIy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG53cml0ZV90ZXh0ID0gKCBpZHgsIHRleHQgKSAtPlxuICB0ZXh0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPSB0ZXh0LnJlcGxhY2UgL1xceDAxL2csICdcXHgwMVxceDAyJ1xuICB0ZXh0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPSB0ZXh0LnJlcGxhY2UgL1xceDAwL2csICdcXHgwMVxceDAxJ1xuICBsZW5ndGhfZXN0aW1hdGUgICAgICAgICAgICAgICAgICAgPSBtYXhfYnl0ZXNfcGVyX2NociAqIHRleHQubGVuZ3RoICsgM1xuICBncm93X3JidWZmZXIgbGVuZ3RoX2VzdGltYXRlIC0gcmJ1ZmZlci5sZW5ndGggLSBpZHggLSAxXG4gIHJidWZmZXJbIGlkeCAgICAgICAgICAgICAgICAgICAgXSA9IHRtX3RleHRcbiAgYnl0ZV9jb3VudCAgICAgICAgICAgICAgICAgICAgICAgID0gcmJ1ZmZlci53cml0ZSB0ZXh0LCBpZHggKyAxXG4gIHJidWZmZXJbIGlkeCArIGJ5dGVfY291bnQgKyAxICAgXSA9IHRtX2xvXG4gIHJldHVybiBpZHggKyBieXRlX2NvdW50ICsgMlxuXG4jLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbnJlYWRfdGV4dCA9ICggYnVmZmVyLCBpZHggKSAtPlxuICAjIHVyZ2UgJ8KpSjJkNlInLCBidWZmZXJbIGlkeCBdLCBidWZmZXJbIGlkeCBdIGlzIHRtX3RleHRcbiAgdGhyb3cgbmV3IEVycm9yIFwibm90IGEgdGV4dCBhdCBpbmRleCAje2lkeH1cIiB1bmxlc3MgYnVmZmVyWyBpZHggXSBpcyB0bV90ZXh0XG4gIHN0b3BfaWR4ID0gaWR4XG4gIGxvb3BcbiAgICBzdG9wX2lkeCArPSArMVxuICAgIGJyZWFrIGlmICggYnl0ZSA9IGJ1ZmZlclsgc3RvcF9pZHggXSApIGlzIHRtX2xvXG4gICAgdGhyb3cgbmV3IEVycm9yIFwicnVuYXdheSBzdHJpbmcgYXQgaW5kZXggI3tpZHh9XCIgdW5sZXNzIGJ5dGU/XG4gIHRleHQgPSBidWZmZXIudG9TdHJpbmcgJ3V0Zi04JywgaWR4ICsgMSwgc3RvcF9pZHhcbiAgdGV4dCA9IHRleHQucmVwbGFjZSAvXFx4MDFcXHgwMi9nLCAnXFx4MDEnXG4gIHRleHQgPSB0ZXh0LnJlcGxhY2UgL1xceDAxXFx4MDEvZywgJ1xceDAwJ1xuICByZXR1cm4gWyBzdG9wX2lkeCArIDEsIHRleHQsIF1cblxuXG4jPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiNcbiMtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxud3JpdGUgPSAoIGlkeCwgdmFsdWUgKSAtPlxuICBzd2l0Y2ggdHlwZSA9IENORC50eXBlX29mIHZhbHVlXG4gICAgd2hlbiAndGV4dCcgICAgICAgdGhlbiByZXR1cm4gd3JpdGVfdGV4dCAgICAgaWR4LCB2YWx1ZVxuICAgIHdoZW4gJ251bWJlcicgICAgIHRoZW4gcmV0dXJuIHdyaXRlX251bWJlciAgIGlkeCwgdmFsdWVcbiAgICB3aGVuICdqc2luZmluaXR5JyB0aGVuIHJldHVybiB3cml0ZV9pbmZpbml0eSBpZHgsIHZhbHVlXG4gICAgd2hlbiAnanNkYXRlJyAgICAgdGhlbiByZXR1cm4gd3JpdGVfZGF0ZSAgICAgaWR4LCB2YWx1ZVxuICAjLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uXG4gIHJldHVybiB3cml0ZV9zaW5ndWxhciAgaWR4LCB2YWx1ZVxuXG5cbiM9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuI1xuIy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5AZW5jb2RlID0gKCB2YWx1ZSApIC0+XG4gIHRocm93IG5ldyBFcnJvciBcImV4cGVjdGVkIGEgbGlzdCwgZ290IGEgI3t0eXBlfVwiIHVubGVzcyAoIHR5cGUgPSBDTkQudHlwZV9vZiB2YWx1ZSApIGlzICdsaXN0J1xuICBpZHggPSAwXG4gIGZvciBlbGVtZW50IGluIHZhbHVlXG4gICAgbG9vcFxuICAgICAgdHJ5XG4gICAgICAgIGlkeCA9IHdyaXRlIGlkeCwgZWxlbWVudFxuICAgICAgICBicmVha1xuICAgICAgY2F0Y2ggZXJyb3JcbiAgICAgICAgdGhyb3cgZXJyb3IgdW5sZXNzIGVycm9yIGlzIGJ1ZmZlcl90b29fc2hvcnRfZXJyb3JcbiAgICAgICAgZ3Jvd19yYnVmZmVyKClcbiAgIy4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLlxuICBSID0gbmV3IEJ1ZmZlciBpZHhcbiAgcmJ1ZmZlci5jb3B5IFIsIDAsIDAsIGlkeFxuICByZWxlYXNlX2V4dHJhbmVvdXNfcmJ1ZmZlcl9ieXRlcygpXG4gICMuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi5cbiAgcmV0dXJuIFJcblxuIy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5AZGVjb2RlID0gKCBidWZmZXIgKSAtPlxuICBSICAgICAgICAgPSBbXVxuICBpZHggICAgICAgPSAwXG4gIGxhc3RfaWR4ICA9IGJ1ZmZlci5sZW5ndGggLSAxXG4gIGxvb3BcbiAgICBicmVhayBpZiBpZHggPiBsYXN0X2lkeFxuICAgIHN3aXRjaCB0eXBlID0gYnVmZmVyWyBpZHggXVxuICAgICAgd2hlbiB0bV90ZXh0ICAgICAgIHRoZW4gWyBpZHgsIHZhbHVlLCBdID0gcmVhZF90ZXh0ICAgICAgIGJ1ZmZlciwgaWR4XG4gICAgICB3aGVuIHRtX25udW1iZXIgICAgdGhlbiBbIGlkeCwgdmFsdWUsIF0gPSByZWFkX25udW1iZXIgICAgYnVmZmVyLCBpZHhcbiAgICAgIHdoZW4gdG1fbmluZmluaXR5ICB0aGVuIFsgaWR4LCB2YWx1ZSwgXSA9IFsgaWR4ICsgMSwgLUluZmluaXR5LCBdXG4gICAgICB3aGVuIHRtX3BudW1iZXIgICAgdGhlbiBbIGlkeCwgdmFsdWUsIF0gPSByZWFkX3BudW1iZXIgICAgYnVmZmVyLCBpZHhcbiAgICAgIHdoZW4gdG1fcGluZmluaXR5ICB0aGVuIFsgaWR4LCB2YWx1ZSwgXSA9IFsgaWR4ICsgMSwgK0luZmluaXR5LCBdXG4gICAgICB3aGVuIHRtX2RhdGUgICAgICAgdGhlbiBbIGlkeCwgdmFsdWUsIF0gPSByZWFkX2RhdGUgICAgICAgYnVmZmVyLCBpZHhcbiAgICAgIGVsc2UgICAgICAgICAgICAgICAgICAgIFsgaWR4LCB2YWx1ZSwgXSA9IHJlYWRfc2luZ3VsYXIgICBidWZmZXIsIGlkeFxuICAgIFIucHVzaCB2YWx1ZVxuICAjLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uXG4gIHJldHVybiBSXG5cblxuXG5cblxuXG5cblxuIl19
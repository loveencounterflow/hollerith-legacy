(function() {
  var $, CND, D, after, alert, b, badge, buffer_delta_size, buffer_max_size, buffer_min_size, buffer_new_size, buffer_too_short_error, c, debug, echo, eventually, every, help, idx, immediately, info, join, last_unicode_chr, log, max_bytes_per_chr, njs_path, repeat_immediately, result_buffer, rpr, sorter, step, suspend, text, text_buffer, urge, warn, whisper;

  njs_path = require('path');

  join = njs_path.join;

  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'HOLLERITH/test';

  log = CND.get_logger('plain', badge);

  info = CND.get_logger('info', badge);

  whisper = CND.get_logger('whisper', badge);

  alert = CND.get_logger('alert', badge);

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  echo = CND.echo.bind(CND);

  suspend = require('coffeenode-suspend');

  step = suspend.step;

  after = suspend.after;

  eventually = suspend.eventually;

  immediately = suspend.immediately;

  repeat_immediately = suspend.repeat_immediately;

  every = suspend.every;

  D = require('pipedreams2');

  $ = D.remit.bind(D);

  sorter = function(a, b) {
    return a.compare(b);
  };

  last_unicode_chr = (String.fromCharCode(0xdbff)) + (String.fromCharCode(0xdfff));


  /* should always be 3 in modern versions of NodeJS: */

  max_bytes_per_chr = Math.max((new Buffer("\uffff")).length, (new Buffer(last_unicode_chr)).length / 2);

  buffer_min_size = 1024;

  buffer_delta_size = 1024;

  buffer_max_size = 65536;

  buffer_new_size = Math.floor((buffer_max_size + buffer_min_size) / 2);

  text_buffer = new Buffer(buffer_min_size);

  result_buffer = new Buffer(buffer_min_size);

  this.type_x = 0xc0;

  this.type_x = 0xc1;

  this.type_x = 0xf5;

  this.type_x = 0xf6;

  this.type_x = 0xf7;

  this.type_x = 0xf8;

  this.type_x = 0xf9;

  this.type_ninfinity = 0xfa;

  this.type_nnumber = 0xfb;

  this.type_pnumber = 0xfc;

  this.type_pinfinity = 0xfd;

  this.type_text = 0xfe;

  this.type_last = 0xff;

  this.bytecount_number = 9;

  buffer_too_short_error = new Error("buffer too short");

  this.resize_result_buffer = function() {
    var new_result_buffer;
    new_result_buffer = new Buffer(result_buffer.length + buffer_delta_size);
    result_buffer.copy(new_result_buffer);
    result_buffer = new_result_buffer;
    return null;
  };

  this.release_result_buffer = function() {
    if (result_buffer.length > buffer_max_size) {
      result_buffer = new Buffer(buffer_new_size);
    }
    return null;
  };

  this.write_number = function(buffer, idx, number) {
    var type;
    if (!(buffer.length >= idx + this.bytecount_number)) {
      throw buffer_too_short_error;
    }
    if (number < 0) {
      type = this.type_nnumber;
      number = -number;
    } else {
      type = this.type_pnumber;
    }
    buffer[idx] = type;
    buffer.writeDoubleBE(number, idx + 1);
    if (type === this.type_nnumber) {
      this._invert_buffer(buffer, idx);
    }
    return idx + this.bytecount_number;
  };

  this.read_nnumber = function(buffer, idx) {
    var copy;
    if (buffer[idx] !== this.type_nnumber) {
      throw new Error("not a negative number at index " + idx);
    }
    copy = this._invert_buffer(new Buffer(buffer.slice(idx, idx + this.bytecount_number)), 0);
    return [idx + this.bytecount_number, -(copy.readDoubleBE(1))];
  };

  this.read_pnumber = function(buffer, idx) {
    if (buffer[idx] !== this.type_pnumber) {
      throw new Error("not a positive number at index " + idx);
    }
    return [idx + this.bytecount_number, buffer.readDoubleBE(idx + 1)];
  };

  this._invert_buffer = function(buffer, idx) {
    var i, j, ref, ref1;
    for (i = j = ref = idx + 1, ref1 = idx + 8; ref <= ref1 ? j <= ref1 : j >= ref1; i = ref <= ref1 ? ++j : --j) {
      buffer[i] = ~buffer[i];
    }
    return buffer;
  };

  this.write_text = function(buffer, idx, text) {
    var byte_count, length_estimate;
    length_estimate = max_bytes_per_chr * text.length;
    if (length_estimate > text_buffer.length) {
      text_buffer = new Buffer(length_estimate);
    }
    byte_count = text_buffer.write(text, 'utf-8');

    /* TAINT estimate incorrect */
    if (!(buffer.length >= idx + byte_count)) {
      throw buffer_too_short_error;
    }
    buffer[idx] = this.type_text;
    buffer[idx + byte_count + 1] = this.type_last;
    text_buffer.copy(buffer, idx + 1, 0, byte_count);

    /* Reduce intermediary buffer size in case it exceeds limits: */
    if (text_buffer.length > buffer_max_size) {
      text_buffer = new Buffer(buffer_new_size);
    }
    return idx + byte_count + 2;
  };

  this.read_text = function(buffer, idx) {
    var byte, stop_idx, text;
    urge('©J2d6R', buffer[idx], buffer[idx] === this.type_text);
    if (buffer[idx] !== this.type_text) {
      throw new Error("not a text at index " + idx);
    }
    stop_idx = idx + 1;
    while (true) {
      stop_idx += +1;
      if ((byte = buffer[stop_idx]) === this.type_last) {
        break;
      }
      if (byte == null) {
        throw new Error("runaway string at index " + idx);
      }
    }
    text = buffer.toString('utf-8', idx + 1, stop_idx);
    return [stop_idx + 1, text];
  };

  this.write = function(buffer, idx, value) {
    var type;
    switch (type = CND.type_of(value)) {
      case 'infinity':
        throw new Error("not implemented");
        break;
      case 'text':
        return this.write_text(buffer, idx, value);
      case 'number':
        return this.write_number(buffer, idx, value);
    }
    throw new Error("unable to encode value of type " + type);
  };

  this.encode = function(value) {
    var R, element, error, idx, j, len, type;
    if ((type = CND.type_of(value)) !== 'list') {
      throw new Error("expected a list, got a " + type);
    }
    idx = 0;
    for (j = 0, len = value.length; j < len; j++) {
      element = value[j];
      while (true) {
        try {
          idx = this.write(result_buffer, idx, element);
          break;
        } catch (_error) {
          error = _error;
          if (error !== buffer_too_short_error) {
            throw error;
          }
          this.resize_result_buffer();
        }
      }
    }
    R = new Buffer(idx);
    result_buffer.copy(R, 0, 0, idx);
    this.release_result_buffer();
    return R;
  };

  this.decode = function(buffer) {
    var R, idx, last_idx, ref, ref1, ref2, type, value;
    R = [];
    idx = 0;
    last_idx = buffer.length - 1;
    while (true) {
      if (idx >= last_idx) {
        break;
      }
      switch (type = buffer[idx]) {
        case this.type_text:
          ref = this.read_text(buffer, idx), idx = ref[0], value = ref[1];
          break;
        case this.type_nnumber:
          ref1 = this.read_nnumber(buffer, idx), idx = ref1[0], value = ref1[1];
          break;
        case this.type_pnumber:
          ref2 = this.read_pnumber(buffer, idx), idx = ref2[0], value = ref2[1];
          break;
        default:
          throw new Error("unknown type marker 0x" + (type.toString(16)) + " at index " + idx);
      }
      R.push(value);
    }
    return R;
  };

  this.f = function() {
    var buffer, buffers, j, k, len, n, results;
    buffers = [];
    for (n = j = -10; j <= 10; n = ++j) {
      buffer = new Buffer(9);
      this.write_number(buffer, n / 2, 0);
      buffers.push(buffer);
    }
    buffers.sort(sorter);
    results = [];
    for (k = 0, len = buffers.length; k < len; k++) {
      buffer = buffers[k];
      results.push(debug('©eQulN', buffer, this.read_number(buffer, 0)));
    }
    return results;
  };

  if (module.parent == null) {
    b = new Buffer(30);
    text = 'abcde';
    idx = 0;
    debug('©aKjBW', idx = this.write_text(b, idx, text));
    debug('©aKjBW', idx = this.write_number(b, idx, -1234));
    debug('©aKjBW', idx = this.write_text(b, idx, 'XXXX'));
    help('©w1rDL', b);
    debug('©c7dYA', rpr(this.read_text(b, 0)));
    debug('©c7dYA', rpr(this.read_text(b, idx - 6)));
    c = b.slice(0, idx);
    debug('©c7dYA', this.decode(c));
    debug('©yG4FD', new Buffer("\uffff"));
    debug('©yG4FD', this.encode(['foo']));
    debug('©yG4FD', this.encode(['foo', 1234]));
    debug('©yG4FD', this.encode(['foo', 1234, 'foo']));
    debug('©yG4FD', this.decode(this.encode(['foo'])));
    debug('©yG4FD', this.decode(this.encode(['foo', 1234])));
    debug('©yG4FD', this.decode(this.encode(['foo', 1234, 'foo'])));
  }

}).call(this);

//# sourceMappingURL=data:application/json;base64,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SUFBQyxDQUFBLE1BQUQsQ0FBUSxDQUFFLEtBQUYsRUFBUyxJQUFULENBQVIsQ0FBaEIsQ0FyQkEsQ0FBQTtBQUFBLElBc0JBLEtBQUEsQ0FBTSxRQUFOLEVBQWdCLElBQUMsQ0FBQSxNQUFELENBQVEsQ0FBRSxLQUFGLEVBQVMsSUFBVCxFQUFlLEtBQWYsQ0FBUixDQUFoQixDQXRCQSxDQUFBO0FBQUEsSUF1QkEsS0FBQSxDQUFNLFFBQU4sRUFBZ0IsSUFBQyxDQUFBLE1BQUQsQ0FBUSxJQUFDLENBQUEsTUFBRCxDQUFRLENBQUUsS0FBRixDQUFSLENBQVIsQ0FBaEIsQ0F2QkEsQ0FBQTtBQUFBLElBd0JBLEtBQUEsQ0FBTSxRQUFOLEVBQWdCLElBQUMsQ0FBQSxNQUFELENBQVEsSUFBQyxDQUFBLE1BQUQsQ0FBUSxDQUFFLEtBQUYsRUFBUyxJQUFULENBQVIsQ0FBUixDQUFoQixDQXhCQSxDQUFBO0FBQUEsSUF5QkEsS0FBQSxDQUFNLFFBQU4sRUFBZ0IsSUFBQyxDQUFBLE1BQUQsQ0FBUSxJQUFDLENBQUEsTUFBRCxDQUFRLENBQUUsS0FBRixFQUFTLElBQVQsRUFBZSxLQUFmLENBQVIsQ0FBUixDQUFoQixDQXpCQSxDQVJGO0dBL01BO0FBQUEiLCJmaWxlIjoiY29kZWMuanMiLCJzb3VyY2VSb290IjoiL3NvdXJjZS8iLCJzb3VyY2VzQ29udGVudCI6WyJcblxuXG4jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcbm5qc19wYXRoICAgICAgICAgICAgICAgICAgPSByZXF1aXJlICdwYXRoJ1xuIyBuanNfZnMgICAgICAgICAgICAgICAgICAgID0gcmVxdWlyZSAnZnMnXG5qb2luICAgICAgICAgICAgICAgICAgICAgID0gbmpzX3BhdGguam9pblxuIy4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uXG5DTkQgICAgICAgICAgICAgICAgICAgICAgID0gcmVxdWlyZSAnY25kJ1xucnByICAgICAgICAgICAgICAgICAgICAgICA9IENORC5ycHJcbmJhZGdlICAgICAgICAgICAgICAgICAgICAgPSAnSE9MTEVSSVRIL3Rlc3QnXG5sb2cgICAgICAgICAgICAgICAgICAgICAgID0gQ05ELmdldF9sb2dnZXIgJ3BsYWluJywgICAgIGJhZGdlXG5pbmZvICAgICAgICAgICAgICAgICAgICAgID0gQ05ELmdldF9sb2dnZXIgJ2luZm8nLCAgICAgIGJhZGdlXG53aGlzcGVyICAgICAgICAgICAgICAgICAgID0gQ05ELmdldF9sb2dnZXIgJ3doaXNwZXInLCAgIGJhZGdlXG5hbGVydCAgICAgICAgICAgICAgICAgICAgID0gQ05ELmdldF9sb2dnZXIgJ2FsZXJ0JywgICAgIGJhZGdlXG5kZWJ1ZyAgICAgICAgICAgICAgICAgICAgID0gQ05ELmdldF9sb2dnZXIgJ2RlYnVnJywgICAgIGJhZGdlXG53YXJuICAgICAgICAgICAgICAgICAgICAgID0gQ05ELmdldF9sb2dnZXIgJ3dhcm4nLCAgICAgIGJhZGdlXG5oZWxwICAgICAgICAgICAgICAgICAgICAgID0gQ05ELmdldF9sb2dnZXIgJ2hlbHAnLCAgICAgIGJhZGdlXG51cmdlICAgICAgICAgICAgICAgICAgICAgID0gQ05ELmdldF9sb2dnZXIgJ3VyZ2UnLCAgICAgIGJhZGdlXG5lY2hvICAgICAgICAgICAgICAgICAgICAgID0gQ05ELmVjaG8uYmluZCBDTkRcbiMuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLlxuc3VzcGVuZCAgICAgICAgICAgICAgICAgICA9IHJlcXVpcmUgJ2NvZmZlZW5vZGUtc3VzcGVuZCdcbnN0ZXAgICAgICAgICAgICAgICAgICAgICAgPSBzdXNwZW5kLnN0ZXBcbmFmdGVyICAgICAgICAgICAgICAgICAgICAgPSBzdXNwZW5kLmFmdGVyXG5ldmVudHVhbGx5ICAgICAgICAgICAgICAgID0gc3VzcGVuZC5ldmVudHVhbGx5XG5pbW1lZGlhdGVseSAgICAgICAgICAgICAgID0gc3VzcGVuZC5pbW1lZGlhdGVseVxucmVwZWF0X2ltbWVkaWF0ZWx5ICAgICAgICA9IHN1c3BlbmQucmVwZWF0X2ltbWVkaWF0ZWx5XG5ldmVyeSAgICAgICAgICAgICAgICAgICAgID0gc3VzcGVuZC5ldmVyeVxuIy4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uXG4jIEJZVEVXSVNFICAgICAgICAgICAgICAgICAgPSByZXF1aXJlICdieXRld2lzZSdcbiMgdGhyb3VnaCAgICAgICAgICAgICAgICAgICA9IHJlcXVpcmUgJ3Rocm91Z2gyJ1xuIyBMZXZlbEJhdGNoICAgICAgICAgICAgICAgID0gcmVxdWlyZSAnbGV2ZWwtYmF0Y2gtc3RyZWFtJ1xuIyBCYXRjaFN0cmVhbSAgICAgICAgICAgICAgID0gcmVxdWlyZSAnYmF0Y2gtc3RyZWFtJ1xuIyBwYXJhbGxlbCAgICAgICAgICAgICAgICAgID0gcmVxdWlyZSAnY29uY3VycmVudC13cml0YWJsZSdcbkQgICAgICAgICAgICAgICAgICAgICAgICAgPSByZXF1aXJlICdwaXBlZHJlYW1zMidcbiQgICAgICAgICAgICAgICAgICAgICAgICAgPSBELnJlbWl0LmJpbmQgRFxuIy4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uXG5cblxuIy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5zb3J0ZXIgICAgICAgICAgICA9ICggYSwgYiApIC0+IGEuY29tcGFyZSBiXG5sYXN0X3VuaWNvZGVfY2hyICA9ICggU3RyaW5nLmZyb21DaGFyQ29kZSAweGRiZmYgKSArICggU3RyaW5nLmZyb21DaGFyQ29kZSAweGRmZmYgKVxuIyMjIHNob3VsZCBhbHdheXMgYmUgMyBpbiBtb2Rlcm4gdmVyc2lvbnMgb2YgTm9kZUpTOiAjIyNcbm1heF9ieXRlc19wZXJfY2hyID0gTWF0aC5tYXggKCBuZXcgQnVmZmVyIFwiXFx1ZmZmZlwiICkubGVuZ3RoLCAoIG5ldyBCdWZmZXIgbGFzdF91bmljb2RlX2NociApLmxlbmd0aCAvIDJcbmJ1ZmZlcl9taW5fc2l6ZSAgID0gMTAyNFxuYnVmZmVyX2RlbHRhX3NpemUgPSAxMDI0XG5idWZmZXJfbWF4X3NpemUgICA9IDY1NTM2XG5idWZmZXJfbmV3X3NpemUgICA9IE1hdGguZmxvb3IgKCBidWZmZXJfbWF4X3NpemUgKyBidWZmZXJfbWluX3NpemUgKSAvIDJcbnRleHRfYnVmZmVyICAgICAgID0gbmV3IEJ1ZmZlciBidWZmZXJfbWluX3NpemVcbnJlc3VsdF9idWZmZXIgICAgID0gbmV3IEJ1ZmZlciBidWZmZXJfbWluX3NpemVcblxuIy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5AdHlwZV94ICAgICAgICAgICA9IDB4YzBcbkB0eXBlX3ggICAgICAgICAgID0gMHhjMVxuQHR5cGVfeCAgICAgICAgICAgPSAweGY1XG5AdHlwZV94ICAgICAgICAgICA9IDB4ZjZcbkB0eXBlX3ggICAgICAgICAgID0gMHhmN1xuQHR5cGVfeCAgICAgICAgICAgPSAweGY4XG5AdHlwZV94ICAgICAgICAgICA9IDB4ZjlcbkB0eXBlX25pbmZpbml0eSAgID0gMHhmYVxuQHR5cGVfbm51bWJlciAgICAgPSAweGZiXG5AdHlwZV9wbnVtYmVyICAgICA9IDB4ZmNcbkB0eXBlX3BpbmZpbml0eSAgID0gMHhmZFxuQHR5cGVfdGV4dCAgICAgICAgPSAweGZlXG5AdHlwZV9sYXN0ICAgICAgICA9IDB4ZmZcblxuIy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5AYnl0ZWNvdW50X251bWJlciA9IDlcblxuIy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5idWZmZXJfdG9vX3Nob3J0X2Vycm9yID0gbmV3IEVycm9yIFwiYnVmZmVyIHRvbyBzaG9ydFwiXG5cbiMtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuQHJlc2l6ZV9yZXN1bHRfYnVmZmVyID0gLT5cbiAgbmV3X3Jlc3VsdF9idWZmZXIgPSBuZXcgQnVmZmVyIHJlc3VsdF9idWZmZXIubGVuZ3RoICsgYnVmZmVyX2RlbHRhX3NpemVcbiAgcmVzdWx0X2J1ZmZlci5jb3B5IG5ld19yZXN1bHRfYnVmZmVyXG4gIHJlc3VsdF9idWZmZXIgICAgID0gbmV3X3Jlc3VsdF9idWZmZXJcbiAgcmV0dXJuIG51bGxcblxuIy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5AcmVsZWFzZV9yZXN1bHRfYnVmZmVyID0gLT5cbiAgcmVzdWx0X2J1ZmZlciA9IG5ldyBCdWZmZXIgYnVmZmVyX25ld19zaXplIGlmIHJlc3VsdF9idWZmZXIubGVuZ3RoID4gYnVmZmVyX21heF9zaXplXG4gIHJldHVybiBudWxsXG5cblxuIz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4jIE5VTUJFUlNcbiMtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuQHdyaXRlX251bWJlciA9ICggYnVmZmVyLCBpZHgsIG51bWJlciApIC0+XG4gIHRocm93IGJ1ZmZlcl90b29fc2hvcnRfZXJyb3IgdW5sZXNzIGJ1ZmZlci5sZW5ndGggPj0gaWR4ICsgQGJ5dGVjb3VudF9udW1iZXJcbiAgaWYgbnVtYmVyIDwgMFxuICAgIHR5cGUgICAgPSBAdHlwZV9ubnVtYmVyXG4gICAgbnVtYmVyICA9IC1udW1iZXJcbiAgZWxzZVxuICAgIHR5cGUgICAgPSBAdHlwZV9wbnVtYmVyXG4gIGJ1ZmZlclsgaWR4IF0gPSB0eXBlXG4gIGJ1ZmZlci53cml0ZURvdWJsZUJFIG51bWJlciwgaWR4ICsgMVxuICBAX2ludmVydF9idWZmZXIgYnVmZmVyLCBpZHggaWYgdHlwZSBpcyBAdHlwZV9ubnVtYmVyXG4gIHJldHVybiBpZHggKyBAYnl0ZWNvdW50X251bWJlclxuXG4jLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbkByZWFkX25udW1iZXIgPSAoIGJ1ZmZlciwgaWR4ICkgLT5cbiAgdGhyb3cgbmV3IEVycm9yIFwibm90IGEgbmVnYXRpdmUgbnVtYmVyIGF0IGluZGV4ICN7aWR4fVwiIHVubGVzcyBidWZmZXJbIGlkeCBdIGlzIEB0eXBlX25udW1iZXJcbiAgY29weSA9IEBfaW52ZXJ0X2J1ZmZlciAoIG5ldyBCdWZmZXIgYnVmZmVyLnNsaWNlIGlkeCwgaWR4ICsgQGJ5dGVjb3VudF9udW1iZXIgKSwgMFxuICByZXR1cm4gWyBpZHggKyBAYnl0ZWNvdW50X251bWJlciwgLSggY29weS5yZWFkRG91YmxlQkUgMSApLCBdXG5cbiMtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuQHJlYWRfcG51bWJlciA9ICggYnVmZmVyLCBpZHggKSAtPlxuICB0aHJvdyBuZXcgRXJyb3IgXCJub3QgYSBwb3NpdGl2ZSBudW1iZXIgYXQgaW5kZXggI3tpZHh9XCIgdW5sZXNzIGJ1ZmZlclsgaWR4IF0gaXMgQHR5cGVfcG51bWJlclxuICByZXR1cm4gWyBpZHggKyBAYnl0ZWNvdW50X251bWJlciwgYnVmZmVyLnJlYWREb3VibGVCRSBpZHggKyAxLCBdXG5cbiMtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuQF9pbnZlcnRfYnVmZmVyID0gKCBidWZmZXIsIGlkeCApIC0+XG4gIGJ1ZmZlclsgaSBdID0gfmJ1ZmZlclsgaSBdIGZvciBpIGluIFsgaWR4ICsgMSAuLiBpZHggKyA4IF1cbiAgcmV0dXJuIGJ1ZmZlclxuXG5cbiM9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuIyBURVhUXG4jLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbkB3cml0ZV90ZXh0ID0gKCBidWZmZXIsIGlkeCwgdGV4dCApIC0+XG4gIGxlbmd0aF9lc3RpbWF0ZSA9IG1heF9ieXRlc19wZXJfY2hyICogdGV4dC5sZW5ndGhcbiAgaWYgbGVuZ3RoX2VzdGltYXRlID4gdGV4dF9idWZmZXIubGVuZ3RoXG4gICAgdGV4dF9idWZmZXIgPSBuZXcgQnVmZmVyIGxlbmd0aF9lc3RpbWF0ZVxuICBieXRlX2NvdW50ID0gdGV4dF9idWZmZXIud3JpdGUgdGV4dCwgJ3V0Zi04J1xuICAjIyMgVEFJTlQgZXN0aW1hdGUgaW5jb3JyZWN0ICMjI1xuICB0aHJvdyBidWZmZXJfdG9vX3Nob3J0X2Vycm9yIHVubGVzcyBidWZmZXIubGVuZ3RoID49IGlkeCArIGJ5dGVfY291bnRcbiAgYnVmZmVyWyBpZHggICAgICAgICAgICAgICAgICAgXSA9IEB0eXBlX3RleHRcbiAgYnVmZmVyWyBpZHggKyBieXRlX2NvdW50ICsgMSAgXSA9IEB0eXBlX2xhc3RcbiAgdGV4dF9idWZmZXIuY29weSBidWZmZXIsIGlkeCArIDEsIDAsIGJ5dGVfY291bnRcbiAgIyMjIFJlZHVjZSBpbnRlcm1lZGlhcnkgYnVmZmVyIHNpemUgaW4gY2FzZSBpdCBleGNlZWRzIGxpbWl0czogIyMjXG4gIHRleHRfYnVmZmVyID0gbmV3IEJ1ZmZlciBidWZmZXJfbmV3X3NpemUgaWYgdGV4dF9idWZmZXIubGVuZ3RoID4gYnVmZmVyX21heF9zaXplXG4gIHJldHVybiBpZHggKyBieXRlX2NvdW50ICsgMlxuXG4jLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbkByZWFkX3RleHQgPSAoIGJ1ZmZlciwgaWR4ICkgLT5cbiAgdXJnZSAnwqlKMmQ2UicsIGJ1ZmZlclsgaWR4IF0sIGJ1ZmZlclsgaWR4IF0gaXMgQHR5cGVfdGV4dFxuICB0aHJvdyBuZXcgRXJyb3IgXCJub3QgYSB0ZXh0IGF0IGluZGV4ICN7aWR4fVwiIHVubGVzcyBidWZmZXJbIGlkeCBdIGlzIEB0eXBlX3RleHRcbiAgc3RvcF9pZHggPSBpZHggKyAxXG4gIGxvb3BcbiAgICBzdG9wX2lkeCArPSArMVxuICAgIGJyZWFrIGlmICggYnl0ZSA9IGJ1ZmZlclsgc3RvcF9pZHggXSApIGlzIEB0eXBlX2xhc3RcbiAgICB0aHJvdyBuZXcgRXJyb3IgXCJydW5hd2F5IHN0cmluZyBhdCBpbmRleCAje2lkeH1cIiB1bmxlc3MgYnl0ZT9cbiAgdGV4dCA9IGJ1ZmZlci50b1N0cmluZyAndXRmLTgnLCBpZHggKyAxLCBzdG9wX2lkeFxuICByZXR1cm4gWyBzdG9wX2lkeCArIDEsIHRleHQsIF1cblxuXG4jPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiNcbiMtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuQHdyaXRlID0gKCBidWZmZXIsIGlkeCwgdmFsdWUgKSAtPlxuICBzd2l0Y2ggdHlwZSA9IENORC50eXBlX29mIHZhbHVlXG4gICAgd2hlbiAnaW5maW5pdHknXG4gICAgICB0aHJvdyBuZXcgRXJyb3IgXCJub3QgaW1wbGVtZW50ZWRcIlxuICAgIHdoZW4gJ3RleHQnICAgdGhlbiByZXR1cm4gQHdyaXRlX3RleHQgICAgIGJ1ZmZlciwgaWR4LCB2YWx1ZVxuICAgIHdoZW4gJ251bWJlcicgdGhlbiByZXR1cm4gQHdyaXRlX251bWJlciAgIGJ1ZmZlciwgaWR4LCB2YWx1ZVxuICB0aHJvdyBuZXcgRXJyb3IgXCJ1bmFibGUgdG8gZW5jb2RlIHZhbHVlIG9mIHR5cGUgI3t0eXBlfVwiXG5cblxuIz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4jXG4jLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbkBlbmNvZGUgPSAoIHZhbHVlICkgLT5cbiAgdGhyb3cgbmV3IEVycm9yIFwiZXhwZWN0ZWQgYSBsaXN0LCBnb3QgYSAje3R5cGV9XCIgdW5sZXNzICggdHlwZSA9IENORC50eXBlX29mIHZhbHVlICkgaXMgJ2xpc3QnXG4gIGlkeCA9IDBcbiAgZm9yIGVsZW1lbnQgaW4gdmFsdWVcbiAgICBsb29wXG4gICAgICB0cnlcbiAgICAgICAgaWR4ID0gQHdyaXRlIHJlc3VsdF9idWZmZXIsIGlkeCwgZWxlbWVudFxuICAgICAgICBicmVha1xuICAgICAgY2F0Y2ggZXJyb3JcbiAgICAgICAgdGhyb3cgZXJyb3IgdW5sZXNzIGVycm9yIGlzIGJ1ZmZlcl90b29fc2hvcnRfZXJyb3JcbiAgICAgICAgQHJlc2l6ZV9yZXN1bHRfYnVmZmVyKClcbiAgIy4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLlxuICBSID0gbmV3IEJ1ZmZlciBpZHhcbiAgcmVzdWx0X2J1ZmZlci5jb3B5IFIsIDAsIDAsIGlkeFxuICBAcmVsZWFzZV9yZXN1bHRfYnVmZmVyKClcbiAgIy4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLlxuICByZXR1cm4gUlxuXG4jLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbkBkZWNvZGUgPSAoIGJ1ZmZlciApIC0+XG4gIFIgICAgICAgICA9IFtdXG4gIGlkeCAgICAgICA9IDBcbiAgbGFzdF9pZHggID0gYnVmZmVyLmxlbmd0aCAtIDFcbiAgbG9vcFxuICAgIGJyZWFrIGlmIGlkeCA+PSBsYXN0X2lkeFxuICAgIHN3aXRjaCB0eXBlID0gYnVmZmVyWyBpZHggXVxuICAgICAgd2hlbiBAdHlwZV90ZXh0ICAgICB0aGVuIFsgaWR4LCB2YWx1ZSwgXSA9IEByZWFkX3RleHQgICAgIGJ1ZmZlciwgaWR4XG4gICAgICB3aGVuIEB0eXBlX25udW1iZXIgIHRoZW4gWyBpZHgsIHZhbHVlLCBdID0gQHJlYWRfbm51bWJlciAgYnVmZmVyLCBpZHhcbiAgICAgIHdoZW4gQHR5cGVfcG51bWJlciAgdGhlbiBbIGlkeCwgdmFsdWUsIF0gPSBAcmVhZF9wbnVtYmVyICBidWZmZXIsIGlkeFxuICAgICAgZWxzZSB0aHJvdyBuZXcgRXJyb3IgXCJ1bmtub3duIHR5cGUgbWFya2VyIDB4I3t0eXBlLnRvU3RyaW5nIDE2fSBhdCBpbmRleCAje2lkeH1cIlxuICAgIFIucHVzaCB2YWx1ZVxuICAjLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uXG4gIHJldHVybiBSXG5cbiM9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuI1xuIy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5AZiA9IC0+XG4gIGJ1ZmZlcnMgPSBbXVxuICBmb3IgbiBpbiBbIC0xMCAuLiArMTAgXVxuICAgIGJ1ZmZlciA9IG5ldyBCdWZmZXIgOVxuICAgIEB3cml0ZV9udW1iZXIgYnVmZmVyLCBuIC8gMiwgMFxuICAgIGJ1ZmZlcnMucHVzaCBidWZmZXJcbiAgYnVmZmVycy5zb3J0IHNvcnRlclxuICBmb3IgYnVmZmVyIGluIGJ1ZmZlcnNcbiAgICBkZWJ1ZyAnwqllUXVsTicsIGJ1ZmZlciwgQHJlYWRfbnVtYmVyIGJ1ZmZlciwgMFxuXG5cbiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xudW5sZXNzIG1vZHVsZS5wYXJlbnQ/XG4gICMgQGYoKVxuXG4gICMgYiA9IG5ldyBCdWZmZXIgOVxuICAjIGRlYnVnICfCqUszSUM5JywgYlxuICAjIEB3cml0ZV9udW1iZXIgYiwgLTEyMy40NTYsIDBcbiAgIyBkZWJ1ZyAnwqlFSDg4QicsIEByZWFkX251bWJlciBiLCAwXG5cbiAgYiA9IG5ldyBCdWZmZXIgMzBcbiAgIyB0ZXh0ID0gJ2FiY2RlZuS4reWci+eah+W4nfCqnIwnXG4gIHRleHQgID0gJ2FiY2RlJ1xuICBpZHggICA9IDBcbiAgZGVidWcgJ8KpYUtqQlcnLCBpZHggPSBAd3JpdGVfdGV4dCAgIGIsIGlkeCwgdGV4dFxuICBkZWJ1ZyAnwqlhS2pCVycsIGlkeCA9IEB3cml0ZV9udW1iZXIgYiwgaWR4LCAtMTIzNFxuICBkZWJ1ZyAnwqlhS2pCVycsIGlkeCA9IEB3cml0ZV90ZXh0ICAgYiwgaWR4LCAnWFhYWCdcbiAgaGVscCAnwql3MXJETCcsIGJcbiAgIyBoZWxwICfCqXcxckRMJywgaWR4XG4gICMgZGVidWcgJ8KpdzFyREwnLCBiLnRvU3RyaW5nICd1dGYtOCcsIDFcbiAgIyBiID0gYi5zbGljZSAwLCA1XG4gIGRlYnVnICfCqWM3ZFlBJywgcnByIEByZWFkX3RleHQgYiwgMFxuICBkZWJ1ZyAnwqljN2RZQScsIHJwciBAcmVhZF90ZXh0IGIsIGlkeCAtIDZcbiAgYyA9IGIuc2xpY2UgMCwgaWR4XG4gIGRlYnVnICfCqWM3ZFlBJywgQGRlY29kZSBjXG5cbiMgZm9yIG4gaW4gWyAxOTIsIDE5MywgMjQ1LCAyNDYsIDI0NywgMjQ4LCAyNDksIDI1MCwgMjUxLCAyNTIsIDI1MywgMjU0LCAyNTUsIF1cbiMgICBkZWJ1ZyAnwqlkOWY3ZycsICcweCcgKyBuLnRvU3RyaW5nIDE2XG5cbiAgZGVidWcgJ8KpeUc0RkQnLCBuZXcgQnVmZmVyIFwiXFx1ZmZmZlwiXG4gIGRlYnVnICfCqXlHNEZEJywgQGVuY29kZSBbICdmb28nLCBdXG4gIGRlYnVnICfCqXlHNEZEJywgQGVuY29kZSBbICdmb28nLCAxMjM0LCBdXG4gIGRlYnVnICfCqXlHNEZEJywgQGVuY29kZSBbICdmb28nLCAxMjM0LCAnZm9vJywgXVxuICBkZWJ1ZyAnwql5RzRGRCcsIEBkZWNvZGUgQGVuY29kZSBbICdmb28nLCBdXG4gIGRlYnVnICfCqXlHNEZEJywgQGRlY29kZSBAZW5jb2RlIFsgJ2ZvbycsIDEyMzQsIF1cbiAgZGVidWcgJ8KpeUc0RkQnLCBAZGVjb2RlIEBlbmNvZGUgWyAnZm9vJywgMTIzNCwgJ2ZvbycsIF1cblxuXG5cblxuXG5cblxuXG5cblxuIl19
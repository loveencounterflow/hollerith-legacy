(function() {
  var $, CND, D, after, alert, b, badge, buffer_too_short_error, debug, echo, eventually, every, help, idx, immediately, info, j, join, k, l, last_unicode_chr, len, len1, len2, len3, log, m, max_bytes_per_chr, njs_path, number, numbers, rbuffer, rbuffer_delta_size, rbuffer_max_size, rbuffer_min_size, rbuffer_new_size, ref, ref1, repeat_immediately, rpr, sorter, step, suspend, text, texts, type, urge, value, warn, whisper;

  njs_path = require('path');

  join = njs_path.join;

  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'HOLLERITH/CODEC';

  log = CND.get_logger('plain', badge);

  info = CND.get_logger('info', badge);

  whisper = CND.get_logger('whisper', badge);

  alert = CND.get_logger('alert', badge);

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  echo = CND.echo.bind(CND);

  suspend = require('coffeenode-suspend');

  step = suspend.step;

  after = suspend.after;

  eventually = suspend.eventually;

  immediately = suspend.immediately;

  repeat_immediately = suspend.repeat_immediately;

  every = suspend.every;

  D = require('pipedreams2');

  $ = D.remit.bind(D);

  sorter = function(a, b) {
    return a.compare(b);
  };

  last_unicode_chr = (String.fromCharCode(0xdbff)) + (String.fromCharCode(0xdfff));


  /* should always be 3 in modern versions of NodeJS: */

  max_bytes_per_chr = Math.max((new Buffer("\uffff")).length, (new Buffer(last_unicode_chr)).length / 2);

  rbuffer_min_size = 1024;

  rbuffer_delta_size = 1024;

  rbuffer_max_size = 65536;

  rbuffer_new_size = Math.floor((rbuffer_max_size + rbuffer_min_size) / 2);

  rbuffer = new Buffer(rbuffer_min_size);

  this.type_lo = 0x00;

  this.type_variant = 0xc0;

  this.type_date = 0xf9;

  this.type_ninfinity = 0xfa;

  this.type_nnumber = 0xfb;

  this.type_pnumber = 0xfc;

  this.type_pinfinity = 0xfd;

  this.type_text = 0xfe;

  this.type_hi = 0xff;

  this.type_variant_null = 0x00;

  this.type_variant_false = 0x01;

  this.type_variant_true = 0x02;

  this.bytecount_number = 9;

  this.bytecount_date = this.bytecount_number;

  this.bytecount_variant = 2;

  this.bytecount_infinity = 1;

  buffer_too_short_error = new Error("buffer too short");

  this.grow_rbuffer = function(delta_size) {
    var new_result_buffer;
    if (delta_size == null) {
      delta_size = rbuffer_delta_size;
    }
    if (delta_size < 1) {
      return null;
    }
    new_result_buffer = new Buffer(rbuffer.length + delta_size);
    rbuffer.copy(new_result_buffer);
    rbuffer = new_result_buffer;
    return null;
  };

  this.release_extraneous_rbuffer_bytes = function() {
    if (rbuffer.length > rbuffer_max_size) {
      rbuffer = new Buffer(rbuffer_new_size);
    }
    return null;
  };

  this.write_variant = function(idx, value) {
    var sub_typemarker;
    if (!(rbuffer.length >= idx + this.bytecount_variant)) {
      throw buffer_too_short_error;
    }
    if (value === null) {
      sub_typemarker = this.type_variant_null;
    } else if (value === false) {
      sub_typemarker = this.type_variant_false;
    } else if (value === true) {
      sub_typemarker = this.type_variant_true;
    } else {
      throw new Error("unable to encode value of type " + (CND.type_of(value)));
    }
    rbuffer[idx] = this.type_variant;
    rbuffer[idx + 1] = sub_typemarker;
    return idx + this.bytecount_variant;
  };

  this.read_variant = function(buffer, idx) {
    var sub_typemarker, value;
    if (buffer[idx] !== this.type_variant) {
      throw new Error("not a variant at index " + idx);
    }
    switch (sub_typemarker = buffer[idx + 1]) {
      case this.type_variant_null:
        value = null;
        break;
      case this.type_variant_false:
        value = false;
        break;
      case this.type_variant_true:
        value = true;
        break;
      default:
        throw new Error("unknown variant type marker 0x" + (sub_typemarker.toString(16)) + " at index " + (idx + 1));
    }
    return [idx + this.bytecount_variant, value];
  };

  this.write_number = function(idx, number) {
    var type;
    if (!(rbuffer.length >= idx + this.bytecount_number)) {
      throw buffer_too_short_error;
    }
    if (number < 0) {
      type = this.type_nnumber;
      number = -number;
    } else {
      type = this.type_pnumber;
    }
    rbuffer[idx] = type;
    rbuffer.writeDoubleBE(number, idx + 1);
    if (type === this.type_nnumber) {
      this._invert_buffer(rbuffer, idx);
    }
    return idx + this.bytecount_number;
  };

  this.write_infinity = function(idx, number) {
    if (!(rbuffer.length >= idx + this.bytecount_infinity)) {
      throw buffer_too_short_error;
    }
    rbuffer[idx] = number === -Infinity ? this.type_ninfinity : this.type_pinfinity;
    return idx + this.bytecount_infinity;
  };

  this.read_nnumber = function(buffer, idx) {
    var copy;
    if (buffer[idx] !== this.type_nnumber) {
      throw new Error("not a negative number at index " + idx);
    }
    copy = this._invert_buffer(new Buffer(buffer.slice(idx, idx + this.bytecount_number)), 0);
    return [idx + this.bytecount_number, -(copy.readDoubleBE(1))];
  };

  this.read_pnumber = function(buffer, idx) {
    if (buffer[idx] !== this.type_pnumber) {
      throw new Error("not a positive number at index " + idx);
    }
    return [idx + this.bytecount_number, buffer.readDoubleBE(idx + 1)];
  };

  this._invert_buffer = function(buffer, idx) {
    var i, j, ref, ref1;
    for (i = j = ref = idx + 1, ref1 = idx + 8; ref <= ref1 ? j <= ref1 : j >= ref1; i = ref <= ref1 ? ++j : --j) {
      buffer[i] = ~buffer[i];
    }
    return buffer;
  };

  this.write_date = function(idx, date) {
    var new_idx, number;
    number = +date;
    rbuffer[idx] = this.type_date;
    new_idx = this.write_number(idx + 1, number);
    return new_idx;
  };

  this.read_date = function(buffer, idx) {
    var ref, ref1, type, value;
    if (buffer[idx] !== this.type_date) {
      throw new Error("not a date at index " + idx);
    }
    switch (type = buffer[idx + 1]) {
      case this.type_nnumber:
        ref = this.read_nnumber(buffer, idx + 1), idx = ref[0], value = ref[1];
        break;
      case this.type_pnumber:
        ref1 = this.read_pnumber(buffer, idx + 1), idx = ref1[0], value = ref1[1];
        break;
      default:
        throw new Error("unknown date type marker 0x" + (type.toString(16)) + " at index " + idx);
    }
    return [idx, new Date(value)];
  };

  this.write_text = function(idx, text) {
    var byte_count, length_estimate;
    text = text.replace(/\x01/g, '\x01\x02');
    text = text.replace(/\x00/g, '\x01\x01');
    length_estimate = max_bytes_per_chr * text.length + 3;
    this.grow_rbuffer(length_estimate - rbuffer.length - idx - 1);
    rbuffer[idx] = this.type_text;
    byte_count = rbuffer.write(text, idx + 1);
    rbuffer[idx + byte_count + 1] = this.type_lo;
    return idx + byte_count + 2;
  };

  this.read_text = function(buffer, idx) {
    var byte, stop_idx, text;
    if (buffer[idx] !== this.type_text) {
      throw new Error("not a text at index " + idx);
    }
    stop_idx = idx;
    while (true) {
      stop_idx += +1;
      if ((byte = buffer[stop_idx]) === this.type_lo) {
        break;
      }
      if (byte == null) {
        throw new Error("runaway string at index " + idx);
      }
    }
    text = buffer.toString('utf-8', idx + 1, stop_idx);
    text = text.replace(/\x01\x02/g, '\x01');
    text = text.replace(/\x01\x01/g, '\x00');
    return [stop_idx + 1, text];
  };

  this.write = function(idx, value) {
    var type;
    switch (type = CND.type_of(value)) {
      case 'text':
        return this.write_text(idx, value);
      case 'number':
        return this.write_number(idx, value);
      case 'jsinfinity':
        return this.write_infinity(idx, value);
      case 'jsdate':
        return this.write_date(idx, value);
    }
    return this.write_variant(idx, value);
  };

  this.encode = function(value) {
    var R, element, error, idx, j, len, type;
    if ((type = CND.type_of(value)) !== 'list') {
      throw new Error("expected a list, got a " + type);
    }
    idx = 0;
    for (j = 0, len = value.length; j < len; j++) {
      element = value[j];
      while (true) {
        try {
          idx = this.write(idx, element);
          break;
        } catch (_error) {
          error = _error;
          if (error !== buffer_too_short_error) {
            throw error;
          }
          this.grow_rbuffer();
        }
      }
    }
    R = new Buffer(idx);
    rbuffer.copy(R, 0, 0, idx);
    this.release_extraneous_rbuffer_bytes();
    return R;
  };

  this.decode = function(buffer) {
    var R, idx, last_idx, ref, ref1, ref2, ref3, ref4, ref5, ref6, type, value;
    R = [];
    idx = 0;
    last_idx = buffer.length - 1;
    while (true) {
      if (idx > last_idx) {
        break;
      }
      switch (type = buffer[idx]) {
        case this.type_text:
          ref = this.read_text(buffer, idx), idx = ref[0], value = ref[1];
          break;
        case this.type_nnumber:
          ref1 = this.read_nnumber(buffer, idx), idx = ref1[0], value = ref1[1];
          break;
        case this.type_ninfinity:
          ref2 = [idx + 1, -Infinity], idx = ref2[0], value = ref2[1];
          break;
        case this.type_pnumber:
          ref3 = this.read_pnumber(buffer, idx), idx = ref3[0], value = ref3[1];
          break;
        case this.type_pinfinity:
          ref4 = [idx + 1, +Infinity], idx = ref4[0], value = ref4[1];
          break;
        case this.type_date:
          ref5 = this.read_date(buffer, idx), idx = ref5[0], value = ref5[1];
          break;
        case this.type_variant:
          ref6 = this.read_variant(buffer, idx), idx = ref6[0], value = ref6[1];
          break;
        default:
          throw new Error("unknown type marker 0x" + (type.toString(16)) + " at index " + idx);
      }
      R.push(value);
    }
    return R;
  };

  this.f = function() {
    var buffer, buffers, j, k, len, n, results;
    buffers = [];
    for (n = j = -10; j <= 10; n = ++j) {
      buffer = new Buffer(9);
      this.write_number(buffer, n / 2, 0);
      buffers.push(buffer);
    }
    buffers.sort(sorter);
    results = [];
    for (k = 0, len = buffers.length; k < len; k++) {
      buffer = buffers[k];
      results.push(debug('©eQulN', buffer, this.read_number(buffer, 0)));
    }
    return results;
  };

  if (module.parent == null) {
    texts = ['abcde', 'abcde\x00', 'abcde\x01', 'abcde\x00\x01', 'abcde\x02'];
    for (j = 0, len = texts.length; j < len; j++) {
      text = texts[j];
      idx = 0;
      idx = this.write_text(idx, text);
      debug('©RhCt9', rbuffer.slice(0, idx), rpr(this.read_text(rbuffer, 0)));
    }
    for (k = 0, len1 = texts.length; k < len1; k++) {
      text = texts[k];
      urge('©XLCqS', (b = (require('bytewise')).encode([text])).slice(1, b.length - 1));
    }
    numbers = [-3, -2, -1, 0, +1, +2, +3];
    for (l = 0, len2 = numbers.length; l < len2; l++) {
      number = numbers[l];
      idx = 0;
      idx = this.write_number(idx, number);
      switch (type = rbuffer[0]) {
        case this.type_nnumber:
          ref = this.read_nnumber(rbuffer, 0), idx = ref[0], value = ref[1];
          break;
        case this.type_pnumber:
          ref1 = this.read_pnumber(rbuffer, 0), idx = ref1[0], value = ref1[1];
          break;
        default:
          throw new Error("unknown type marker 0x" + (type.toString(16)) + " at index " + idx);
      }
      debug('©vQyrF', rbuffer.slice(0, idx), rpr(value));
    }
    for (m = 0, len3 = numbers.length; m < len3; m++) {
      number = numbers[m];
      urge('©XLCqS', (b = (require('bytewise')).encode([number])).slice(1, b.length - 1));
    }
  }

}).call(this);

//# sourceMappingURL=data:application/json;base64,
(function() {
  var CND, R, TEXT, alert, badge, debug, echo, help, i, info, j, k, len, log, m, ref, rpr, urge, warn, whisper, x, y, z, ƒ;

  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'HOLLERITH/dump';

  log = CND.get_logger('plain', badge);

  info = CND.get_logger('info', badge);

  whisper = CND.get_logger('whisper', badge);

  alert = CND.get_logger('alert', badge);

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  echo = CND.echo.bind(CND);

  m = require('morton');

  TEXT = require('coffeenode-text');

  ƒ = function(n) {
    return TEXT.flush_right(CND.format_number(n), 5);
  };

  R = [];

  for (x = i = 1000; i <= 1008; x = ++i) {
    for (y = j = 500; j <= 508; y = ++j) {
      R.push([m(x, y), x, y]);
    }
  }

  R.sort(function(arg, arg1) {
    var x0, x1, y0, y1, z0, z1;
    z0 = arg[0], x0 = arg[1], y0 = arg[2];
    z1 = arg1[0], x1 = arg1[1], y1 = arg1[2];
    if (z0 < z1) {
      return -1;
    }
    if (z0 > z1) {
      return +1;
    }
    return 0;
  });

  for (k = 0, len = R.length; k < len; k++) {
    ref = R[k], z = ref[0], x = ref[1], y = ref[2];
    help(ƒ(z), ƒ(x), ƒ(y));
  }

  urge(m(1, 1), m(5, 5), m(6, 50));

}).call(this);

//# sourceMappingURL=data:application/json;base64,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LENBQUUsQ0FBRixFQUFLLENBQUwsQ0FBcEIsRUFBaUMsQ0FBQSxDQUFFLENBQUYsRUFBSyxFQUFMLENBQWpDLENBaENBLENBQUE7QUFBQSIsImZpbGUiOiJ0cnktbW9ydG9uLmpzIiwic291cmNlUm9vdCI6Ii9zb3VyY2UvIiwic291cmNlc0NvbnRlbnQiOlsiXG5cblxuIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjXG5DTkQgICAgICAgICAgICAgICAgICAgICAgID0gcmVxdWlyZSAnY25kJ1xucnByICAgICAgICAgICAgICAgICAgICAgICA9IENORC5ycHJcbmJhZGdlICAgICAgICAgICAgICAgICAgICAgPSAnSE9MTEVSSVRIL2R1bXAnXG5sb2cgICAgICAgICAgICAgICAgICAgICAgID0gQ05ELmdldF9sb2dnZXIgJ3BsYWluJywgICAgIGJhZGdlXG5pbmZvICAgICAgICAgICAgICAgICAgICAgID0gQ05ELmdldF9sb2dnZXIgJ2luZm8nLCAgICAgIGJhZGdlXG53aGlzcGVyICAgICAgICAgICAgICAgICAgID0gQ05ELmdldF9sb2dnZXIgJ3doaXNwZXInLCAgIGJhZGdlXG5hbGVydCAgICAgICAgICAgICAgICAgICAgID0gQ05ELmdldF9sb2dnZXIgJ2FsZXJ0JywgICAgIGJhZGdlXG5kZWJ1ZyAgICAgICAgICAgICAgICAgICAgID0gQ05ELmdldF9sb2dnZXIgJ2RlYnVnJywgICAgIGJhZGdlXG53YXJuICAgICAgICAgICAgICAgICAgICAgID0gQ05ELmdldF9sb2dnZXIgJ3dhcm4nLCAgICAgIGJhZGdlXG5oZWxwICAgICAgICAgICAgICAgICAgICAgID0gQ05ELmdldF9sb2dnZXIgJ2hlbHAnLCAgICAgIGJhZGdlXG51cmdlICAgICAgICAgICAgICAgICAgICAgID0gQ05ELmdldF9sb2dnZXIgJ3VyZ2UnLCAgICAgIGJhZGdlXG5lY2hvICAgICAgICAgICAgICAgICAgICAgID0gQ05ELmVjaG8uYmluZCBDTkRcbm0gICAgICAgICAgICAgICAgICAgICAgICAgPSByZXF1aXJlICdtb3J0b24nXG5URVhUICAgICAgICAgICAgICAgICAgICAgID0gcmVxdWlyZSAnY29mZmVlbm9kZS10ZXh0J1xuxpIgICAgICAgICAgICAgICAgICAgICAgICAgPSAoIG4gKSAtPiBURVhULmZsdXNoX3JpZ2h0ICggQ05ELmZvcm1hdF9udW1iZXIgbiApLCA1XG5cblxuUiA9IFtdXG5mb3IgeCBpbiBbIDEwMDAgLi4gMTAwOCBdXG4gIGZvciB5IGluIFsgNTAwIC4uIDUwOCBdXG4gICAgUi5wdXNoIFsgKCBtIHgsIHkgKSwgeCwgeSwgXVxuXG5SLnNvcnQgKCBbIHowLCB4MCwgeTAsIF0sIFsgejEsIHgxLCB5MSwgXSApIC0+XG4gIHJldHVybiAtMSBpZiB6MCA8IHoxXG4gIHJldHVybiArMSBpZiB6MCA+IHoxXG4gIHJldHVybiAgMFxuXG5cbmZvciBbIHosIHgsIHksIF0gaW4gUlxuICBoZWxwICggxpIgeiApLCAoIMaSIHggKSwgKCDGkiB5IClcblxuXG51cmdlICggbSAxLCAxLCApLCAoIG0gNSwgNSwgKSwgKCBtIDYsIDUwLCApXG4jIHVyZ2UgbS5jb2RlIDYyLCA2LCA3XG5cblxuXG5cblxuXG5cblxuXG5cbiJdfQ==
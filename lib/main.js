(function() {
  var $, BYTEWISE, CND, D, _btws_decode, _btws_encode, _new_level_db, badge, debug, echo, help, leveldown, log, rpr, step, suspend, urge, warn, whisper,
    slice = [].slice;

  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'test-hollerith';

  log = CND.get_logger('plain', badge);

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  whisper = CND.get_logger('whisper', badge);

  echo = CND.echo.bind(CND);

  suspend = require('coffeenode-suspend');

  step = suspend.step;

  BYTEWISE = require('bytewise');

  _btws_encode = BYTEWISE.encode.bind(BYTEWISE);

  _btws_decode = BYTEWISE.decode.bind(BYTEWISE);

  D = require('pipedreams2');

  $ = D.remit.bind(D);

  _new_level_db = require('level');

  this._zero = _btws_encode(true);

  this._last_octet = new Buffer([0xff]);

  leveldown = require('level/node_modules/leveldown');

  suspend = require('coffeenode-suspend');

  step = suspend.step;

  this.new_db = function(route) {
    var R, level_settings, substrate;
    level_settings = {
      'keyEncoding': 'binary',
      'valueEncoding': 'binary',
      'createIfMissing': true,
      'errorIfExists': false,
      'compression': true,
      'sync': false
    };
    substrate = _new_level_db(route, level_settings);
    R = {
      '~isa': 'HOLLERITH/db',
      '%self': substrate
    };
    return R;
  };

  this.clear = function(db, handler) {
    return step((function(_this) {
      return function*(resume) {
        var route;
        route = db['%self']['location'];
        (yield db['%self'].close(resume));
        (yield leveldown.destroy(route, resume));
        (yield db['%self'].open(resume));
        help("erased and re-opened LevelDB at " + route);
        return handler(null);
      };
    })(this));
  };

  this._encode = function(db, key) {
    return _btws_encode(key);
  };

  this._decode = function(db, key) {
    return _btws_decode(key);
  };

  this._rpr_of_key = function(db, key) {
    var idx, idx_rpr, k0, k1, phrasetype, v0, v1;
    if ((this._type_from_key(db, key)) === 'list') {
      phrasetype = key[0], k0 = key[1], v0 = key[2], k1 = key[3], v1 = key[4], idx = key[5];
      idx_rpr = idx != null ? rpr(idx) : '';

      /* TAINT should escape metachrs `|`, ':' */

      /* TAINT should use `rpr` on parts of speech (e.g. object value could be a number etc.) */
      return phrasetype + "|" + k0 + ":" + v0 + "|" + k1 + ":" + v1 + "|" + idx_rpr;
    }
    return "" + (rpr(key));
  };

  this._type_from_key = function(db, key) {
    var first, idx, phrasetype, second;
    if (Array.isArray(key)) {
      if (key.length !== 6) {
        throw new Error("illegal key: " + (rpr(key)));
      }
      phrasetype = key[0], first = key[1], second = key[2], idx = key[3];
      if (phrasetype !== 'so' && phrasetype !== 'os') {
        throw new Error("illegal phrasetype: " + (rpr(key)));
      }
      return 'list';
    }
    return 'other';
  };

  this.$write = function(db, buffer_size) {
    var _send, batch_count, buffer, flush, has_ended, substrate;
    if (buffer_size == null) {
      buffer_size = 1000;
    }

    /* Expects a Hollerith DB object and an optional buffer size; returns a pipe transformer that does all of
    the following:
    
    * It expects an SO key for which it will generate a corresponding OS key.
    * A corresponding OS key is formulated except when the SO key's object value is a JS object / a POD (since
      in that case, the value serialization is jolly useless as an index).
    * It sends on both the SO and the OS key downstream for optional further processing.
    * It forms a proper `node-level`-compatible batch record for each key and collect all records
      in a buffer.
    * Whenever the buffer has outgrown the given buffer size, the buffer will be written into the DB using
      `levelup`'s `batch` command.
    * When the last pending batch has been written into the DB, the `end` event is called on the stream
      and may be detected downstream.
     */
    if (!(buffer_size > 0)) {
      throw new Error("buffer size must be positive integer, got " + (rpr(buffer_size)));
    }
    buffer = [];
    substrate = db['%self'];
    batch_count = 0;
    has_ended = false;
    _send = null;
    flush = (function(_this) {
      return function() {
        if (buffer.length > 0) {
          batch_count += +1;
          substrate.batch(buffer, function(error) {
            if (error != null) {
              throw error;
            }
            batch_count += -1;
            if (has_ended && batch_count < 1) {
              return _send.end();
            }
          });
          return buffer = [];
        } else {
          return _send.end();
        }
      };
    })(this);
    return $((function(_this) {
      return function(so_key, send, end) {
        var os_key;
        _send = send;
        if (so_key != null) {
          buffer.push({
            type: 'put',
            key: _this._encode(db, so_key),
            value: _this._zero
          });

          /* TAINT must validate this type check still works as intended */
          if (!CND.isa_pod(so_key[2][1])) {
            os_key = _this._new_os_key_from_so_key(db, so_key);
            buffer.push({
              type: 'put',
              key: _this._encode(db, os_key),
              value: _this._zero
            });
          }
          if (buffer.length >= buffer_size) {
            flush();
          }
          send(so_key);
          send(os_key);
        }
        if (end != null) {
          has_ended = true;
          return flush();
        }
      };
    })(this));
  };

  this.read = function(db, prefix) {
    if (prefix == null) {
      prefix = null;
    }
    if (prefix == null) {
      return db['%self'].createKeyStream();
    }
    return db['%self'].createKeyStream(this._query_from_prefix);
  };

  this.read_sub = function(db, settings, read) {
    var arity, indexed, insert_index, open_stream_count, ref;
    switch (arity = arguments.length) {
      case 2:
        read = settings;
        settings = null;
        break;
      case 3:
        null;
        break;
      default:
        throw new Error("expected 2 or 3 arguments, got " + arity);
    }
    indexed = (ref = settings != null ? settings['indexed'] : void 0) != null ? ref : false;
    insert_index = indexed ? D.new_indexer() : function(x) {
      return x;
    };
    open_stream_count = 0;
    return $((function(_this) {
      return function(outer_data, outer_send, outer_end) {
        var sub_input;
        if (outer_data != null) {
          open_stream_count += +1;
          sub_input = read(outer_data).pipe((function() {
            var buffer;
            buffer = [];
            return $(function(inner_data, _, inner_end) {
              if (inner_data != null) {
                buffer.push(inner_data);
              }
              if (inner_end != null) {
                outer_send(insert_index(buffer));
                return open_stream_count += -1;
              }
            });
          })());
        }
        if (outer_end != null) {
          return repeat_immediately(function() {
            if (open_stream_count !== 0) {
              return true;
            }
            outer_end();
            return false;
          });
        }
      };
    })(this));
  };


  /* NB Argument ordering for these function is always subject before object, regardless of the phrasetype
  and the ordering in the resulting key.
   */

  this.new_key = function(db, phrasetype, sk, sv, ok, ov, idx) {
    var ref;
    if (phrasetype !== 'so' && phrasetype !== 'os') {
      throw new Error("illegal phrasetype: " + (rpr(phrasetype)));
    }
    if (phrasetype === 'os') {
      ref = [ok, ov, sk, sv], sk = ref[0], sv = ref[1], ok = ref[2], ov = ref[3];
    }
    return [phrasetype, sk, sv, ok, ov, idx != null ? idx : 0];
  };

  this.new_so_key = function() {
    var P, db;
    db = arguments[0], P = 2 <= arguments.length ? slice.call(arguments, 1) : [];
    return this.new_key.apply(this, [db, 'so'].concat(slice.call(P)));
  };

  this.new_os_key = function() {
    var P, db;
    db = arguments[0], P = 2 <= arguments.length ? slice.call(arguments, 1) : [];
    return this.new_key.apply(this, [db, 'os'].concat(slice.call(P)));
  };

  this._new_os_key_from_so_key = function(db, so_key) {
    var idx, ok, ov, phrasetype, ref, sk, sv;
    ref = this.normalize_key(db, so_key), phrasetype = ref[0], sk = ref[1], sv = ref[2], ok = ref[3], ov = ref[4], idx = ref[5];
    if (phrasetype !== 'so') {
      throw new Error("expected phrasetype 'so', got " + (rpr(phrasetype)));
    }
    return ['os', ok, ov, sk, sv, idx];
  };

  this.new_keys = function(db, phrasetype, sk, sv, ok, ov, idx) {
    var other_phrasetype;
    other_phrasetype = phrasetype === 'so' ? 'os' : 'so';
    return [this.new_key(db, phrasetype, sk, sv, ok, ov, idx), this.new_key(db, other_phrasetype, sk, sv, ok, ov, idx)];
  };

  this.normalize_key = function(db, key) {
    var idx, ok, ov, phrasetype, ref, sk, sv;
    phrasetype = key[0], sk = key[1], sv = key[2], ok = key[3], ov = key[4], idx = key[5];
    if (phrasetype === 'os') {
      ref = [ok, ov, sk, sv], sk = ref[0], sv = ref[1], ok = ref[2], ov = ref[3];
    }
    return [phrasetype, sk, sv, ok, ov, idx != null ? idx : 0];
  };

  this.key_from_url = function(db, url) {

    /* TAIN does not unescape as yet */

    /* TAIN does not cast values as yet */

    /* TAINT does not support multiple indexes as yet */
    var first, idx, ok, ov, phrasetype, ref, ref1, ref2, ref3, second, sk, sv;
    ref = url.split('|'), phrasetype = ref[0], first = ref[1], second = ref[2], idx = ref[3];
    if (!((phrasetype != null) && phrasetype.length > 0 && (phrasetype === 'so' || phrasetype === 'os'))) {
      throw new Error("illegal URL key " + (rpr(url)));
    }
    if (!((first != null) && first.length > 0 && (second != null) && second.length > 0)) {
      throw new Error("illegal URL key " + (rpr(url)));
    }
    idx = (idx != null) && idx.length > 0 ? parseInt(idx, 10) : 0;
    ref1 = first.split(':'), sk = ref1[0], sv = ref1[1];
    ref2 = second.split(':'), ok = ref2[0], ov = ref2[1];
    if (!((sk != null) && sk.length > 0 && (ok != null) && ok.length > 0)) {
      throw new Error("illegal URL key " + (rpr(url)));
    }
    if (phrasetype === 'os') {
      ref3 = [ok, ov, sk, sv], sk = ref3[0], sv = ref3[1], ok = ref3[2], ov = ref3[3];
    }
    return [phrasetype, sk, sv, ok, ov, idx];
  };

  this.new_query = function(db, hint) {
    var type;
    switch (type = CND.type_of(hint)) {
      case 'text':
        return this._query_from_partial_url(db, hint);
      case 'list':
        return this._query_from_partial_key(db, hint);
    }
    throw new Error("expected a partial URL (a text) or key (a list), got a " + type);
  };

  this._query_from_partial_url = function(db, purl) {
    var k0, phrasetype, pkey, ref, ref1, tail, v0;
    ref = purl.split('|', 2), phrasetype = ref[0], tail = ref[1];
    ref1 = tail != null ? tail.split(':', 2) : [null, null], k0 = ref1[0], v0 = ref1[1];
    pkey = [phrasetype];
    if (k0 != null) {
      pkey.push(k0);
    }
    if (v0 != null) {
      pkey.push(v0);
    }
    return this._query_from_partial_key(db, pkey);
  };

  this._query_from_partial_key = function(db, pkey) {
    var base, element, gte, i, len, length, lte;
    for (i = 0, len = pkey.length; i < len; i++) {
      element = pkey[i];
      if (!CND.isa_text(element)) {
        throw new Error("illegal prefix-key: " + (rpr(pkey)));
      }
    }
    base = this._encode(db, pkey);
    length = base.length;
    if (base[length - 1] !== 0x00) {
      throw new Error("illegal prefix-key: " + (rpr(pkey)));
    }
    if (base[length - 2] !== 0x00) {
      throw new Error("illegal prefix-key: " + (rpr(pkey)));
    }
    base[length - 2] = 0xff;
    gte = base.slice(0, length - 2);
    lte = base.slice(0, length - 1);
    return {
      gte: gte,
      lte: lte
    };
  };

}).call(this);

//# sourceMappingURL=data:application/json;base64,
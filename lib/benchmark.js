(function() {
  var BYTEWISE, CND, CODEC, CODEC_INSTRUMENTALIZED, PASSPHRASE, after, alert, badge, debug, echo, eventually, help, immediately, info, join, log, njs_path, report, rpr, start, step, stop, suspend, times, urge, warn, whisper, ƒ,
    slice = [].slice;

  njs_path = require('path');

  join = njs_path.join;

  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'HOLLERITH/tests';

  log = CND.get_logger('plain', badge);

  info = CND.get_logger('info', badge);

  whisper = CND.get_logger('whisper', badge);

  alert = CND.get_logger('alert', badge);

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  echo = CND.echo.bind(CND);

  suspend = require('coffeenode-suspend');

  step = suspend.step;

  after = suspend.after;

  eventually = suspend.eventually;

  immediately = suspend.immediately;

  BYTEWISE = require('bytewise');

  CODEC = require('./codec');

  PASSPHRASE = require('coffeenode-passphrase');

  ƒ = CND.format_number.bind(CND);

  CODEC_INSTRUMENTALIZED = {};

  times = {};

  start = function(name) {
    var target;
    target = times[name] != null ? times[name] : times[name] = [];
    target.push(process.hrtime());
    return null;
  };

  stop = function(name) {
    var target;
    target = times[name];
    target[target.length - 1] = process.hrtime(target[target.length - 1]);
    return null;
  };

  report = function() {
    var dt, dts, i, len, millis, name, nanos, ref, results;
    results = [];
    for (name in times) {
      dts = times[name];
      dt = [0, 0];
      for (i = 0, len = dts.length; i < len; i++) {
        ref = dts[i], millis = ref[0], nanos = ref[1];
        dt[0] += millis;
        dt[1] += nanos;
      }
      while (true) {
        if (dt[1] < 1e9) {
          break;
        }
        dt[0] += +1;
        dt[1] += -1e9;
      }
      nanos = "000000000" + dt[1];
      nanos = nanos.slice(nanos.length - 9, +(nanos.length - 1) + 1 || 9e9);
      results.push(urge(dt[0] + "." + nanos + " " + name));
    }
    return results;
  };

  (function() {
    var name, results, value;
    results = [];
    for (name in CODEC) {
      value = CODEC[name];
      results.push((function(name, value) {
        var f;
        if (CND.isa_function(value)) {
          f = function() {
            var P, R;
            P = 1 <= arguments.length ? slice.call(arguments, 0) : [];
            start(name);
            R = value.apply(CODEC_INSTRUMENTALIZED, P);
            stop(name);
            return R;
          };
          return CODEC_INSTRUMENTALIZED[name] = f;
        } else {
          return CODEC_INSTRUMENTALIZED[name] = value;
        }
      })(name, value));
    }
    return results;
  })();

  this.test_h2c_instrumentalized = function(probes) {
    var i, len, probe, t0, t1;
    t0 = +new Date();
    for (i = 0, len = probes.length; i < len; i++) {
      probe = probes[i];
      CODEC_INSTRUMENTALIZED.encode(probe);
    }
    t1 = +new Date();
    return t1 - t0;
  };

  this.test_h2c = function(probes) {
    var i, len, probe, t0, t1;
    t0 = +new Date();
    for (i = 0, len = probes.length; i < len; i++) {
      probe = probes[i];
      CODEC.encode(probe);
    }
    t1 = +new Date();
    return t1 - t0;
  };

  this.test_bytewise = function(probes) {
    var i, len, probe, t0, t1;
    t0 = +new Date();
    for (i = 0, len = probes.length; i < len; i++) {
      probe = probes[i];
      BYTEWISE.encode(probe);
    }
    t1 = +new Date();
    return t1 - t0;
  };

  this.test_json = function(probes) {
    var i, len, probe, t0, t1;
    t0 = +new Date();
    for (i = 0, len = probes.length; i < len; i++) {
      probe = probes[i];
      JSON.stringify(probe);
    }
    t1 = +new Date();
    return t1 - t0;
  };

  this.main = function() {
    var idx, n, probes, values;
    n = 1e5;
    whisper("generating " + (ƒ(n)) + " probes");
    values = [0, +Number.MIN_VALUE, +Number.EPSILON, +32451, +32451.5, +32452, +32453, +123456789];
    probes = (function() {
      var i, ref, results;
      results = [];
      for (idx = i = 1, ref = n; 1 <= ref ? i <= ref : i >= ref; idx = 1 <= ref ? ++i : --i) {
        results.push([PASSPHRASE.get_passphrase(), values[idx % values.length]]);
      }
      return results;
    })();
    help("generated " + (ƒ(probes.length)) + " probes; now performing benchmarks");
    debug('©0qFcb', this.test_h2c_instrumentalized(probes));
    return report();
  };

  if (module.parent == null) {
    this.main();
  }

}).call(this);

//# sourceMappingURL=data:application/json;base64,
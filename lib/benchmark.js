(function() {
  var BYTEWISE, CND, CODEC, PASSPHRASE, after, alert, badge, debug, echo, help, info, join, log, njs_path, rpr, step, suspend, urge, warn, whisper, ƒ;

  njs_path = require('path');

  join = njs_path.join;

  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'HOLLERITH/tests';

  log = CND.get_logger('plain', badge);

  info = CND.get_logger('info', badge);

  whisper = CND.get_logger('whisper', badge);

  alert = CND.get_logger('alert', badge);

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  echo = CND.echo.bind(CND);

  suspend = require('coffeenode-suspend');

  step = suspend.step;

  after = suspend.after;

  BYTEWISE = require('bytewise');

  CODEC = require('./codec');

  PASSPHRASE = require('coffeenode-passphrase');

  ƒ = CND.format_number.bind(CND);

  this.test_h2c = function(probes) {
    var i, len, probe, t0, t1;
    t0 = +new Date();
    for (i = 0, len = probes.length; i < len; i++) {
      probe = probes[i];
      CODEC.encode(probe);
    }
    t1 = +new Date();
    return t1 - t0;
  };

  this.test_bytewise = function(probes) {
    var i, len, probe, t0, t1;
    t0 = +new Date();
    for (i = 0, len = probes.length; i < len; i++) {
      probe = probes[i];
      BYTEWISE.encode(probe);
    }
    t1 = +new Date();
    return t1 - t0;
  };

  this.test_json = function(probes) {
    var i, len, probe, t0, t1;
    t0 = +new Date();
    for (i = 0, len = probes.length; i < len; i++) {
      probe = probes[i];
      JSON.stringify(probe);
    }
    t1 = +new Date();
    return t1 - t0;
  };

  this.main = function() {
    var bytewise_ms, h2c_ms, idx, json_ms, n, probes, values;
    n = 1e5;
    whisper("generating " + (ƒ(n)) + " probes");
    values = [0, +Number.MIN_VALUE, +Number.EPSILON, +32451, +32451.5, +32452, +32453, +123456789];
    probes = (function() {
      var i, ref, results;
      results = [];
      for (idx = i = 1, ref = n; 1 <= ref ? i <= ref : i >= ref; idx = 1 <= ref ? ++i : --i) {
        results.push([PASSPHRASE.get_passphrase(), values[idx % values.length]]);
      }
      return results;
    })();
    help("generated " + (ƒ(probes.length)) + " probes; now performing benchmarks");
    bytewise_ms = this.test_bytewise(probes);
    h2c_ms = this.test_h2c(probes);
    json_ms = this.test_json(probes);
    urge("encode bytewise: " + (ƒ(bytewise_ms)) + "ms (" + ((bytewise_ms / json_ms * 100).toFixed(2)) + "%)");
    urge("encode h2c:      " + (ƒ(h2c_ms)) + "ms (" + ((h2c_ms / json_ms * 100).toFixed(2)) + "%)");
    return urge("encode json:     " + (ƒ(json_ms)) + "ms (" + ((json_ms / json_ms * 100).toFixed(2)) + "%)");
  };

  if (module.parent == null) {
    this.main();
  }

}).call(this);

//# sourceMappingURL=data:application/json;base64,
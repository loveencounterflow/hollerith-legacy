(function() {
  var $, CND, D, HOLLERITH, alert, badge, chrs, cli_options, db, debug, docopt, dump_settings, echo, filename, help, info, join, limit, log, new_db, njs_path, prefix, rpr, urge, usage, version, warn, whisper, ƒ;

  njs_path = require('path');

  join = njs_path.join;

  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'HOLLERITH/dump';

  log = CND.get_logger('plain', badge);

  info = CND.get_logger('info', badge);

  whisper = CND.get_logger('whisper', badge);

  alert = CND.get_logger('alert', badge);

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  echo = CND.echo.bind(CND);

  D = require('pipedreams2');

  $ = D.remit.bind(D);

  new_db = require('level');

  HOLLERITH = require('./main');

  ƒ = CND.format_number.bind(CND);

  this._first_chrs_of = function(text, n) {

    /*
    for text in [ 'abc', '中國皇帝', 'a𪜄b', ]
      for n in [ 0 .. 5 ]
        debug '©DLOTs', n, rpr prefix_of text, n
     */
    var count, idx, last_idx;
    if (n <= 0) {
      return '';
    }
    count = 0;
    idx = -1;
    last_idx = text.length - 1;
    while (count < n) {
      if (idx >= last_idx) {
        break;
      }
      idx += +1;
      if ((text.codePointAt(idx)) > 0xffff) {
        idx += +1;
      }
      count += 1;
    }
    return [text.slice(0, +idx + 1 || 9e9), idx + 1];
  };


  /* TAINT code duplication */

  this._$dump_facets = function(db, input, settings) {
    var chrs, colors, count, limit;
    limit = settings.limit, colors = settings.colors, chrs = settings.chrs;
    count = 0;
    return $((function(_this) {
      return function(facet, send, end) {
        var key, key_rpr, part, phrasetype, value, value_rpr;
        if (facet != null) {
          count += +1;
          key = facet.key, value = facet.value;
          if (count < limit) {
            key_rpr = HOLLERITH.url_from_key(db, HOLLERITH._decode_key(db, key));
            phrasetype = key_rpr.slice(0, 3);
            if (colors) {
              key_rpr = ((function() {
                var i, len, ref, results;
                ref = key_rpr.split('|');
                results = [];
                for (i = 0, len = ref.length; i < len; i++) {
                  part = ref[i];
                  results.push(CND.plum(part));
                }
                return results;
              })()).join(CND.grey('|'));
            }
            if (phrasetype === 'spo' && (value != null)) {
              value = value.toString('utf-8');
              value_rpr = (rpr(value)).replace(/^'(.*)'$/, '$1');
              if (colors) {
                value_rpr = CND.orange(value_rpr);
              }
            } else {
              value_rpr = '';
            }
            log(CND.grey(ƒ(count)), key_rpr + value_rpr);
            send(key);
          }
          if (count >= limit) {
            input.emit('end');
          }
        }
        if (end != null) {
          help("dumped " + (ƒ(count)) + " entries");
          return process.exit();
        }
      };
    })(this));
  };


  /* TAINT code duplication */

  this._$dump_prefixes = function(db, input, settings) {
    var chrs, colors, key_count, limit, prefix_count, prefixes, t0;
    limit = settings.limit, colors = settings.colors, chrs = settings.chrs;
    key_count = 0;
    prefix_count = 0;
    prefixes = {};
    t0 = +new Date();
    return $((function(_this) {
      return function(key, send, end) {
        var dt, dt_min, dt_s, key_rpr, prefix, ref, suffix_idx, t1;
        if (key != null) {
          key_count += +1;
          if (key_count < limit) {
            key_rpr = HOLLERITH.url_from_key(db, HOLLERITH._decode_key(db, key));
            ref = _this._first_chrs_of(key_rpr, chrs), prefix = ref[0], suffix_idx = ref[1];
            if (prefixes[prefix] == null) {
              prefix_count += +1;
              prefixes[prefix] = 1;
              if (colors) {
                log(CND.grey(ƒ(key_count)), (CND.plum(prefix)) + (CND.grey(key_rpr.slice(suffix_idx))));
              } else {
                echo(ƒ(key_count), prefix, key_rpr.slice(suffix_idx));
              }
              send(key);
            }
          }
          if (key_count >= limit) {
            input.emit('end');
          }
        }
        if (end != null) {
          t1 = +new Date();
          dt = t1 - t0;
          dt_s = (dt / 1000).toFixed(3);
          dt_min = (dt / 60000).toFixed(1);
          help("dumped " + (ƒ(key_count)) + " entries in " + dt_s + "s (" + dt_min + "min)");
          help("found " + (ƒ(prefix_count)) + " distinct prefixes with up to " + (ƒ(chrs)) + " characters");
          return process.exit();
        }
      };
    })(this));
  };

  this.dump = function(db, settings) {
    var input, key, mode, prefix, query, worker;
    mode = settings.mode, prefix = settings.prefix;
    switch (settings['mode']) {
      case 'keys':
        if (prefix != null) {
          debug('©7fHvz', rpr(prefix));

          /* TAINT use library method */
          key = prefix.split('|');
          query = HOLLERITH._query_from_prefix(db, key, '*');
          urge('©g1y6J', key);
          urge('©g1y6J', query['gte']);
          urge('©g1y6J', query['lte']);
          input = db['%self'].createReadStream(query);
        } else {
          input = db['%self'].createReadStream();
        }
        worker = this._$dump_facets(db, input, settings);
        break;
      case 'prefixes':
        input = db['%self'].createKeyStream();
        worker = this._$dump_prefixes(db, input, settings);
        break;
      default:
        throw new Error("unknown mode " + (rpr(mode)));
    }
    return input.pipe(worker);
  };

  this.encodings = {
    dbcs2: "⓪①②③④⑤⑥⑦⑧⑨⑩⑪⑫⑬⑭⑮⑯⑰⑱⑲⑳㉑㉒㉓㉔㉕㉖㉗㉘㉙㉚㉛\n㉜！＂＃＄％＆＇（）＊＋，－．／０１２３４５６７８９：；＜＝＞？\n＠ＡＢＣＤＥＦＧＨＩＪＫＬＭＮＯＰＱＲＳＴＵＶＷＸＹＺ［＼］＾＿\n｀ａｂｃｄｅｆｇｈｉｊｋｌｍｎｏｐｑｒｓｔｕｖｗｘｙｚ｛｜｝～㉠\n㉝㉞㉟㊱㊲㊳㊴㊵㊶㊷㊸㊹㊺㊻㊼㊽㊾㊿㋐㋑㋒㋓㋔㋕㋖㋗㋘㋙㋚㋛㋜㋝\n㋞㋟㋠㋡㋢㋣㋤㋥㋦㋧㋨㋩㋪㋫㋬㋭㋮㋯㋰㋱㋲㋳㋴㋵㋶㋷㋸㋹㋺㋻㋼㋽\n㋾㊊㊋㊌㊍㊎㊏㊐㊑㊒㊓㊔㊕㊖㊗㊘㊙㊚㊛㊜㊝㊞㊟㊠㊡㊢㊣㊤㊥㊦㊧㊨\n㊩㊪㊫㊬㊭㊮㊯㊰㊀㊁㊂㊃㊄㊅㊆㊇㊈㊉㉈㉉㉊㉋㉌㉍㉎㉏⓵⓶⓷⓸⓹〓",
    aleph: "БДИЛЦЧШЭЮƆƋƏƐƔƥƧƸψŐőŒœŊŁłЯɔɘɐɕəɞ\n␣!\"#$%&'()*+,-./0123456789:;<=>?\n@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_\n`abcdefghijklmnopqrstuvwxyz{|}~ω\nΓΔΘΛΞΠΣΦΨΩαβγδεζηθικλμνξπρςστυφχ\nЖ¡¢£¤¥¦§¨©ª«¬Я®¯°±²³´µ¶·¸¹º»¼½¾¿\nÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞß\nàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ",
    rdctn: "∇≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡\n␣!\"#$%&'()*+,-./0123456789:;<=>?\n@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_\n`abcdefghijklmnopqrstuvwxyz{|}~≡\n∃∃∃∃∃∃∃∃∃∃∃∃∃∃∃∃∃∃∃∃∃∃∃∃∃∃∃∃∃∃∃∃\n∃∃¢£¤¥¦§¨©ª«¬Я®¯°±²³´µ¶·¸¹º»¼½¾¿\nÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞß\nàáâãäåæçèéêëìíîïðñò≢≢≢≢≢≢≢≢≢≢≢≢Δ"
  };

  this.rpr_of_buffer = function(db, buffer, encoding) {
    return (rpr(buffer)) + ' ' + this.encode_buffer(db, buffer, encoding);
  };

  this.encode_buffer = function(db, buffer, encoding) {
    var idx;
    if (encoding == null) {
      encoding = 'rdctn';
    }
    if (!CND.isa_list(encoding)) {
      encoding = this.encodings[encoding];
    }
    return ((function() {
      var i, ref, results;
      results = [];
      for (idx = i = 0, ref = buffer.length; 0 <= ref ? i < ref : i > ref; idx = 0 <= ref ? ++i : --i) {
        results.push(encoding[buffer[idx]]);
      }
      return results;
    })()).join('');
  };

  this.rpr_of_facets = function(db, facets, encoding) {
    var a, b, columnify_settings, i, j, key, key_rpr, len, len1, ref, ref1, value, value_rpr;
    columnify_settings = {
      paddingChr: ' ',
      columnSplitter: ' ┊ '
    };
    a = [];
    b = [];
    for (i = 0, len = facets.length; i < len; i++) {
      ref = facets[i], key = ref[0], value = ref[1];
      key_rpr = (rpr(key)).replace(/^<Buffer (.*)>$/, '$1');
      value_rpr = (rpr(value)).replace(/^<Buffer (.*)>$/, '$1');
      a.push([key_rpr, value_rpr]);
    }
    a = CND.columnify(a, columnify_settings);
    for (j = 0, len1 = facets.length; j < len1; j++) {
      ref1 = facets[j], key = ref1[0], value = ref1[1];
      key_rpr = this.encode_buffer(db, key, encoding);
      value_rpr = this.encode_buffer(db, value, encoding);
      b.push([key_rpr, value_rpr]);
    }
    b = CND.columnify(b, columnify_settings);
    return a + '\n' + b;
  };

  this._compile_encodings = function() {
    var chrs_of, encoding, length, name, ref;
    chrs_of = function(text) {
      var chr;
      text = text.split(/([\ud800-\udbff].|.)/);
      return (function() {
        var i, len, results;
        results = [];
        for (i = 0, len = text.length; i < len; i++) {
          chr = text[i];
          if (chr !== '') {
            results.push(chr);
          }
        }
        return results;
      })();
    };
    ref = this.encodings;
    for (name in ref) {
      encoding = ref[name];
      encoding = chrs_of(encoding.replace(/\n+/g, ''));
      if ((length = encoding.length) !== 256) {
        throw new Error("expected 256 characters, found " + length + " in encoding " + (rpr(name)));
      }
      this.encodings[name] = encoding;
    }
    return null;
  };

  this._compile_encodings();

  if (module.parent == null) {
    docopt = (require('coffeenode-docopt')).docopt;
    version = (require('../package.json'))['version'];
    filename = (require('path')).basename(__filename);
    usage = "Usage: " + filename + " <db-route> [--limit=N]\n       " + filename + " <db-route> ( [<prefix>] | keys [<prefix>] | prefixes [<chrs>] ) [--limit=N]\n\nOptions:\n  -l, --limit\n  -h, --help\n  -v, --version";

    /*
           #{filename} pos [--sample]
           #{filename} so [--db] [--limit] [--stdout] [<prefix>]
           #{filename} os [--db] [--limit] [--stdout] [<prefix>]
           #{filename} x
           #{filename} y
           #{filename} q <query0> [+|-] <query1>
           #{filename} sql
           #{filename} count
     */
    cli_options = docopt(usage, {
      version: version,
      help: function(left, collected) {
        urge(left);
        help(collected);
        help('\n' + usage);
        return process.exit();
      }
    });
    dump_settings = {
      limit: Infinity,
      mode: 'keys',
      colors: process.stdout.isTTY ? true : false,
      chrs: 3
    };
    dump_settings['route'] = cli_options['<db-route>'];
    if ((limit = cli_options['--limit'])) {
      dump_settings['limit'] = parseInt(limit, 10);
    }
    if (cli_options['prefixes']) {
      dump_settings['mode'] = 'prefixes';
    }
    if ((chrs = cli_options['<chrs>'])) {
      dump_settings['chrs'] = parseInt(chrs, 10);
    }
    if ((prefix = cli_options['<prefix>']) != null) {
      dump_settings['prefix'] = prefix;
    }
    db = HOLLERITH.new_db(dump_settings['route']);
    help("using LevelDB at " + dump_settings['route']);
    this.dump(db, dump_settings);
  }

}).call(this);

//# sourceMappingURL=data:application/json;base64,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QSxDQUFVLElBQVYsRUFBZ0IsRUFBaEIsQ0FBaEMsQ0FBQTtLQXRDQTtBQXVDQSxJQUFBLElBQXdDLDBDQUF4QztBQUFBLE1BQUEsYUFBZSxDQUFBLFFBQUEsQ0FBZixHQUE4QixNQUE5QixDQUFBO0tBdkNBO0FBQUEsSUF5Q0EsRUFBQSxHQUFLLFNBQVMsQ0FBQyxNQUFWLENBQWlCLGFBQWUsQ0FBQSxPQUFBLENBQWhDLENBekNMLENBQUE7QUFBQSxJQTRDQSxJQUFBLENBQUssbUJBQUEsR0FBb0IsYUFBZSxDQUFBLE9BQUEsQ0FBeEMsQ0E1Q0EsQ0FBQTtBQUFBLElBNkNBLElBQUMsQ0FBQSxJQUFELENBQU0sRUFBTixFQUFVLGFBQVYsQ0E3Q0EsQ0FIRjtHQTFQQTtBQUFBIiwiZmlsZSI6ImR1bXAuanMiLCJzb3VyY2VSb290IjoiL3NvdXJjZS8iLCJzb3VyY2VzQ29udGVudCI6WyJcblxuXG4jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcbm5qc19wYXRoICAgICAgICAgICAgICAgICAgPSByZXF1aXJlICdwYXRoJ1xuIyBuanNfZnMgICAgICAgICAgICAgICAgICAgID0gcmVxdWlyZSAnZnMnXG5qb2luICAgICAgICAgICAgICAgICAgICAgID0gbmpzX3BhdGguam9pblxuIy4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uXG5DTkQgICAgICAgICAgICAgICAgICAgICAgID0gcmVxdWlyZSAnY25kJ1xucnByICAgICAgICAgICAgICAgICAgICAgICA9IENORC5ycHJcbmJhZGdlICAgICAgICAgICAgICAgICAgICAgPSAnSE9MTEVSSVRIL2R1bXAnXG5sb2cgICAgICAgICAgICAgICAgICAgICAgID0gQ05ELmdldF9sb2dnZXIgJ3BsYWluJywgICAgIGJhZGdlXG5pbmZvICAgICAgICAgICAgICAgICAgICAgID0gQ05ELmdldF9sb2dnZXIgJ2luZm8nLCAgICAgIGJhZGdlXG53aGlzcGVyICAgICAgICAgICAgICAgICAgID0gQ05ELmdldF9sb2dnZXIgJ3doaXNwZXInLCAgIGJhZGdlXG5hbGVydCAgICAgICAgICAgICAgICAgICAgID0gQ05ELmdldF9sb2dnZXIgJ2FsZXJ0JywgICAgIGJhZGdlXG5kZWJ1ZyAgICAgICAgICAgICAgICAgICAgID0gQ05ELmdldF9sb2dnZXIgJ2RlYnVnJywgICAgIGJhZGdlXG53YXJuICAgICAgICAgICAgICAgICAgICAgID0gQ05ELmdldF9sb2dnZXIgJ3dhcm4nLCAgICAgIGJhZGdlXG5oZWxwICAgICAgICAgICAgICAgICAgICAgID0gQ05ELmdldF9sb2dnZXIgJ2hlbHAnLCAgICAgIGJhZGdlXG51cmdlICAgICAgICAgICAgICAgICAgICAgID0gQ05ELmdldF9sb2dnZXIgJ3VyZ2UnLCAgICAgIGJhZGdlXG5lY2hvICAgICAgICAgICAgICAgICAgICAgID0gQ05ELmVjaG8uYmluZCBDTkRcbiMuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLlxuIyBieXRld2lzZSAgICAgICAgICAgICAgICAgID0gcmVxdWlyZSAnYnl0ZXdpc2UnXG4jIHRocm91Z2ggICAgICAgICAgICAgICAgICAgPSByZXF1aXJlICd0aHJvdWdoMidcbiMgTGV2ZWxCYXRjaCAgICAgICAgICAgICAgICA9IHJlcXVpcmUgJ2xldmVsLWJhdGNoLXN0cmVhbSdcbiMgQmF0Y2hTdHJlYW0gICAgICAgICAgICAgICA9IHJlcXVpcmUgJ2JhdGNoLXN0cmVhbSdcbiMgcGFyYWxsZWwgICAgICAgICAgICAgICAgICA9IHJlcXVpcmUgJ2NvbmN1cnJlbnQtd3JpdGFibGUnXG5EICAgICAgICAgICAgICAgICAgICAgICAgID0gcmVxdWlyZSAncGlwZWRyZWFtczInXG4kICAgICAgICAgICAgICAgICAgICAgICAgID0gRC5yZW1pdC5iaW5kIERcbiMuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLlxubmV3X2RiICAgICAgICAgICAgICAgICAgICA9IHJlcXVpcmUgJ2xldmVsJ1xuIyBuZXdfbGV2ZWxncmFwaCAgICAgICAgICAgID0gcmVxdWlyZSAnbGV2ZWxncmFwaCdcbiMgZGIgICAgICAgICAgICAgICAgICAgICAgICA9IG5ld19sZXZlbGdyYXBoICcvdG1wL2xldmVsZ3JhcGgnXG5IT0xMRVJJVEggICAgICAgICAgICAgICAgID0gcmVxdWlyZSAnLi9tYWluJ1xuxpIgICAgICAgICAgICAgICAgICAgICAgICAgPSBDTkQuZm9ybWF0X251bWJlci5iaW5kIENORFxuXG4jICdAJ1xuXG4jIGJhdGNoZWRfZGIgID0gbmV3IExldmVsQmF0Y2ggbGV2ZWxfZGJcbiMgaW5wdXQgICAgICAgPSBELmNyZWF0ZV90aHJvdWdoc3RyZWFtKClcblxuXG4jIGlucHV0XG4jICAgLnBpcGUgJCAoIGtleSwgc2VuZCApID0+XG4jICAgICBzZW5kIHsgdHlwZTogJ3B1dCcsIGtleToga2V5LCB2YWx1ZTogMSwgfVxuIyAgIC5waXBlIG5ldyBCYXRjaFN0cmVhbSBzaXplOiAxMDBcbiMgICAucGlwZSBwYXJhbGxlbCBiYXRjaGVkX2RiLCAxMFxuXG5cbiMgdHJpcGxlID0geyBzdWJqZWN0OiBcIuacrVwiLCBwcmVkaWNhdGU6IFwic3Ryb2tlb3JkZXI6OmZvb2JhclwiLCBvYmplY3Q6IFwiMTIzNDVcIiB9XG4jIGRiLnB1dCB0cmlwbGUsICggZXJyb3IgKSAtPlxuIyAgIHRocm93IGVycm9yIGlmIGVycm9yP1xuXG5cbiMtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuQF9maXJzdF9jaHJzX29mID0gKCB0ZXh0LCBuICkgLT5cbiAgIyMjXG4gIGZvciB0ZXh0IGluIFsgJ2FiYycsICfkuK3lnIvnmofluJ0nLCAnYfCqnIRiJywgXVxuICAgIGZvciBuIGluIFsgMCAuLiA1IF1cbiAgICAgIGRlYnVnICfCqURMT1RzJywgbiwgcnByIHByZWZpeF9vZiB0ZXh0LCBuXG4gICMjI1xuICByZXR1cm4gJycgaWYgbiA8PSAwXG4gIGNvdW50ICAgICA9IDBcbiAgaWR4ICAgICAgID0gLTFcbiAgbGFzdF9pZHggID0gdGV4dC5sZW5ndGggLSAxXG4gIHdoaWxlIGNvdW50IDwgblxuICAgIGJyZWFrIGlmIGlkeCA+PSBsYXN0X2lkeFxuICAgIGlkeCAgICArPSArMVxuICAgIGlkeCAgICArPSArMSBpZiAoIHRleHQuY29kZVBvaW50QXQgaWR4ICkgPiAweGZmZmZcbiAgICBjb3VudCAgKz0gMVxuICByZXR1cm4gWyB0ZXh0WyAuLiBpZHggXSwgaWR4ICsgMSwgXVxuXG4jLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiMjIyBUQUlOVCBjb2RlIGR1cGxpY2F0aW9uICMjI1xuQF8kZHVtcF9mYWNldHMgPSAoIGRiLCBpbnB1dCwgc2V0dGluZ3MgKSAtPlxuICB7IGxpbWl0LCBjb2xvcnMsIGNocnMsIH0gPSBzZXR0aW5nc1xuICBjb3VudCAgICAgPSAwXG4gICMuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi5cbiAgcmV0dXJuICQgKCBmYWNldCwgc2VuZCwgZW5kICkgPT5cbiAgICAjLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLlxuICAgIGlmIGZhY2V0P1xuICAgICAgY291bnQgKz0gKzFcbiAgICAgIHsga2V5LCB2YWx1ZSwgfSA9IGZhY2V0XG4gICAgICBpZiBjb3VudCA8IGxpbWl0XG4gICAgICAgIGtleV9ycHIgICAgID0gSE9MTEVSSVRILnVybF9mcm9tX2tleSBkYiwgSE9MTEVSSVRILl9kZWNvZGVfa2V5IGRiLCBrZXlcbiAgICAgICAgcGhyYXNldHlwZSAgPSBrZXlfcnByWyAwIC4uIDIgXVxuICAgICAgICBpZiBjb2xvcnNcbiAgICAgICAgICBrZXlfcnByICAgPSAoIENORC5wbHVtIHBhcnQgZm9yIHBhcnQgaW4ga2V5X3Jwci5zcGxpdCAnfCcgKS5qb2luIENORC5ncmV5ICd8J1xuICAgICAgICBpZiBwaHJhc2V0eXBlIGlzICdzcG8nIGFuZCB2YWx1ZT9cbiAgICAgICAgICB2YWx1ZSAgICAgPSB2YWx1ZS50b1N0cmluZyAndXRmLTgnXG4gICAgICAgICAgdmFsdWVfcnByID0gKCBycHIgdmFsdWUgKS5yZXBsYWNlIC9eJyguKiknJC8sICckMSdcbiAgICAgICAgICB2YWx1ZV9ycHIgPSBDTkQub3JhbmdlIHZhbHVlX3JwciBpZiBjb2xvcnNcbiAgICAgICAgZWxzZVxuICAgICAgICAgIHZhbHVlX3JwciA9ICcnXG4gICAgICAgIGxvZyAoIENORC5ncmV5IMaSIGNvdW50ICksIGtleV9ycHIgKyB2YWx1ZV9ycHJcbiAgICAgICAgIyBlbHNlXG4gICAgICAgICMgICBlY2hvICggxpIgY291bnQgKSwga2V5XG4gICAgICAgIHNlbmQga2V5XG4gICAgICAjLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi5cbiAgICAgIGlucHV0LmVtaXQgJ2VuZCcgaWYgY291bnQgPj0gbGltaXRcbiAgICAjLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLlxuICAgIGlmIGVuZD9cbiAgICAgIGhlbHAgXCJkdW1wZWQgI3vGkiBjb3VudH0gZW50cmllc1wiXG4gICAgICBwcm9jZXNzLmV4aXQoKVxuXG4jLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiMjIyBUQUlOVCBjb2RlIGR1cGxpY2F0aW9uICMjI1xuQF8kZHVtcF9wcmVmaXhlcyA9ICggZGIsIGlucHV0LCBzZXR0aW5ncyApIC0+XG4gIHsgbGltaXQsIGNvbG9ycywgY2hycywgfSA9IHNldHRpbmdzXG4gIGtleV9jb3VudCAgICAgPSAwXG4gIHByZWZpeF9jb3VudCAgPSAwXG4gIHByZWZpeGVzICAgICAgPSB7fVxuICB0MCAgICAgICAgICAgID0gK25ldyBEYXRlKClcbiAgIy4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLlxuICByZXR1cm4gJCAoIGtleSwgc2VuZCwgZW5kICkgPT5cbiAgICAjLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLlxuICAgIGlmIGtleT9cbiAgICAgIGtleV9jb3VudCArPSArMVxuICAgICAgaWYga2V5X2NvdW50IDwgbGltaXRcbiAgICAgICAga2V5X3JwciA9IEhPTExFUklUSC51cmxfZnJvbV9rZXkgZGIsIEhPTExFUklUSC5fZGVjb2RlX2tleSBkYiwga2V5XG4gICAgICAgIFsgcHJlZml4LCBzdWZmaXhfaWR4LCBdID0gQF9maXJzdF9jaHJzX29mIGtleV9ycHIsIGNocnNcbiAgICAgICAgdW5sZXNzIHByZWZpeGVzWyBwcmVmaXggXT9cbiAgICAgICAgICBwcmVmaXhfY291bnQgICAgICAgKz0gKzFcbiAgICAgICAgICBwcmVmaXhlc1sgcHJlZml4IF0gID0gMVxuICAgICAgICAgIGlmIGNvbG9yc1xuICAgICAgICAgICAgbG9nICggQ05ELmdyZXkgxpIga2V5X2NvdW50ICksICggQ05ELnBsdW0gcHJlZml4ICkgKyAoIENORC5ncmV5IGtleV9ycHJbIHN1ZmZpeF9pZHggLi4gXSApXG4gICAgICAgICAgZWxzZVxuICAgICAgICAgICAgZWNobyAoIMaSIGtleV9jb3VudCApLCBwcmVmaXgsIGtleV9ycHJbIHN1ZmZpeF9pZHggLi4gXVxuICAgICAgICAgIHNlbmQga2V5XG4gICAgICAjLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi5cbiAgICAgIGlucHV0LmVtaXQgJ2VuZCcgaWYga2V5X2NvdW50ID49IGxpbWl0XG4gICAgIy4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi5cbiAgICBpZiBlbmQ/XG4gICAgICB0MSAgICAgID0gK25ldyBEYXRlKClcbiAgICAgIGR0ICAgICAgPSB0MSAtIHQwXG4gICAgICBkdF9zICAgID0gKCBkdCAvICAxMDAwICkudG9GaXhlZCAzXG4gICAgICBkdF9taW4gID0gKCBkdCAvIDYwMDAwICkudG9GaXhlZCAxXG4gICAgICBoZWxwIFwiZHVtcGVkICN7xpIga2V5X2NvdW50fSBlbnRyaWVzIGluICN7ZHRfc31zICgje2R0X21pbn1taW4pXCJcbiAgICAgIGhlbHAgXCJmb3VuZCAje8aSIHByZWZpeF9jb3VudH0gZGlzdGluY3QgcHJlZml4ZXMgd2l0aCB1cCB0byAje8aSIGNocnN9IGNoYXJhY3RlcnNcIlxuICAgICAgcHJvY2Vzcy5leGl0KClcblxuIy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5AZHVtcCA9ICggZGIsIHNldHRpbmdzICkgLT5cbiAgeyBtb2RlLCBwcmVmaXgsIH0gPSBzZXR0aW5nc1xuICBzd2l0Y2ggc2V0dGluZ3NbICdtb2RlJyBdXG4gICAgd2hlbiAna2V5cydcbiAgICAgIGlmIHByZWZpeD9cbiAgICAgICAgZGVidWcgJ8KpN2ZIdnonLCBycHIgcHJlZml4XG4gICAgICAgICMjIyBUQUlOVCB1c2UgbGlicmFyeSBtZXRob2QgIyMjXG4gICAgICAgIGtleSA9IHByZWZpeC5zcGxpdCAnfCdcbiAgICAgICAgcXVlcnkgPSBIT0xMRVJJVEguX3F1ZXJ5X2Zyb21fcHJlZml4IGRiLCBrZXksICcqJ1xuICAgICAgICB1cmdlICfCqWcxeTZKJywga2V5XG4gICAgICAgIHVyZ2UgJ8KpZzF5NkonLCBxdWVyeVsgJ2d0ZScgXVxuICAgICAgICB1cmdlICfCqWcxeTZKJywgcXVlcnlbICdsdGUnIF1cbiAgICAgICAgaW5wdXQgPSBkYlsgJyVzZWxmJyBdLmNyZWF0ZVJlYWRTdHJlYW0gcXVlcnlcbiAgICAgIGVsc2VcbiAgICAgICAgaW5wdXQgPSBkYlsgJyVzZWxmJyBdLmNyZWF0ZVJlYWRTdHJlYW0oKVxuICAgICAgd29ya2VyICA9IEBfJGR1bXBfZmFjZXRzIGRiLCBpbnB1dCwgc2V0dGluZ3NcbiAgICB3aGVuICdwcmVmaXhlcydcbiAgICAgIGlucHV0ICAgPSBkYlsgJyVzZWxmJyBdLmNyZWF0ZUtleVN0cmVhbSgpXG4gICAgICB3b3JrZXIgID0gQF8kZHVtcF9wcmVmaXhlcyBkYiwgaW5wdXQsIHNldHRpbmdzXG4gICAgZWxzZSB0aHJvdyBuZXcgRXJyb3IgXCJ1bmtub3duIG1vZGUgI3tycHIgbW9kZX1cIlxuICBpbnB1dFxuICAgIC5waXBlIHdvcmtlclxuXG5cbiM9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuI1xuIy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5AZW5jb2RpbmdzID1cblxuICAjLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uXG4gIGRiY3MyOiBcIlwiXCJcbiAgICDik6rikaDikaHikaLikaPikaTikaXikabikafikajikanikarikavikazika3ika7ika/ikbDikbHikbLikbPjiZHjiZLjiZPjiZTjiZXjiZbjiZfjiZjjiZnjiZrjiZtcbiAgICDjiZzvvIHvvILvvIPvvITvvIXvvIbvvIfvvIjvvInvvIrvvIvvvIzvvI3vvI7vvI/vvJDvvJHvvJLvvJPvvJTvvJXvvJbvvJfvvJjvvJnvvJrvvJvvvJzvvJ3vvJ7vvJ9cbiAgICDvvKDvvKHvvKLvvKPvvKTvvKXvvKbvvKfvvKjvvKnvvKrvvKvvvKzvvK3vvK7vvK/vvLDvvLHvvLLvvLPvvLTvvLXvvLbvvLfvvLjvvLnvvLrvvLvvvLzvvL3vvL7vvL9cbiAgICDvvYDvvYHvvYLvvYPvvYTvvYXvvYbvvYfvvYjvvYnvvYrvvYvvvYzvvY3vvY7vvY/vvZDvvZHvvZLvvZPvvZTvvZXvvZbvvZfvvZjvvZnvvZrvvZvvvZzvvZ3vvZ7jiaBcbiAgICDjiZ3jiZ7jiZ/jirHjirLjirPjirTjirXjirbjirfjirjjirnjirrjirvjirzjir3jir7jir/ji5Dji5Hji5Lji5Pji5Tji5Xji5bji5fji5jji5nji5rji5vji5zji51cbiAgICDji57ji5/ji6Dji6Hji6Lji6Pji6Tji6Xji6bji6fji6jji6nji6rji6vji6zji63ji67ji6/ji7Dji7Hji7Lji7Pji7Tji7Xji7bji7fji7jji7nji7rji7vji7zji71cbiAgICDji77jiorjiovjiozjio3jio7jio/jipDjipHjipLjipPjipTjipXjipbjipfjipjjipnjiprjipvjipzjip3jip7jip/jiqDjiqHjiqLjiqPjiqTjiqXjiqbjiqfjiqhcbiAgICDjiqnjiqrjiqvjiqzjiq3jiq7jiq/jirDjioDjioHjioLjioPjioTjioXjiobjiofjiojjionjiYjjiYnjiYrjiYvjiYzjiY3jiY7jiY/ik7Xik7bik7fik7jik7njgJNcbiAgICBcIlwiXCJcbiAgIy4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLlxuICBhbGVwaDogXCJcIlwiXG4gICAg0JHQlNCY0JvQptCn0KjQrdCuxobGi8aPxpDGlMalxqfGuM+IxZDFkcWSxZPFisWBxYLQr8mUyZjJkMmVyZnJnlxuICAgIOKQoyFcIiMkJSYnKCkqKywtLi8wMTIzNDU2Nzg5Ojs8PT4/XG4gICAgQEFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaW1xcXFxdXl9cbiAgICBgYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXp7fH1+z4lcbiAgICDOk86UzpjOm86ezqDOo86mzqjOqc6xzrLOs860zrXOts63zrjOuc66zrvOvM69zr7PgM+Bz4LPg8+Ez4XPhs+HXG4gICAg0JbCocKiwqPCpMKlwqbCp8KowqnCqsKrwqzQr8Kuwq/CsMKxwrLCs8K0wrXCtsK3wrjCucK6wrvCvMK9wr7Cv1xuICAgIMOAw4HDgsODw4TDhcOGw4fDiMOJw4rDi8OMw43DjsOPw5DDkcOSw5PDlMOVw5bDl8OYw5nDmsObw5zDncOew59cbiAgICDDoMOhw6LDo8Okw6XDpsOnw6jDqcOqw6vDrMOtw67Dr8Oww7HDssOzw7TDtcO2w7fDuMO5w7rDu8O8w73DvsO/XG4gICAgXCJcIlwiXG4gICMuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi5cbiAgcmRjdG46IFwiXCJcIlxuICAgIOKIh+KJoeKJoeKJoeKJoeKJoeKJoeKJoeKJoeKJoeKJoeKJoeKJoeKJoeKJoeKJoeKJoeKJoeKJoeKJoeKJoeKJoeKJoeKJoeKJoeKJoeKJoeKJoeKJoeKJoeKJoeKJoVxuICAgIOKQoyFcIiMkJSYnKCkqKywtLi8wMTIzNDU2Nzg5Ojs8PT4/XG4gICAgQEFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaW1xcXFxdXl9cbiAgICBgYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXp7fH1+4omhXG4gICAg4oiD4oiD4oiD4oiD4oiD4oiD4oiD4oiD4oiD4oiD4oiD4oiD4oiD4oiD4oiD4oiD4oiD4oiD4oiD4oiD4oiD4oiD4oiD4oiD4oiD4oiD4oiD4oiD4oiD4oiD4oiD4oiDXG4gICAg4oiD4oiDwqLCo8KkwqXCpsKnwqjCqcKqwqvCrNCvwq7Cr8KwwrHCssKzwrTCtcK2wrfCuMK5wrrCu8K8wr3CvsK/XG4gICAgw4DDgcOCw4PDhMOFw4bDh8OIw4nDisOLw4zDjcOOw4/DkMORw5LDk8OUw5XDlsOXw5jDmcOaw5vDnMOdw57Dn1xuICAgIMOgw6HDosOjw6TDpcOmw6fDqMOpw6rDq8Osw63DrsOvw7DDscOy4omi4omi4omi4omi4omi4omi4omi4omi4omi4omi4omi4omizpRcbiAgICBcIlwiXCJcblxuXG4jLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbkBycHJfb2ZfYnVmZmVyID0gKCBkYiwgYnVmZmVyLCBlbmNvZGluZyApIC0+XG4gIHJldHVybiAoIHJwciBidWZmZXIgKSArICcgJyArICBAZW5jb2RlX2J1ZmZlciBkYiwgYnVmZmVyLCBlbmNvZGluZ1xuXG4jLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbkBlbmNvZGVfYnVmZmVyID0gKCBkYiwgYnVmZmVyLCBlbmNvZGluZyA9ICdyZGN0bicgKSAtPlxuICBlbmNvZGluZyA9IEBlbmNvZGluZ3NbIGVuY29kaW5nIF0gdW5sZXNzIENORC5pc2FfbGlzdCBlbmNvZGluZ1xuICByZXR1cm4gKCBlbmNvZGluZ1sgYnVmZmVyWyBpZHggXSBdIGZvciBpZHggaW4gWyAwIC4uLiBidWZmZXIubGVuZ3RoIF0gKS5qb2luICcnXG5cbiMtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuQHJwcl9vZl9mYWNldHMgPSAoIGRiLCBmYWNldHMsIGVuY29kaW5nICkgLT5cbiAgY29sdW1uaWZ5X3NldHRpbmdzID1cbiAgICBwYWRkaW5nQ2hyOiAgICAgICAnICdcbiAgICBjb2x1bW5TcGxpdHRlcjogICAnIOKUiiAnXG4gICAgIyBjb2x1bW5zOiAgICAgICAgICBbICdrZXknLCAndmFsdWUnLCBdXG4gICAgIyBtaW5XaWR0aDogMTIwXG4gIGEgPSBbXVxuICBiID0gW11cbiAgZm9yIFsga2V5LCB2YWx1ZSwgXSBpbiBmYWNldHNcbiAgICBrZXlfcnByICAgPSAoIHJwciBrZXkgICApLnJlcGxhY2UgL148QnVmZmVyICguKik+JC8sICckMSdcbiAgICB2YWx1ZV9ycHIgPSAoIHJwciB2YWx1ZSApLnJlcGxhY2UgL148QnVmZmVyICguKik+JC8sICckMSdcbiAgICBhLnB1c2ggWyBrZXlfcnByLCB2YWx1ZV9ycHIsIF1cbiAgYSA9IENORC5jb2x1bW5pZnkgYSwgY29sdW1uaWZ5X3NldHRpbmdzXG4gIGZvciBbIGtleSwgdmFsdWUsIF0gaW4gZmFjZXRzXG4gICAga2V5X3JwciAgID0gQGVuY29kZV9idWZmZXIgZGIsIGtleSwgICBlbmNvZGluZ1xuICAgIHZhbHVlX3JwciA9IEBlbmNvZGVfYnVmZmVyIGRiLCB2YWx1ZSwgZW5jb2RpbmdcbiAgICBiLnB1c2ggWyBrZXlfcnByLCB2YWx1ZV9ycHIsIF1cbiAgYiA9IENORC5jb2x1bW5pZnkgYiwgY29sdW1uaWZ5X3NldHRpbmdzXG4gIHJldHVybiBhICsgJ1xcbicgKyBiXG5cbiMtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuQF9jb21waWxlX2VuY29kaW5ncyA9IC0+XG4gICMuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi5cbiAgY2hyc19vZiA9ICggdGV4dCApIC0+XG4gICAgdGV4dCA9IHRleHQuc3BsaXQgLyhbXFx1ZDgwMC1cXHVkYmZmXS58LikvXG4gICAgcmV0dXJuICggY2hyIGZvciBjaHIgaW4gdGV4dCB3aGVuIGNociBpc250ICcnIClcbiAgIy4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLlxuICBmb3IgbmFtZSwgZW5jb2Rpbmcgb2YgQGVuY29kaW5nc1xuICAgIGVuY29kaW5nID0gY2hyc19vZiBlbmNvZGluZy5yZXBsYWNlIC9cXG4rL2csICcnXG4gICAgdW5sZXNzICggbGVuZ3RoID0gZW5jb2RpbmcubGVuZ3RoICkgaXMgMjU2XG4gICAgICB0aHJvdyBuZXcgRXJyb3IgXCJleHBlY3RlZCAyNTYgY2hhcmFjdGVycywgZm91bmQgI3tsZW5ndGh9IGluIGVuY29kaW5nICN7cnByIG5hbWV9XCJcbiAgICBAZW5jb2RpbmdzWyBuYW1lIF0gPSBlbmNvZGluZ1xuICByZXR1cm4gbnVsbFxuQF9jb21waWxlX2VuY29kaW5ncygpXG5cblxuXG5cbiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xudW5sZXNzIG1vZHVsZS5wYXJlbnQ/XG5cbiAgIy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICBkb2NvcHQgICAgPSAoIHJlcXVpcmUgJ2NvZmZlZW5vZGUtZG9jb3B0JyApLmRvY29wdFxuICB2ZXJzaW9uICAgPSAoIHJlcXVpcmUgJy4uL3BhY2thZ2UuanNvbicgKVsgJ3ZlcnNpb24nIF1cbiAgZmlsZW5hbWUgID0gKCByZXF1aXJlICdwYXRoJyApLmJhc2VuYW1lIF9fZmlsZW5hbWVcbiAgICAgICAgICMgI3tmaWxlbmFtZX0gcG9zIFstLXNhbXBsZV0gWzxwcmVmaXg+XVxuICB1c2FnZSAgICAgPSBcIlwiXCJcbiAgVXNhZ2U6ICN7ZmlsZW5hbWV9IDxkYi1yb3V0ZT4gWy0tbGltaXQ9Tl1cbiAgICAgICAgICN7ZmlsZW5hbWV9IDxkYi1yb3V0ZT4gKCBbPHByZWZpeD5dIHwga2V5cyBbPHByZWZpeD5dIHwgcHJlZml4ZXMgWzxjaHJzPl0gKSBbLS1saW1pdD1OXVxuXG4gIE9wdGlvbnM6XG4gICAgLWwsIC0tbGltaXRcbiAgICAtaCwgLS1oZWxwXG4gICAgLXYsIC0tdmVyc2lvblxuICBcIlwiXCJcbiAgIyMjXG4gICAgICAgICAje2ZpbGVuYW1lfSBwb3MgWy0tc2FtcGxlXVxuICAgICAgICAgI3tmaWxlbmFtZX0gc28gWy0tZGJdIFstLWxpbWl0XSBbLS1zdGRvdXRdIFs8cHJlZml4Pl1cbiAgICAgICAgICN7ZmlsZW5hbWV9IG9zIFstLWRiXSBbLS1saW1pdF0gWy0tc3Rkb3V0XSBbPHByZWZpeD5dXG4gICAgICAgICAje2ZpbGVuYW1lfSB4XG4gICAgICAgICAje2ZpbGVuYW1lfSB5XG4gICAgICAgICAje2ZpbGVuYW1lfSBxIDxxdWVyeTA+IFsrfC1dIDxxdWVyeTE+XG4gICAgICAgICAje2ZpbGVuYW1lfSBzcWxcbiAgICAgICAgICN7ZmlsZW5hbWV9IGNvdW50XG4gICMjI1xuICBjbGlfb3B0aW9ucyA9IGRvY29wdCB1c2FnZSwgdmVyc2lvbjogdmVyc2lvbiwgaGVscDogKCBsZWZ0LCBjb2xsZWN0ZWQgKSAtPlxuICAgIHVyZ2UgbGVmdFxuICAgIGhlbHAgY29sbGVjdGVkXG4gICAgaGVscCAnXFxuJyArIHVzYWdlXG4gICAgcHJvY2Vzcy5leGl0KClcbiAgIy4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLlxuICBkdW1wX3NldHRpbmdzID1cbiAgICBsaW1pdDogICAgICAgICAgICBJbmZpbml0eVxuICAgIG1vZGU6ICAgICAgICAgICAgICdrZXlzJ1xuICAgIGNvbG9yczogICAgICAgICAgIGlmIHByb2Nlc3Muc3Rkb3V0LmlzVFRZIHRoZW4gdHJ1ZSBlbHNlIGZhbHNlXG4gICAgY2hyczogICAgICAgICAgICAgM1xuICAjLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uXG4gIGR1bXBfc2V0dGluZ3NbICdyb3V0ZScgICAgXSA9IGNsaV9vcHRpb25zWyAnPGRiLXJvdXRlPicgXVxuICBkdW1wX3NldHRpbmdzWyAnbGltaXQnICAgIF0gPSAoIHBhcnNlSW50IGxpbWl0LCAxMCApIGlmICggbGltaXQgPSBjbGlfb3B0aW9uc1sgJy0tbGltaXQnIF0gKVxuICBkdW1wX3NldHRpbmdzWyAnbW9kZScgICAgIF0gPSAncHJlZml4ZXMnIGlmIGNsaV9vcHRpb25zWyAncHJlZml4ZXMnIF1cbiAgZHVtcF9zZXR0aW5nc1sgJ2NocnMnICAgICBdID0gKCBwYXJzZUludCAgY2hycywgMTAgKSBpZiAoICBjaHJzID0gY2xpX29wdGlvbnNbICAnPGNocnM+JyBdIClcbiAgZHVtcF9zZXR0aW5nc1sgJ3ByZWZpeCcgICBdID0gcHJlZml4IGlmICggcHJlZml4ID0gY2xpX29wdGlvbnNbICc8cHJlZml4PicgXSApP1xuICAjLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIGRiID0gSE9MTEVSSVRILm5ld19kYiBkdW1wX3NldHRpbmdzWyAncm91dGUnIF1cbiAgIyBkZWJ1ZyAnwqliRUllRScsIGNsaV9vcHRpb25zXG4gICMgaGVscCAnwqliRUllRScsIGR1bXBfc2V0dGluZ3NcbiAgaGVscCBcInVzaW5nIExldmVsREIgYXQgI3tkdW1wX3NldHRpbmdzWyAncm91dGUnIF19XCJcbiAgQGR1bXAgZGIsIGR1bXBfc2V0dGluZ3NcblxuICAjIGRlYnVnICfCqWxKOG5iJywgSE9MTEVSSVRILl9lbmNvZGUgbnVsbCwgMVxuICAjIGRlYnVnICfCqWxKOG5iJywgSE9MTEVSSVRILl9lbmNvZGUgbnVsbCwgWyAxLCBdXG4gICMgZGVidWcgJ8KpbEo4bmInLCBIT0xMRVJJVEguX2VuY29kZSBudWxsLCBbIDEsIHVuZGVmaW5lZCwgXVxuICAjIGxvZygpXG4gICMgZGVidWcgJ8KpbEo4bmInLCBIT0xMRVJJVEguX2VuY29kZSBudWxsLCAnMSdcbiAgIyBkZWJ1ZyAnwqlsSjhuYicsIEhPTExFUklUSC5fZW5jb2RlIG51bGwsIFsgJzEnLCBdXG4gICMgZGVidWcgJ8KpbEo4bmInLCBIT0xMRVJJVEguX3F1ZXJ5X2Zyb21fcHJlZml4IG51bGwsIDFcbiAgIyBkZWJ1ZyAnwqlsSjhuYicsIEhPTExFUklUSC5fcXVlcnlfZnJvbV9wcmVmaXggbnVsbCwgWyAxLCBdXG4gICMgZGVidWcgJ8KpbEo4bmInLCBIT0xMRVJJVEguX3F1ZXJ5X2Zyb21fcHJlZml4IG51bGwsICcxJ1xuICAjIGRlYnVnICfCqWxKOG5iJywgSE9MTEVSSVRILl9xdWVyeV9mcm9tX3ByZWZpeCBudWxsLCBbICcxJywgXVxuICAjIGRlYnVnICfCqWxKOG5iJywgSE9MTEVSSVRILl9lbmNvZGUgbnVsbCwgJ1xceDAwJ1xuICAjIGRlYnVnICfCqWxKOG5iJywgSE9MTEVSSVRILl9lbmNvZGUgbnVsbCwgJ1xceDAxJ1xuICAjIGRlYnVnICfCqWxKOG5iJywgSE9MTEVSSVRILl9lbmNvZGUgbnVsbCwgJ1xceDAyJ1xuICAjIGxvZygpXG5cbiAgIyBmb3IgY2lkIGluIFsgMHgwMCAuLiAweGZmIF1cbiAgIyAgIGRlYnVnICfCqWxKOG5iJywgKCAnMHgnICsgKCBpZiBjaWQgPD0gMHhmIHRoZW4gJzAnIGVsc2UgJycgKSArIGNpZC50b1N0cmluZyAxNiApLCBIT0xMRVJJVEguX2VuY29kZSBudWxsLCBbIFN0cmluZy5mcm9tQ29kZVBvaW50IGNpZCwgXVxuICAjIGRlYnVnICfCqXZma2t4JywgSE9MTEVSSVRILl9kZWNvZGVfa2V5IG51bGwsIEhPTExFUklUSC5lbmNvZGUgbnVsbCwgK0luZmluaXR5XG4gICMgZGVidWcgJ8KpdmZra3gnLCBIT0xMRVJJVEguX2RlY29kZV9rZXkgbnVsbCwgSE9MTEVSSVRILmVuY29kZSBudWxsLCAtSW5maW5pdHlcbiAgIyBkZWJ1ZyAnwql2ZmtreCcsIEhPTExFUklUSC5fZGVjb2RlX2tleSBudWxsLCBIT0xMRVJJVEguZW5jb2RlIG51bGwsIG51bGxcbiAgIyBkZWJ1ZyAnwql2ZmtreCcsIEhPTExFUklUSC5fZGVjb2RlX2tleSBudWxsLCBIT0xMRVJJVEguZW5jb2RlIG51bGwsIHVuZGVmaW5lZFxuICAjIENORC5saXN0ZW5fdG9fa2V5cyAoIFAuLi4gKSAtPlxuICAjICAgZGVidWcgJ8KpV09tbGonLCBQXG4gICMgcHJvY2Vzcy5zdGRpbi5yZXN1bWUoKVxuXG4gICMgZm9yIHRleHQgaW4gWyAnYWJjJywgJ+S4reWci+eah+W4nScsICdh8KqchGInLCBdXG4gICMgICBmb3IgbiBpbiBbIDAgLi4gNSBdXG4gICMgICAgIGRlYnVnICfCqURMT1RzJywgbiwgcnByIEBfZmlyc3RfY2hyc19vZiB0ZXh0LCBuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG4iXX0=
{"version":3,"sources":["tests.coffee"],"names":[],"mappings":"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","file":"tests.js","sourceRoot":"/source/","sourcesContent":["\n\n\n\n############################################################################################################\n### https://github.com/ddopson/node-segfault-handler ###\nSegfaultHandler = require 'segfault-handler'\nSegfaultHandler.registerHandler()\n# SegfaultHandler.causeSegfault()\n\n\n############################################################################################################\nnjs_path                  = require 'path'\n# njs_fs                    = require 'fs'\njoin                      = njs_path.join\n#...........................................................................................................\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'HOLLERITH/tests'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nsuspend                   = require 'coffeenode-suspend'\nstep                      = suspend.step\nafter                     = suspend.after\n# eventually                = suspend.eventually\n### TAINT experimentally using `later` in place of `setImmediate` ###\nlater                     = suspend.immediately\n#...........................................................................................................\ntest                      = require 'guy-test'\n#...........................................................................................................\nD                         = require 'pipedreams'\n$                         = D.remit.bind D\n$async                    = D.remit_async.bind D\n#...........................................................................................................\nHOLLERITH                 = require './main'\ndb                        = null\n#...........................................................................................................\nlevelup                   = require 'level'\nleveldown                 = require 'leveldown'\nCODEC                     = require 'hollerith-codec'\n#...........................................................................................................\nƒ                         = CND.format_number\n\n# #-----------------------------------------------------------------------------------------------------------\n# @_sort_list = ( list ) ->\n#   @_encode_list list\n#   list.sort Buffer.compare\n#   @_decode_list list\n#   return list\n\n\n#===========================================================================================================\n# HELPERS\n#-----------------------------------------------------------------------------------------------------------\nshow_keys_and_key_bfrs = ( keys, key_bfrs ) ->\n  f = ( p ) -> ( t for t in ( p.toString 'hex' ).split /(..)/ when t isnt '' ).join ' '\n  #.........................................................................................................\n  columnify_settings =\n    paddingChr: ' '\n  #.........................................................................................................\n  data      = []\n  key_bfrs  = ( f p for p in key_bfrs )\n  for key, idx in keys\n    key_txt = ( rpr key ).replace /\\\\u0000/g, '∇'\n    data.push { 'str': key_txt, 'bfr': key_bfrs[ idx ]}\n  help '\\n' + CND.columnify data, columnify_settings\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\nshow_db_entries = ( handler ) ->\n  input = db[ '%self' ].createReadStream()\n  input\n    .pipe D.$show()\n    .pipe $ ( { key, value, }, send ) => send [ key, value, ]\n    .pipe $ ( [ key, value, ], send ) => send [ key, value, ] unless HOLLERITH._is_meta db, key\n    .pipe $ ( [ key, value, ], send ) =>\n      # debug '©RluhF', ( HOLLERITH.CODEC.decode key ), ( JSON.parse value )\n      send [ key, value, ]\n    .pipe D.$collect()\n    .pipe $ ( facets, send ) =>\n      help '\\n' + HOLLERITH.DUMP.rpr_of_facets db, facets\n      # buffer = new Buffer JSON.stringify [ '开', '彡' ]\n      # debug '©GJfL6', HOLLERITH.CODEC.rpr_of_buffer null, buffer\n    .pipe D.$on_end => handler()\n\n#-----------------------------------------------------------------------------------------------------------\nget_new_db_name = ->\n  get_new_db_name.idx += +1\n  return \"/tmp/hollerith2-testdb-#{get_new_db_name.idx}\"\nget_new_db_name.idx = 0\n\n#-----------------------------------------------------------------------------------------------------------\nread_all_keys = ( db, handler ) ->\n  Z = []\n  input = db.createKeyStream()\n  input.on 'end', -> handler null, Z\n  input\n    .pipe $ ( data, send ) => Z.push data\n\n#-----------------------------------------------------------------------------------------------------------\nclear_leveldb = ( leveldb, handler ) ->\n  step ( resume ) =>\n    route = leveldb[ 'location' ]\n    yield leveldb.close resume\n    whisper \"closed LevelDB\"\n    yield leveldown.destroy route, resume\n    whisper \"destroyed LevelDB\"\n    yield leveldb.open resume\n    whisper \"re-opened LevelDB\"\n    # help \"erased and re-opened LevelDB at #{route}\"\n    handler null\n\n#-----------------------------------------------------------------------------------------------------------\n@_main = ( handler ) ->\n  db_route    = join __dirname, '..', 'dbs/tests'\n  db_settings = size: 500\n  db = HOLLERITH.new_db db_route, db_settings\n  test @, 'timeout': 2500\n\n#-----------------------------------------------------------------------------------------------------------\n@_feed_test_data = ( db, probes_idx, settings, handler ) ->\n  switch arity = arguments.length\n    when 3\n      handler   = settings\n      settings  = null\n    when 4\n      null\n    else\n      throw new Error \"expected 3 or 4 arguments, got #{arity}\"\n  #.........................................................................................................\n  step ( resume ) =>\n    yield HOLLERITH.clear db, resume\n    whisper \"writing test dataset ##{probes_idx} with settings #{rpr settings}\"\n    input = D.create_throughstream()\n    #.......................................................................................................\n    switch probes_idx\n      #-----------------------------------------------------------------------------------------------------\n      when -1\n        # settings =\n        input\n          .pipe HOLLERITH.$write db, settings\n          # .pipe D.$show()\n          .pipe D.$on_end ( end ) =>\n            whisper \"test data written\"\n            handler null\n            end()\n        #...................................................................................................\n        for n in [ 0 .. 1000 ]\n          key = [ \"number:#{n}\", \"square\", n ** 2, ]\n          input.write key\n          yield later resume\n        input.end()\n      #-----------------------------------------------------------------------------------------------------\n      when 0, 2, 3, 4, 5\n        input\n          .pipe HOLLERITH.$write db, settings\n          # .pipe D.$show()\n          .pipe D.$on_end ( end ) =>\n            whisper \"test data written\"\n            handler null\n            end()\n        #...................................................................................................\n        for probe in @_feed_test_data.probes[ probes_idx ]\n          # key = HOLLERITH.new_so_key db, probe...\n          # debug '©WV0j2', probe\n          input.write probe\n          yield later resume\n        input.end()\n      #-----------------------------------------------------------------------------------------------------\n      when 1\n        input\n          .pipe HOLLERITH.$write db, settings\n          # .pipe D.$show()\n          .pipe D.$on_end ( end ) =>\n            whisper \"test data written\"\n            end()\n            handler null\n        #...................................................................................................\n        for url_key in @_feed_test_data.probes[ probes_idx ]\n          key = HOLLERITH.key_from_url db, url_key\n          input.write key\n          yield later resume\n        input.end()\n      #-------------------------------------------------------------------------------------------------------\n      else return handler new Error \"illegal probes index #{rpr probes_idx}\"\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_feed_test_data.probes = []\n\n#...........................................................................................................\n### probes_idx == 0 ###\n@_feed_test_data.probes.push [\n  [ '𧷟1', 'guide/lineup/length',              1,                                   ]\n  [ '𧷟2', 'guide/lineup/length',              2,                                   ]\n  [ '𧷟3', 'guide/lineup/length',              3,                                   ]\n  [ '𧷟4', 'guide/lineup/length',              4,                                   ]\n  [ '𧷟', 'guide/lineup/length',               5,                                   ]\n  [ '𧷟6', 'guide/lineup/length',              6,                                   ]\n  [ '𧷟', 'cp/cid',                           163295,                               ]\n  [ '𧷟', 'guide/uchr/has',                   [ '八', '刀', '宀', '', '貝', ],      ]\n  [ '𧷟', 'rank/cjt',                         5432,                                 ]\n  [ '八', 'factor/strokeclass/wbf',          '34',                                  ]\n  [ '刀', 'factor/strokeclass/wbf',          '5(12)3',                              ]\n  [ '宀', 'factor/strokeclass/wbf',          '44',                                  ]\n  [ '', 'factor/strokeclass/wbf',          '12',                                  ]\n  [ '貝', 'factor/strokeclass/wbf',          '25(12)',                              ]\n  [ '八', 'rank/cjt',                         12541,                                ]\n  [ '刀', 'rank/cjt',                         12542,                                ]\n  [ '宀', 'rank/cjt',                         12543,                                ]\n  [ '', 'rank/cjt',                         12544,                                ]\n  [ '貝', 'rank/cjt',                         12545,                                ]\n  ]\n\n#...........................................................................................................\n### probes_idx == 1 ###\n@_feed_test_data.probes.push [\n  'so|glyph:劬|cp/fncr:u-cjk/52ac|0'\n  'so|glyph:邭|cp/fncr:u-cjk/90ad|0'\n  'so|glyph:𠴦|cp/fncr:u-cjk-xb/20d26|0'\n  'so|glyph:𤿯|cp/fncr:u-cjk-xb/24fef|0'\n  'so|glyph:𧑴|cp/fncr:u-cjk-xb/27474|0'\n  'so|glyph:𨒡|cp/fncr:u-cjk-xb/284a1|0'\n  'so|glyph:𪚧|cp/fncr:u-cjk-xb/2a6a7|0'\n  'so|glyph:𪚫|cp/fncr:u-cjk-xb/2a6ab|0'\n  'so|glyph:𤿯|strokeorder:352513553254|0'\n  'so|glyph:𠴦|strokeorder:3525141121|0'\n  'so|glyph:𨒡|strokeorder:35251454|0'\n  'so|glyph:邭|strokeorder:3525152|0'\n  'so|glyph:𪚫|strokeorder:352515251115115113541|0'\n  'so|glyph:𪚧|strokeorder:35251525112511511|0'\n  'so|glyph:𧑴|strokeorder:352515251214251214|0'\n  'so|glyph:劬|strokeorder:3525153|0'\n  ]\n\n#-----------------------------------------------------------------------------------------------------------\n### probes_idx == 2 ###\n@_feed_test_data.probes.push [\n  [ '丁', 'strokecount',     2,                          ]\n  [ '三', 'strokecount',     3,                          ]\n  [ '夫', 'strokecount',     5,                          ]\n  [ '國', 'strokecount',     11,                         ]\n  [ '形', 'strokecount',     7,                          ]\n  [ '丁', 'componentcount',  1,                          ]\n  [ '三', 'componentcount',  1,                          ]\n  [ '夫', 'componentcount',  1,                          ]\n  [ '國', 'componentcount',  4,                          ]\n  [ '形', 'componentcount',  2,                          ]\n  [ '丁', 'components',      [ '丁', ],                  ]\n  [ '三', 'components',      [ '三', ],                  ]\n  [ '夫', 'components',      [ '夫', ],                  ]\n  [ '國', 'components',      [ '囗', '戈', '口', '一', ], ]\n  [ '形', 'components',      [ '开', '彡', ],             ]\n  ]\n\n#-----------------------------------------------------------------------------------------------------------\n### probes_idx == 3 ###\n@_feed_test_data.probes.push [\n  [ '丁', 'isa',                         [ 'glyph', 'guide', ]       ]\n  [ '三', 'isa',                         [ 'glyph', 'guide', ]       ]\n  [ '夫', 'isa',                         [ 'glyph', 'guide', ]       ]\n  [ '國', 'isa',                         [ 'glyph', ]                ]\n  [ '形', 'isa',                         [ 'glyph', ]                ]\n  [ 'glyph:丁', 'strokeorder/count',     2,                          ]\n  [ 'glyph:三', 'strokeorder/count',     3,                          ]\n  [ 'glyph:夫', 'strokeorder/count',     5,                          ]\n  [ 'glyph:國', 'strokeorder/count',     11,                         ]\n  [ 'glyph:形', 'strokeorder/count',     7,                          ]\n  [ 'glyph:丁', 'guide/count',           1,                          ]\n  [ 'glyph:三', 'guide/count',           1,                          ]\n  [ 'glyph:夫', 'guide/count',           1,                          ]\n  [ 'glyph:國', 'guide/count',           4,                          ]\n  [ 'glyph:形', 'guide/count',           2,                          ]\n  [ 'glyph:丁', 'guide/lineup',          [ '丁', ],                  ]\n  [ 'glyph:三', 'guide/lineup',          [ '三', ],                  ]\n  [ 'glyph:夫', 'guide/lineup',          [ '夫', ],                  ]\n  [ 'glyph:國', 'guide/lineup',          [ '囗', '戈', '口', '一', ], ]\n  [ 'glyph:形', 'guide/lineup',          [ '开', '彡', ],             ]\n  ]\n\n#...........................................................................................................\n### probes_idx == 4 ###\n@_feed_test_data.probes.push [\n  [ '𧷟1', 'guide/lineup/length',              1,                                   ]\n  [ '𧷟2', 'guide/lineup/length',              2,                                   ]\n  [ '𧷟3', 'guide/lineup/length',              3,                                   ]\n  [ '𧷟4', 'guide/lineup/length',              4,                                   ]\n  [ '𧷟', 'guide/lineup/length',               5,                                   ]\n  [ '𧷟6', 'guide/lineup/length',              6,                                   ]\n  [ '𧷟', 'cp/cid',                           163295,                               ]\n  [ '𧷟', 'guide/uchr/has',                   [ '八', '刀', '宀', '', '貝', ],      ]\n  [ '𧷟', 'rank/cjt',                         5432,                                 ]\n  [ '八', 'factor/strokeclass/wbf',          '34',                                  ]\n  [ '刀', 'factor/strokeclass/wbf',          '5(12)3',                              ]\n  [ '宀', 'factor/strokeclass/wbf',          '44',                                  ]\n  [ '', 'factor/strokeclass/wbf',          '12',                                  ]\n  [ '貝', 'factor/strokeclass/wbf',          '25(12)',                              ]\n  [ '八', 'rank/cjt',                         12541,                                ]\n  [ '刀', 'rank/cjt',                         12542,                                ]\n  [ '宀', 'rank/cjt',                         12543,                                ]\n  [ '', 'rank/cjt',                         12544,                                ]\n  [ '貝', 'rank/cjt',                         12545,                                ]\n  [ '𧷟1', 'a', 42 ]\n  [ '𧷟1', 'ab', 42 ]\n  [ '𧷟1', 'guide', 'xxx' ]\n  [ '𧷟1', 'guide/', 'yyy' ]\n  [ '𧷟1', 'z', 42 ]\n  ]\n\n#-----------------------------------------------------------------------------------------------------------\n### probes_idx == 5 ###\n@_feed_test_data.probes.push [\n  [ '丁', 'strokecount',     2,                          ]\n  # [ '三', 'strokecount',     3,                          ]\n  # [ '夫', 'strokecount',     5,                          ]\n  # [ '國', 'strokecount',     11,                         ]\n  # [ '形', 'strokecount',     7,                          ]\n  [ '丁', 'componentcount',  1,                          ]\n  # [ '三', 'componentcount',  1,                          ]\n  # [ '夫', 'componentcount',  1,                          ]\n  # [ '國', 'componentcount',  4,                          ]\n  # [ '形', 'componentcount',  2,                          ]\n  [ '丁', 'components',      [ '丁', ],                  ]\n  # [ '三', 'components',      [ '三', ],                  ]\n  # [ '夫', 'components',      [ '夫', ],                  ]\n  # [ '國', 'components',      [ '囗', '戈', '口', '一', ], ]\n  # [ '形', 'components',      [ '开', '彡', ],             ]\n  # [ { type: 'route', value: '/foo/bar', }, 'mtime', new Date '2011-10-10T14:48:00Z', ]\n  [ { type: 'route', value: '/foo/bar', }, 'mtime', 123456789, ]\n  ]\n\n# pos|guide/kwic/sortcode\n\n# # [\n# # \"1027~~~~,00\",\"0156~~~~,01,0509~~~~,02,0000~~~~,03,--------,04,--------,05,--------,06,--------,07,--------,08,--------,09,--------,10,--------,11,--------,12,\"\n# # \"0156~~~~,01\",\"0509~~~~,02,0000~~~~,03,--------,04,--------,05,--------,06,--------,07,--------,08,--------,09,--------,10,--------,11,--------,12,1027~~~~,00,\"\n# # \"0509~~~~,02\",\"0000~~~~,03,--------,04,--------,05,--------,06,--------,07,--------,08,--------,09,--------,10,--------,11,--------,12,1027~~~~,00,0156~~~~,01,\"\n# # \"0000~~~~,03\",\"--------,04,--------,05,--------,06,--------,07,--------,08,--------,09,--------,10,--------,11,--------,12,1027~~~~,00,0156~~~~,01,0509~~~~,02,\"\n# # ]\n\n# 0087~~~~,00,0291~~~~,01,0555~~~~,02,--------,03,--------,04,--------,05,--------,06,--------,07,--------,08,--------,09,--------,10,--------,11,--------,12,|𦖈|0\n# 0087~~~~,00,0291~~~~,01,0823x2h-,02,--------,03,--------,04,--------,05,--------,06,--------,07,--------,08,--------,09,--------,10,--------,11,--------,12,|聗|0\n# 0087~~~~,00,0291~~~~,01,1023~~~~,02,--------,03,--------,04,--------,05,--------,06,--------,07,--------,08,--------,09,--------,10,--------,11,--------,12,|𤋕|0\n# 0087~~~~,00,0294~~~~,01,0060~~~~,02,--------,03,--------,04,--------,05,--------,06,--------,07,--------,08,--------,09,--------,10,--------,11,--------,12,|𦖔|0\n# 0087~~~~,00,0294~~~~,01,0555~~~~,02,--------,03,--------,04,--------,05,--------,06,--------,07,--------,08,--------,09,--------,10,--------,11,--------,12,|𦗆|0\n# 0087~~~~,00,0295~~~~,01,0802~~~~,02,0958~~~~,03,--------,04,--------,05,--------,06,--------,07,--------,08,--------,09,--------,10,--------,11,--------,12,|𥪻|0\n# 0087~~~~,00,0312~~~~,01,--------,02,--------,03,--------,04,--------,05,--------,06,--------,07,--------,08,--------,09,--------,10,--------,11,--------,12,|𦔲|0\n# 0087~~~~,00,0314~~~~,01,1173~~~~,02,--------,03,--------,04,--------,05,--------,06,--------,07,--------,08,--------,09,--------,10,--------,11,--------,12,|𦕀|0\n# 0087~~~~,00,0319~~~~,01,--------,02,--------,03,--------,04,--------,05,--------,06,--------,07,--------,08,--------,09,--------,10,--------,11,--------,12,|𦕇|0\n# 0087~~~~,00,0355~~~~,01,--------,02,--------,03,--------,04,--------,05,--------,06,--------,07,--------,08,--------,09,--------,10,--------,11,--------,12,|𦕆|0\n# 0087~~~~,00,0373~~~~,01,0284~~~~,02,--------,03,--------,04,--------,05,--------,06,--------,07,--------,08,--------,09,--------,10,--------,11,--------,12,|𦕧|0\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"write without error (1)\" ] = ( T, done ) ->\n  probes_idx  = 0\n  idx = -1\n  write_settings =\n    batch: 10\n  step ( resume ) =>\n    yield @_feed_test_data db, probes_idx, write_settings, resume\n    done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"write without error (2)\" ] = ( T, done ) ->\n  probes_idx  = -1\n  idx = -1\n  write_settings =\n    batch: 10\n  step ( resume ) =>\n    yield @_feed_test_data db, probes_idx, write_settings, resume\n    done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"read without error\" ] = ( T, done ) ->\n  probes_idx  = 0\n  idx = -1\n  step ( resume ) =>\n    yield @_feed_test_data db, probes_idx, resume\n    # done()\n    input = HOLLERITH.create_facetstream db\n    input\n      # .pipe HOLLERITH.$url_from_key db\n      .pipe $ ( [ key, value, ], send ) =>\n        idx += +1\n        # T.eq key, matchers[ idx ]\n      .pipe D.$on_end ( end ) => end; done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"read keys without error (1)\" ] = ( T, done ) ->\n  step ( resume ) =>\n    yield HOLLERITH.clear db, resume\n    ### TAINT awaiting better solution ###\n    NULL = HOLLERITH._encode_value db, 1\n    for idx in [ 0 ... 10 ]\n      key_bfr = HOLLERITH._encode_key db, [ 'x', idx, 'x', ]\n      db[ '%self' ].put key_bfr, NULL\n    #.......................................................................................................\n    probe_idx = 4\n    count     = 0\n    query     = HOLLERITH._query_from_prefix db, [ 'x', probe_idx, ]\n    # debug '©ETONp', HOLLERITH.CODEC.rpr_of_buffer key_bfr\n    input     = db[ '%self' ].createReadStream query\n    input\n      .pipe $ ( { key, value, }, send ) =>\n        count += 1\n        T.eq ( HOLLERITH._decode_key db, key )[ 1 ], probe_idx\n      .pipe D.$on_end ( end ) =>\n        T.eq count, 1\n        end()\n        done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"read keys without error (2)\" ] = ( T, done ) ->\n  step ( resume ) =>\n    yield HOLLERITH.clear db, resume\n    ### TAINT awaiting better solution ###\n    NULL = HOLLERITH._encode_value db, 1\n    for idx in [ 0 ... 10 ]\n      db[ '%self' ].put ( HOLLERITH._encode_key db, [ 'x', idx, 'x', ] ), NULL\n    #.......................................................................................................\n    probe_idx = 4\n    count     = 0\n    prefix    = [ 'x', probe_idx, ]\n    input     = HOLLERITH.create_facetstream db, { prefix, }\n    input\n      .pipe $ ( facet, send ) =>\n        count += 1\n        [ key, value, ] = facet\n        T.eq key[ 1 ], probe_idx\n      .pipe D.$on_end ( end ) =>\n        T.eq count, 1\n        end()\n        done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"read keys without error (3)\" ] = ( T, done ) ->\n  step ( resume ) =>\n    yield HOLLERITH.clear db, resume\n    ### TAINT awaiting better solution ###\n    NULL = HOLLERITH._encode_value db, 1\n    for idx in [ 0 ... 10 ]\n      db[ '%self' ].put ( HOLLERITH._encode_key db, [ 'x', idx, 'x', ] ), NULL\n    #.......................................................................................................\n    probe_idx = 3\n    count     = 0\n    delta     = 2\n    lo        = [ 'x', probe_idx, ]\n    hi        = [ 'x', probe_idx + delta, ]\n    query     = { gte: ( HOLLERITH._encode_key db, lo ), lte: ( HOLLERITH._query_from_prefix db, hi )[ 'lte' ], }\n    input     = db[ '%self' ].createReadStream query\n    input\n      .pipe $ ( { key, value, }, send ) =>\n        count += 1\n        T.eq ( HOLLERITH._decode_key db, key )[ 1 ], probe_idx + count - 1\n      .pipe D.$on_end ( end ) =>\n        T.eq count, delta + 1\n        end()\n        done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"read keys without error (4)\" ] = ( T, done ) ->\n  step ( resume ) =>\n    yield HOLLERITH.clear db, resume\n    for idx in [ 0 ... 10 ]\n      db[ '%self' ].put ( HOLLERITH._encode_key db, [ 'x', idx, 'x', ] ), HOLLERITH._encode_value db, 1\n    #.......................................................................................................\n    probe_idx = 3\n    count     = 0\n    delta     = 2\n    lo        = [ 'x', probe_idx, ]\n    hi        = [ 'x', probe_idx + delta, ]\n    input     = HOLLERITH.create_facetstream db, { lo, hi, }\n    input\n      .pipe $ ( [ key, value, ], send ) =>\n        count += 1\n        T.eq key[ 1 ], probe_idx + count - 1\n      .pipe D.$on_end ( end ) =>\n        T.eq count, delta + 1\n        end()\n        done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"create_facetstream throws with wrong arguments\" ] = ( T, done ) ->\n  message = \"illegal to specify `hi` but not `lo`\"\n  T.throws message, ( -> HOLLERITH.create_facetstream db, hi: [ 'xxx', ] )\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"read POS facets\" ] = ( T, done ) ->\n  probes_idx  = 0\n  idx         = -1\n  #.........................................................................................................\n  key_matchers = [\n    [ 'pos', 'guide/lineup/length', 2, '𧷟2', ]\n    [ 'pos', 'guide/lineup/length', 3, '𧷟3', ]\n    [ 'pos', 'guide/lineup/length', 4, '𧷟4', ]\n    ]\n  #.........................................................................................................\n  step ( resume ) =>\n    yield @_feed_test_data db, probes_idx, resume\n    lo = [ 'pos', 'guide/lineup/length', 2, ]\n    hi = [ 'pos', 'guide/lineup/length', 4, ]\n    # input   = HOLLERITH.create_keystream db, lo\n    input   = HOLLERITH.create_facetstream db, { lo, hi, }\n    input\n      # .pipe HOLLERITH.$url_from_key db\n      .pipe $ ( [ key, value, ], send ) =>\n        idx += +1\n        phrase = HOLLERITH.as_phrase db, key, value\n        T.eq key, key_matchers[ idx ]\n      .pipe D.$on_end ( end ) => end(); done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"read POS phrases (1)\" ] = ( T, done ) ->\n  probes_idx  = 0\n  idx         = -1\n  #.........................................................................................................\n  matchers = [\n    [ 'pos', 'guide/lineup/length', 2, '𧷟2', ]\n    [ 'pos', 'guide/lineup/length', 3, '𧷟3', ]\n    [ 'pos', 'guide/lineup/length', 4, '𧷟4', ]\n    ]\n  #.........................................................................................................\n  step ( resume ) =>\n    yield @_feed_test_data db, probes_idx, resume\n    lo = [ 'pos', 'guide/lineup/length', 2, ]\n    hi = [ 'pos', 'guide/lineup/length', 4, ]\n    input   = HOLLERITH.create_phrasestream db, { lo, hi, }\n    input\n      .pipe $ ( phrase, send ) =>\n        idx += +1\n        T.eq phrase, matchers[ idx ]\n      .pipe D.$on_end ( end ) => end(); done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"read POS phrases (2)\" ] = ( T, done ) ->\n  probes_idx  = 0\n  idx         = -1\n  count       = 0\n  #.........................................................................................................\n  matchers = [\n    [ 'pos', 'guide/uchr/has', '八', '𧷟', 0, ]\n    [ 'pos', 'guide/uchr/has', '刀', '𧷟', 1, ]\n    [ 'pos', 'guide/uchr/has', '宀', '𧷟', 2, ]\n    [ 'pos', 'guide/uchr/has', '貝', '𧷟', 4, ]\n    [ 'pos', 'guide/uchr/has', '', '𧷟', 3, ]\n    ]\n  #.........................................................................................................\n  step ( resume ) =>\n    yield @_feed_test_data db, probes_idx, resume\n    prefix    = [ 'pos', 'guide/uchr/has', ]\n    input     = HOLLERITH.create_phrasestream db, { prefix, }\n    settings  = { indexed: no, }\n    input\n      .pipe $ ( phrase, send ) =>\n        debug '©DsAfY', rpr phrase\n        count  += +1\n        idx    += +1\n        T.eq phrase, matchers[ idx ]\n      .pipe D.$on_end ( end ) =>\n        T.eq count, matchers.length\n        end()\n        done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"read SPO phrases\" ] = ( T, done ) ->\n  debug '©Rsoxb', db[ '%self' ].isOpen()\n  probes_idx  = 0\n  idx         = -1\n  count       = 0\n  #.........................................................................................................\n  matchers = [\n    [ 'spo', '𧷟', 'cp/cid', 163295 ]\n    [ 'spo', '𧷟', 'guide/lineup/length', 5 ]\n    [ 'spo', '𧷟', 'guide/uchr/has', [ '八', '刀', '宀', '', '貝' ] ]\n    [ 'spo', '𧷟', 'rank/cjt', 5432 ]\n    ]\n  #.........................................................................................................\n  step ( resume ) =>\n    yield @_feed_test_data db, probes_idx, resume\n    prefix  = [ 'spo', '𧷟', ]\n    input   = HOLLERITH.create_phrasestream db, { prefix, }\n    input\n      .pipe $ ( phrase, send ) =>\n        debug '©DsAfY', rpr phrase\n        count  += +1\n        idx    += +1\n        T.eq phrase, matchers[ idx ]\n      .pipe D.$on_end ( end ) =>\n        T.eq count, matchers.length\n        end()\n        done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"sorting (1)\" ] = ( T, done ) ->\n  step ( resume ) =>\n    settings =\n      db:           leveldown\n      keyEncoding:  'binary'\n    leveldb = levelup '/tmp/hollerith2-test', settings\n    yield clear_leveldb leveldb, resume\n    probes = [\n      'a'\n      'ab'\n      'abc'\n      'abc\\x00'\n      'abc\\x00a'\n      'abca'\n      'abcb'\n      'abcc'\n      'abcd'\n      'abcde'\n      'abcdef'\n      'abcdefg' ]\n    matchers = [\n      new Buffer [ 0x61, ]\n      new Buffer [ 0x61, 0x62, ]\n      new Buffer [ 0x61, 0x62, 0x63, ]\n      new Buffer [ 0x61, 0x62, 0x63, 0x00, ]\n      new Buffer [ 0x61, 0x62, 0x63, 0x00, 0x61, ]\n      new Buffer [ 0x61, 0x62, 0x63, 0x61, ]\n      new Buffer [ 0x61, 0x62, 0x63, 0x62, ]\n      new Buffer [ 0x61, 0x62, 0x63, 0x63, ]\n      new Buffer [ 0x61, 0x62, 0x63, 0x64, ]\n      new Buffer [ 0x61, 0x62, 0x63, 0x64, 0x65, ]\n      new Buffer [ 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, ]\n      new Buffer [ 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, ] ]\n    CND.shuffle probes\n    for probe in probes\n      probe_bfr = new Buffer probe, 'utf-8'\n      yield leveldb.put probe_bfr, '1', resume\n      probe_bfrs = yield read_all_keys leveldb, resume\n    probe_bfrs = yield read_all_keys leveldb, resume\n    # debug '©RXPvv', '\\n' + rpr probe_bfrs\n    for probe_bfr, probe_idx in probe_bfrs\n      matcher = matchers[ probe_idx ]\n      ### TAINT looks like `T.eq buffer1, buffer2` doesn't work---sometimes... ###\n      # T.eq probe_bfr, matcher\n      T.ok probe_bfr.equals matcher\n    leveldb.close -> done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"sorting (2)\" ] = ( T, done ) ->\n  ### This test is here because there seemed to occur some strange ordering issues when\n  using memdown instead of leveldown ###\n  step ( resume ) =>\n    settings =\n      db:           leveldown\n      keyEncoding:  'binary'\n    leveldb = levelup '/tmp/hollerith2-test', settings\n    yield clear_leveldb leveldb, resume\n    probes = [\n      new Buffer [ 0x00, ]\n      new Buffer [ 0x01, ]\n      new Buffer [ 0x02, ]\n      new Buffer [ 0x03, ]\n      new Buffer [ 0xf9, ]\n      new Buffer [ 0xfa, ]\n      new Buffer [ 0xfb, ]\n      new Buffer [ 0xfc, ]\n      new Buffer [ 0xfd, ]\n      ]\n    matchers = ( probe for probe in probes )\n    CND.shuffle probes\n    for probe in probes\n      yield leveldb.put probe, '1', resume\n    probe_bfrs = yield read_all_keys leveldb, resume\n    for probe_bfr, probe_idx in probe_bfrs\n      matcher = matchers[ probe_idx ]\n      # debug '©15060', probe_idx, probe_bfr, matcher\n      ### TAINT looks like `T.eq buffer1, buffer2` doesn't work---sometimes... ###\n      T.ok probe_bfr.equals matcher\n    leveldb.close -> done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"H2 codec `encode` throws on anything but a list\" ] = ( T, done ) ->\n  T.throws \"expected a list, got a text\",         ( -> CODEC.encode 'unaccaptable' )\n  T.throws \"expected a list, got a number\",       ( -> CODEC.encode 42 )\n  T.throws \"expected a list, got a boolean\",      ( -> CODEC.encode true )\n  T.throws \"expected a list, got a boolean\",      ( -> CODEC.encode false )\n  T.throws \"expected a list, got a jsundefined\",  ( -> CODEC.encode() )\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"sort texts with H2 codec (1)\" ] = ( T, done ) ->\n  step ( resume ) =>\n    settings =\n      db:           leveldown\n      keyEncoding:  'binary'\n    leveldb = levelup '/tmp/hollerith2-test', settings\n    yield clear_leveldb leveldb, resume\n    probes = [\n      'a'\n      'ab'\n      'abc'\n      'abc\\x00'\n      'abc\\x00a'\n      'abca'\n      'abca\\x00'\n      'abcb'\n      'abcc'\n      'abcd'\n      'abcde'\n      'abcdef'\n      'abcdefg'\n      ]\n    matchers = ( [ probe, ] for probe in probes )\n    CND.shuffle probes\n    for probe in probes\n      yield leveldb.put ( CODEC.encode [ probe, ] ), '1', resume\n    probe_bfrs  = yield read_all_keys leveldb, resume\n    probes      = ( CODEC.decode probe_bfr for probe_bfr in probe_bfrs )\n    show_keys_and_key_bfrs probes, probe_bfrs\n    for probe, probe_idx in probes\n      matcher = matchers[ probe_idx ]\n      T.eq probe, matcher\n    leveldb.close -> done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"sort texts with H2 codec (2)\" ] = ( T, done ) ->\n  step ( resume ) =>\n    settings =\n      db:           leveldown\n      keyEncoding:  'binary'\n    leveldb = levelup '/tmp/hollerith2-test', settings\n    yield clear_leveldb leveldb, resume\n    probes = [\n      ''\n      ' '\n      'a'\n      'abc'\n      '一'\n      '一二'\n      '一二三'\n      '三'\n      '二'\n      '𠀀'\n      '𠀀\\x00'\n      '𠀀a'\n      '𪜀'\n      '𫝀'\n      String.fromCodePoint 0x10ffff\n      ]\n    matchers = ( [ probe, ] for probe in probes )\n    CND.shuffle probes\n    for probe in probes\n      probe_bfr = CODEC.encode [ probe, ]\n      yield leveldb.put probe_bfr, '1', resume\n    probe_bfrs  = yield read_all_keys leveldb, resume\n    # debug '©Fd5iw', probe_bfrs\n    probes      = ( CODEC.decode probe_bfr for probe_bfr in probe_bfrs )\n    show_keys_and_key_bfrs probes, probe_bfrs\n    for probe, probe_idx in probes\n      matcher = matchers[ probe_idx ]\n      T.eq probe, matcher\n    leveldb.close -> done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"sort numbers with H2 codec (1)\" ] = ( T, done ) ->\n  step ( resume ) =>\n    settings =\n      db:           leveldown\n      keyEncoding:  'binary'\n    leveldb = levelup '/tmp/hollerith2-test', settings\n    yield clear_leveldb leveldb, resume\n    probes_and_descriptions = [\n      [ -Infinity,               \"-Infinity\"               ]\n      [ -Number.MAX_VALUE,       \"-Number.MAX_VALUE\"       ]\n      [ Number.MIN_SAFE_INTEGER, \"Number.MIN_SAFE_INTEGER\" ]\n      [ -123456789,              \"-123456789\"              ]\n      [ -3,                      \"-3\"                      ]\n      [ -2,                      \"-2\"                      ]\n      [ -1.5,                    \"-1.5\"                    ]\n      [ -1,                      \"-1\"                      ]\n      [ -Number.EPSILON,         \"-Number.EPSILON\"         ]\n      [ -Number.MIN_VALUE,       \"-Number.MIN_VALUE\"       ]\n      [ 0,                       \"0\"                       ]\n      [ +Number.MIN_VALUE,       \"+Number.MIN_VALUE\"       ]\n      [ +Number.EPSILON,         \"+Number.EPSILON\"         ]\n      [ +1,                      \"+1\"                      ]\n      [ +1.5,                    \"+1.5\"                    ]\n      [ +2,                      \"+2\"                      ]\n      [ +3,                      \"+3\"                      ]\n      [ +123456789,              \"+123456789\"              ]\n      [ Number.MAX_SAFE_INTEGER, \"Number.MAX_SAFE_INTEGER\" ]\n      [ Number.MAX_VALUE,        \"Number.MAX_VALUE\"        ]\n      [ +Infinity,               \"+Infinity\"               ]\n      ]\n    # probes_and_descriptions.sort ( a, b ) ->\n    #   return +1 if a[ 0 ] > b[ 0 ]\n    #   return -1 if a[ 0 ] < b[ 0 ]\n    #   return  0\n    matchers      = ( [ pad[ 0 ], ] for pad in probes_and_descriptions )\n    # descriptions  = ( [ pad[ 1 ], ] for pad in probes_and_descriptions )\n    for pad in probes_and_descriptions\n      urge pad\n    CND.shuffle probes_and_descriptions\n    for [ probe, _, ] in probes_and_descriptions\n      probe_bfr = CODEC.encode [ probe, ]\n      yield leveldb.put probe_bfr, '1', resume\n    probe_bfrs  = yield read_all_keys leveldb, resume\n    probes      = ( CODEC.decode probe_bfr for probe_bfr in probe_bfrs )\n    show_keys_and_key_bfrs probes, probe_bfrs\n    for probe, probe_idx in probes\n      matcher = matchers[ probe_idx ]\n      T.eq probe, matcher\n    leveldb.close -> done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"sort mixed values with H2 codec\" ] = ( T, done ) ->\n  step ( resume ) =>\n    settings =\n      db:           leveldown\n      keyEncoding:  'binary'\n    leveldb = levelup '/tmp/hollerith2-test', settings\n    yield clear_leveldb leveldb, resume\n    probes = [\n      null\n      false\n      true\n      CODEC[ 'sentinels' ][ 'firstdate' ]\n      new Date 0\n      new Date 8e11\n      new Date()\n      CODEC[ 'sentinels' ][ 'lastdate'  ]\n      1234\n      Infinity\n      ''\n      '一'\n      '三'\n      '二'\n      '𠀀'\n      '𠀀\\x00'\n      String.fromCodePoint 0x10ffff\n      ]\n    matchers = ( [ probe, ] for probe in probes )\n    CND.shuffle probes\n    for probe in probes\n      debug '©oMXJZ', probe\n      probe_bfr = CODEC.encode [ probe, ]\n      yield leveldb.put probe_bfr, '1', resume\n    probe_bfrs  = yield read_all_keys leveldb, resume\n    # debug '©Fd5iw', probe_bfrs\n    probes      = ( CODEC.decode probe_bfr for probe_bfr in probe_bfrs )\n    show_keys_and_key_bfrs probes, probe_bfrs\n    for probe, probe_idx in probes\n      matcher = matchers[ probe_idx ]\n      T.eq probe, matcher\n    leveldb.close -> done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"sort lists of mixed values with H2 codec\" ] = ( T, done ) ->\n  step ( resume ) =>\n    settings =\n      db:           leveldown\n      keyEncoding:  'binary'\n    leveldb = levelup '/tmp/hollerith2-test', settings\n    yield clear_leveldb leveldb, resume\n    probes = [\n      [ \"\",             '',             ]\n      [ \"1234\",          1234,           ]\n      [ \"Infinity\",      Infinity,       ]\n      [ \"String.fromCodePoint 0x10ffff\", String.fromCodePoint 0x10ffff ]\n      [ \"false\",         false,          ]\n      [ \"new Date 0\",    new Date 0,     ]\n      [ \"new Date 8e11\", new Date 8e11,  ]\n      [ \"new Date()\",    new Date(),     ]\n      [ \"null\",          null,           ]\n      [ \"true\",          true,           ]\n      [ \"一\",            '一',            ]\n      [ \"三\",            '三',            ]\n      [ \"二\",            '二',            ]\n      [ \"𠀀\",            '𠀀',            ]\n      [ \"𠀀\\x00\",        '𠀀\\x00',        ]\n      ]\n    matchers = ( probe for probe in probes )\n    CND.shuffle probes\n    for probe in probes\n      debug '©oMXJZ', probe\n      probe_bfr = CODEC.encode probe\n      yield leveldb.put probe_bfr, '1', resume\n    probe_bfrs  = yield read_all_keys leveldb, resume\n    # debug '©Fd5iw', probe_bfrs\n    probes      = ( CODEC.decode probe_bfr for probe_bfr in probe_bfrs )\n    show_keys_and_key_bfrs probes, probe_bfrs\n    for probe, probe_idx in probes\n      matcher = matchers[ probe_idx ]\n      T.eq probe, matcher\n    leveldb.close -> done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"sort routes with values (1)\" ] = ( T, done ) ->\n  step ( resume ) =>\n    settings =\n      db:           leveldown\n      keyEncoding:  'binary'\n    leveldb = levelup '/tmp/hollerith2-test', settings\n    yield clear_leveldb leveldb, resume\n    probes = [\n      [ 'pos', 'strokeorder', '352513553254',          '𤿯', ]\n      [ 'pos', 'strokeorder', '3525141121',            '𠴦', ]\n      [ 'pos', 'strokeorder', '35251454',              '𨒡', ]\n      [ 'pos', 'strokeorder', '3525152',               '邭', ]\n      [ 'pos', 'strokeorder', '352515251115115113541', '𪚫', ]\n      [ 'pos', 'strokeorder', '35251525112511511',     '𪚧', ]\n      [ 'pos', 'strokeorder', '352515251214251214',    '𧑴', ]\n      [ 'pos', 'strokeorder', '3525153',               '劬', ]\n      [ 'pos', 'strokeorder', '3525153\\x00',               '劬', ]\n      [ 'pos', 'strokeorder\\x00', '352513553254',          '𤿯', ]\n      ]\n    matchers = ( probe for probe in probes )\n    CND.shuffle probes\n    for probe in probes\n      probe_bfr = CODEC.encode probe\n      yield leveldb.put probe_bfr, '1', resume\n    probe_bfrs  = yield read_all_keys leveldb, resume\n    # debug '©Fd5iw', probe_bfrs\n    probes      = ( CODEC.decode probe_bfr for probe_bfr in probe_bfrs )\n    show_keys_and_key_bfrs probes, probe_bfrs\n    for probe, probe_idx in probes\n      matcher = matchers[ probe_idx ]\n      T.eq probe, matcher\n    leveldb.close -> done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"sort routes with values (2)\" ] = ( T, done ) ->\n  step ( resume ) =>\n    settings =\n      db:           leveldown\n      keyEncoding:  'binary'\n    leveldb = levelup '/tmp/hollerith2-test', settings\n    yield clear_leveldb leveldb, resume\n    probes = [\n      [ 'a',      null, ]\n      [ 'a',      false, ]\n      [ 'a',      true, ]\n      [ 'a',      new Date(), ]\n      [ 'a',      -Infinity, ]\n      [ 'a',      +1234, ]\n      [ 'a',      +Infinity, ]\n      [ 'a',      'b', ]\n      [ 'a',      'b\\x00', ]\n      [ 'a\\x00',  +1234, ]\n      [ 'a\\x00',  'b', ]\n      [ 'aa',     +1234, ]\n      [ 'aa',     'b', ]\n      [ 'aa',     'b\\x00', ]\n      ]\n    matchers = ( probe for probe in probes )\n    CND.shuffle probes\n    for probe in probes\n      probe_bfr = CODEC.encode probe\n      yield leveldb.put probe_bfr, '1', resume\n    probe_bfrs  = yield read_all_keys leveldb, resume\n    # debug '©Fd5iw', probe_bfrs\n    probes      = ( CODEC.decode probe_bfr for probe_bfr in probe_bfrs )\n    show_keys_and_key_bfrs probes, probe_bfrs\n    for probe, probe_idx in probes\n      matcher = matchers[ probe_idx ]\n      T.eq probe, matcher\n    leveldb.close -> done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"read sample data\" ] = ( T, done ) ->\n  probes_idx  = 2\n  idx = -1\n  step ( resume ) =>\n    debug '©bUJhI', 'XX'\n    yield @_feed_test_data db, probes_idx, resume\n    debug '©PRzA5', 'XX'\n    input = db[ '%self' ].createReadStream()\n    input\n      .pipe D.$show()\n      .pipe $ ( { key, value, }, send ) => send [ key, value, ]\n      .pipe $ ( [ key, value, ], send ) => send [ key, value, ] unless HOLLERITH._is_meta db, key\n      .pipe $ ( [ key, value, ], send ) =>\n        # debug '©RluhF', ( HOLLERITH.CODEC.decode key ), ( JSON.parse value )\n        send [ key, value, ]\n      .pipe D.$collect()\n      .pipe $ ( facets, send ) =>\n        # debug '©54IKt', facets\n        help '\\n' + HOLLERITH.DUMP.rpr_of_facets db, facets\n        buffer = new Buffer JSON.stringify [ '开', '彡' ]\n        debug '©GJfL6', HOLLERITH.CODEC.rpr_of_buffer buffer\n      .pipe D.$on_end => done()\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"read and write keys with lists\" ] = ( T, done ) ->\n  probes_idx  = 0\n  idx         = -1\n  count       = 0\n  probes      = [\n    [ 'a', 1, ]\n    [ 'a', [], ]\n    [ 'a', [ 1, ], ]\n    [ 'a', [ true, ], ]\n    [ 'a', [ 'x', 'y', 'b', ], ]\n    [ 'a', [ 120, 1 / 3, ], ]\n    [ 'a', [ 'x', ], ]\n    ]\n  matchers    = ( probe for probe in probes )\n  #.........................................................................................................\n  for probe, probe_idx in probes\n    buffer = HOLLERITH.CODEC.encode probe\n    result = HOLLERITH.CODEC.decode buffer\n    T.eq result, matchers[ probe_idx ]\n  #.........................................................................................................\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"encode keys with list elements\" ] = ( T, done ) ->\n  probes = [\n    [ 'foo', 'bar', ]\n    [ 'foo', [ 'bar', ], ]\n    [ [], 'bar', ]\n    [ 'foo', [], ]\n    [ [ 'foo', ], 'bar', ]\n    [ [ 42, ], 'bar', ]\n    [ 'foo', [ 42, ] ]\n    ]\n  for probe in probes\n    T.eq probe, HOLLERITH.CODEC.decode HOLLERITH.CODEC.encode probe\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"read and write phrases with unanalyzed lists\" ] = ( T, done ) ->\n  # ### !!!!!!!!!!!!!!!!!!!!!! ###\n  # warn \"skipped\"\n  # return done()\n  # ### !!!!!!!!!!!!!!!!!!!!!! ###\n  idx         = -1\n  count       = 0\n  #.........................................................................................................\n  probes = [\n    [ 'probe#00', 'some-predicate', [], ]\n    [ 'probe#01', 'some-predicate', [ -1 ], ]\n    [ 'probe#02', 'some-predicate', [  0 ], ]\n    [ 'probe#03', 'some-predicate', [  1 ], ]\n    [ 'probe#04', 'some-predicate', [  2 ], ]\n    [ 'probe#05', 'some-predicate', [  2, -1, ], ]\n    [ 'probe#06', 'some-predicate', [  2, 0, ], ]\n    [ 'probe#07', 'some-predicate', [  2, 1, ], ]\n    [ 'probe#08', 'some-predicate', [  2, 1, 0 ], ]\n    [ 'probe#09', 'some-predicate', [  2, 2, ], ]\n    [ 'probe#10', 'some-predicate', [  2, [ 2, ], ], ]\n    [ 'probe#11', 'some-predicate', [  3 ], ]\n    ]\n  #.........................................................................................................\n  write_probes = ( handler ) =>\n    step ( resume ) =>\n      yield HOLLERITH.clear db, resume\n      input = D.create_throughstream()\n      input\n        # .pipe ( [ sbj, prd, obj, ], send ) =>\n        #   if prd is 'some-predicate' # always the case in this example\n        #     obj\n        .pipe HOLLERITH.$write db, solids: [ 'some-predicate', ]\n        .pipe D.$on_end =>\n          urge \"test data written\"\n          handler()\n      #.....................................................................................................\n      input.write probe for probe in probes\n      input.end()\n  #.........................................................................................................\n  step ( resume ) =>\n    #.......................................................................................................\n    yield write_probes resume\n    input = HOLLERITH.create_phrasestream db\n    debug '©FphJK', input[ '%meta' ]\n    input\n      .pipe $ ( phrase, send ) =>\n        count  += +1\n        idx    += +1\n        # debug '©Sc5FG', phrase\n        # T.eq phrase, matchers[ idx ]\n      .pipe D.$on_end =>\n        # T.eq count, matchers.length\n        done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"read partial POS phrases\" ] = ( T, done ) ->\n  # ### !!!!!!!!!!!!!!!!!!!!!! ###\n  # warn \"skipped\"\n  # return done()\n  # ### !!!!!!!!!!!!!!!!!!!!!! ###\n  probes_idx  = 4\n  idx         = -1\n  count       = 0\n  #.........................................................................................................\n  matchers = [\n    [ 'pos', 'guide', 'xxx', '𧷟1' ]\n    [ 'pos', 'guide/', 'yyy', '𧷟1' ]\n    [ 'pos', 'guide/lineup/length', 1, '𧷟1', ]\n    [ 'pos', 'guide/lineup/length', 2, '𧷟2', ]\n    [ 'pos', 'guide/lineup/length', 3, '𧷟3', ]\n    [ 'pos', 'guide/lineup/length', 4, '𧷟4', ]\n    [ 'pos', 'guide/lineup/length', 5, '𧷟', ]\n    [ 'pos', 'guide/lineup/length', 6, '𧷟6', ]\n    [ 'pos', 'guide/uchr/has', '八', '𧷟', 0 ]\n    [ 'pos', 'guide/uchr/has', '刀', '𧷟', 1 ]\n    [ 'pos', 'guide/uchr/has', '宀', '𧷟', 2 ]\n    [ 'pos', 'guide/uchr/has', '貝', '𧷟', 4 ]\n    [ 'pos', 'guide/uchr/has', '', '𧷟', 3 ]\n    ]\n  #.........................................................................................................\n  step ( resume ) =>\n    yield @_feed_test_data db, probes_idx, resume\n    # prefix    = [ 'pos', 'guide', ]\n    prefix    = [ 'pos', 'guide', ]\n    input     = HOLLERITH.create_phrasestream db, { prefix, star: '*', }\n    # input     = HOLLERITH.create_phrasestream db, { prefix, }\n    debug '©FphJK', input[ '%meta' ]\n    settings  = { indexed: no, }\n    input\n      .pipe $ ( phrase, send ) =>\n        count  += +1\n        idx    += +1\n        debug '©Sc5FG', phrase\n        T.eq phrase, matchers[ idx ]\n      .pipe D.$on_end =>\n        T.eq count, matchers.length\n        done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"read single phrases (1)\" ] = ( T, done ) ->\n  probes_idx  = 4\n  matcher = [ 'spo', '𧷟', 'guide/lineup/length', 5 ]\n  #.........................................................................................................\n  step ( resume ) =>\n    yield @_feed_test_data db, probes_idx, resume\n    # prefix    = [ 'pos', 'guide', ]\n    prefix    = [ 'spo', '𧷟', 'guide/lineup/length', ]\n    query     = { prefix, star: '*', }\n    input     = HOLLERITH.read_one_phrase db, query, ( error, phrase ) ->\n      throw error if error?\n      debug '©61ENl', phrase\n      T.eq phrase, matcher\n      done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"read single phrases (2)\" ] = ( T, done ) ->\n  probes_idx  = 4\n  matcher = [ 'spo', '𧷟', 'guide/lineup/length', 5 ]\n  #.........................................................................................................\n  step ( resume ) =>\n    yield @_feed_test_data db, probes_idx, resume\n    prefix    = [ 'spo', '𧷟', 'guide/lineup/length', ]\n    query     = { prefix, star: '*', fallback: 'not to be used', }\n    input     = HOLLERITH.read_one_phrase db, query, ( error, phrase ) ->\n      throw error if error?\n      debug '©61ENl', phrase\n      T.eq phrase, matcher\n      done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"read single phrases (3)\" ] = ( T, done ) ->\n  probes_idx  = 4\n  matcher = \"expected 1 phrase, got 0\"\n  #.........................................................................................................\n  step ( resume ) =>\n    yield @_feed_test_data db, probes_idx, resume\n    prefix    = [ 'spo', '中', 'guide/lineup/length', ]\n    query     = { prefix, star: '*', }\n    input     = HOLLERITH.read_one_phrase db, query, ( error, phrase ) ->\n      throw new Error \"expected error\" unless error?\n      T.eq error[ 'message' ], matcher\n      done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"read single phrases (4)\" ] = ( T, done ) ->\n  probes_idx  = 4\n  matcher     = \"this entry is missing\"\n  #.........................................................................................................\n  step ( resume ) =>\n    yield @_feed_test_data db, probes_idx, resume\n    prefix    = [ 'spo', '中', 'guide/lineup/length', ]\n    query     = { prefix, star: '*', fallback: matcher, }\n    input     = HOLLERITH.read_one_phrase db, query, ( error, phrase ) ->\n      throw error if error?\n      T.eq phrase, matcher\n      done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"writing phrases with non-unique keys fails\" ] = ( T, done ) ->\n  alert \"\"\"test case \"writing phrases with non-unique keys fails\" to be written\"\"\"\n  done()\n\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"reminders\" ] = ( T, done ) ->\n  alert \"H.$write() must test for repeated keys\"\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"invalid key not accepted (1)\" ] = ( T, done ) ->\n  domain  = ( require 'domain' ).create()\n  domain.on 'error', ( error ) ->\n    # debug '©AOSmn', JSON.stringify error[ 'message' ]\n    T.eq error[ 'message' ], \"invalid SPO key, must be list: 'xxx'\"\n    later done\n  domain.run ->\n    input   = D.create_throughstream()\n    input\n      .pipe HOLLERITH.$write db\n      .pipe D.$on_end ->\n        # T.fail \"should throw error\"\n        later done\n    input.write 'xxx'\n    input.end()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"invalid key not accepted (2)\" ] = ( T, done ) ->\n  domain  = ( require 'domain' ).create()\n  domain.on 'error', ( error ) ->\n    # debug '©AOSmn', JSON.stringify error[ 'message' ]\n    T.eq error[ 'message' ], \"invalid SPO key, must be of length 3: [ 'foo' ]\"\n    done()\n  domain.run ->\n    input   = D.create_throughstream()\n    input.pipe HOLLERITH.$write db\n    input.write [ 'foo', ]\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"catching errors (2)\" ] = ( T, done ) ->\n  run = ( method, handler ) ->\n    domain  = ( require 'domain' ).create()\n    domain.on 'error', ( error ) ->\n      handler error\n    domain.run ->\n      method()\n  #.........................................................................................................\n  f = ->\n    input   = D.create_throughstream()\n    input\n      .pipe HOLLERITH.$write db\n      .pipe D.$on_end ->\n        later done\n    input.write [ 'foo', 'bar', 'baz', ]\n    input.end()\n  run f, ( error ) ->\n    debug '©WaXJV', JSON.stringify error[ 'message' ]\n    T.eq true, false\n    done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"catching errors (1)\" ] = ( T, done ) ->\n  #.........................................................................................................\n  d = D.run ->\n    input   = D.create_throughstream()\n    input\n      .pipe HOLLERITH.$write db\n      .pipe D.$on_end ->\n        later done\n    input.write [ 'foo', 'bar', 'baz', 'gnu', ]\n    input.end()\n  , ( error ) ->\n    T.eq error[ 'message' ], \"invalid SPO key, must be of length 3: [ 'foo', 'bar', 'baz', 'gnu' ]\"\n    later done\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"catching errors (2)\" ] = ( T, done ) ->\n  message = \"should not produce error\"\n  #.........................................................................................................\n  d = D.run ->\n    input   = D.create_throughstream()\n    input\n      .pipe HOLLERITH.$write db\n      .pipe D.$on_end ->\n        T.succeed message\n        later done\n    input.write [ 'foo', 'bar', 'baz', ]\n    input.end()\n  , ( error ) ->\n    T.fail message\n    later done\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"building PODs from SPO phrases\" ] = ( T, done ) ->\n  probes_idx  = 4\n  idx         = -1\n  count       = 0\n  # #.........................................................................................................\n  # matchers = [\n  #   [ 'spo', '𧷟', 'cp/cid', 163295 ]\n  #   [ 'spo', '𧷟', 'guide/lineup/length', 5 ]\n  #   [ 'spo', '𧷟', 'guide/uchr/has', [ '八', '刀', '宀', '', '貝' ] ]\n  #   [ 'spo', '𧷟', 'rank/cjt', 5432 ]\n  #   ]\n  #.........................................................................................................\n  $shorten_spo = ->\n    return $ ( phrase, send ) =>\n      unless ( CND.isa_list phrase ) and phrase[ 0 ] is 'spo'\n        return send.error new Error \"not an SPO phrase: #{rpr phrase}\"\n      spo = phrase[ 1 .. ]\n      ### TAINT repeated validation? ###\n      HOLLERITH.validate_spo spo\n      send spo\n  #.........................................................................................................\n  $consolidate = ->\n    last_sbj  = null\n    pod       = null\n    return $ ( spo, send, end ) =>\n      if spo?\n        ### TAINT repeated validation? ###\n        HOLLERITH.validate_spo spo\n        [ sbj, prd, obj, ] = spo\n        #...................................................................................................\n        if sbj is last_sbj\n          pod[ prd ] = obj\n        #...................................................................................................\n        else\n          if pod?\n            ### TAINT implicit key `pod` ###\n            send [ last_sbj, 'pod', pod, ]\n          pod         = '%sbj': sbj\n          pod[ prd ]  = obj\n          last_sbj    = sbj\n        #...................................................................................................\n        # send spo\n      #.....................................................................................................\n      if end?\n        send [ last_sbj, 'pod', pod, ] if last_sbj?\n        end()\n  #.........................................................................................................\n  step ( resume ) =>\n    yield @_feed_test_data db, probes_idx, resume\n    prefix  = [ 'spo', ]\n    input   = HOLLERITH.create_phrasestream db, { prefix, }\n    input\n      .pipe $shorten_spo()\n      .pipe $consolidate()\n      .pipe D.$show()\n      .pipe HOLLERITH.$write db\n      .pipe D.$on_end done\n\n###\n#-----------------------------------------------------------------------------------------------------------\n@[ \"keep ordering and completeness in asynchronous streams\" ] = ( T, T_done ) ->\n  step ( resume ) =>\n    idx     = 0\n    input_A = D.create_throughstream()\n    #.......................................................................................................\n    input_B = input_A\n      .pipe D.$stop_time \"keep ordering and completeness in asynchronous streams\"\n      .pipe $async ( data, done ) ->\n        dt = CND.random_number 0.5, 1.5\n        # debug '©WscFi', data, dt\n        after dt, =>\n          warn \"send #{rpr data}\"\n          done data\n      .pipe $ ( data, send ) ->\n        help \"read #{rpr data}\"\n        T.eq data, idx\n        idx += +1\n        send data\n      .pipe D.$on_end =>\n        T_done()\n    #.......................................................................................................\n    write = ->\n      for n in [ 0 .. 10 ]\n        # help \"write #{n}\"\n        input_A.write n\n        yield after 0.1, resume\n      input_A.end()\n    #.......................................................................................................\n    write()\n###\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"read phrases in lockstep\" ] = ( T, done ) ->\n  probes_idx  = 2\n  #.........................................................................................................\n  step ( resume ) =>\n    yield @_feed_test_data db, probes_idx, resume\n    input_1     = HOLLERITH.create_phrasestream db, { prefix: [ 'pos', 'strokecount'    ], }\n    input_2     = HOLLERITH.create_phrasestream db, { prefix: [ 'pos', 'componentcount' ], }\n    input_3     = HOLLERITH.create_phrasestream db, { prefix: [ 'pos', 'components'     ], }\n    input_1\n      .pipe D.$lockstep input_2, fallback: null\n      .pipe D.$lockstep input_3, fallback: null\n      .pipe $ ( data, send ) => help JSON.stringify data; send data\n      .pipe D.$on_end done\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"has_any yields existence of key\" ] = ( T, done ) ->\n  probes_idx  = 2\n  probes_and_matchers = [\n    [ [ 'spo', '形', 'strokecount',      ], true, ]\n    [ [ 'spo', '丁', 'componentcount',   ], true, ]\n    [ [ 'spo', '三', 'componentcount',   ], true, ]\n    [ [ 'spo', '夫', 'componentcount',   ], true, ]\n    [ [ 'spo', '國', 'componentcount',   ], true, ]\n    [ [ 'spo', '形', 'componentcount',   ], true, ]\n    [ [ 'spo', '丁', 'components',       ], true, ]\n    [ [ 'spo', '丁', 'xxxx',             ], false, ]\n    [ [ 'spo', '丁',                     ], true, ]\n    [ [ 'spo',                           ], true, ]\n    [ [ 'xxx',                           ], false, ]\n    ]\n  #.........................................................................................................\n  step ( resume ) =>\n    yield @_feed_test_data db, probes_idx, resume\n    for [ probe, matcher, ] in probes_and_matchers\n      T.eq matcher, yield HOLLERITH.has_any db, { prefix: probe, }, resume\n    done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"$write rejects duplicate S/P pairs\" ] = ( T, done ) ->\n  probes_idx  = 2\n  #.........................................................................................................\n  step ( resume ) =>\n    yield @_feed_test_data db, probes_idx, resume\n    #.......................................................................................................\n    try_writing = ->\n      input = D.create_throughstream()\n      #.....................................................................................................\n      input\n        .pipe D.$show()\n        .pipe HOLLERITH.$write db\n        .pipe D.$on_end ->\n          T.fail \"should never be called\"\n          done()\n      #.....................................................................................................\n      input.write [ '形', 'strokecount', 1234, ]\n      input.end()\n    #.......................................................................................................\n    D.run try_writing, ( error ) ->\n      T.eq \"S/P pair already in DB: [ '形', 'strokecount' ]\", error[ 'message' ]\n      done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"codec accepts long keys\" ] = ( T, done ) ->\n  probes_idx  = 2\n  probes      = []\n  long_text   = ( new Array 1025 ).join '#'\n  # probes.push [ 'foo', long_text, [ long_text, long_text, long_text, long_text, long_text, ], ]\n  # probes.push [ 'foo', [ long_text, long_text, long_text, long_text, long_text, ],\n  #   [ long_text, long_text, long_text, long_text, long_text, ], ]\n  # probes.push [ 'foo', [ long_text, long_text, long_text, long_text, long_text, ], ]\n  probes.push [ 'foo', [ long_text, long_text, long_text, long_text, ], 42, ]\n  #.........................................................................................................\n  step ( resume ) =>\n    yield @_feed_test_data db, probes_idx, resume\n    #.......................................................................................................\n    try_writing = ->\n      input = D.create_throughstream()\n      #.....................................................................................................\n      input\n        # .pipe D.$show()\n        .pipe HOLLERITH.$write db\n        .pipe D.$on_end ->\n          T.eq 1, 1\n          done()\n      #.....................................................................................................\n      for probe in probes\n        input.write probe\n        # yield later resume\n      input.end()\n    #.......................................................................................................\n    D.run try_writing, ( error ) ->\n      T.fail \"should not throw error\"\n      warn error\n      done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"write private types (1)\" ] = ( T, done ) ->\n  probes_idx  = 5\n  idx         = -1\n  count       = 0\n  #.........................................................................................................\n  matchers = [\n    [\"pos\",\"componentcount\",1,\"丁\"]\n    [\"pos\",\"components\",\"丁\",\"丁\",0]\n    [\"pos\",\"mtime\",123456789,{\"type\":\"route\",\"value\":\"/foo/bar\"}]\n    [\"pos\",\"strokecount\",2,\"丁\"]\n    [\"spo\",\"丁\",\"componentcount\",1]\n    [\"spo\",\"丁\",\"components\",[\"丁\"]]\n    [\"spo\",\"丁\",\"strokecount\",2]\n    [\"spo\",{\"type\":\"route\",\"value\":\"/foo/bar\"},\"mtime\",123456789]\n    ]\n  #.........................................................................................................\n  write_data = ( handler ) =>\n    input = D.create_throughstream()\n    input\n      # .pipe D.$show()\n      .pipe HOLLERITH.$write db\n      .pipe D.$on_end -> handler()\n    #.......................................................................................................\n    for probe in @_feed_test_data.probes[ probes_idx ]\n      input.write probe\n    input.end()\n  #.........................................................................................................\n  read_data = ( handler ) ->\n    #.......................................................................................................\n    input = HOLLERITH.create_phrasestream db\n    input\n      # .pipe D.$show()\n      .pipe $ ( phrase, send ) =>\n        count  += +1\n        idx    += +1\n        debug '©Sc5FG', JSON.stringify phrase\n        T.eq phrase, matchers[ idx ]\n      .pipe D.$on_end -> handler()\n  #.........................................................................................................\n  step ( resume ) =>\n    yield HOLLERITH.clear db, resume\n    yield write_data resume\n    yield read_data  resume\n    done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"write private types (2)\" ] = ( T, done ) ->\n  probes_idx    = 5\n  idx           = -1\n  count         = 0\n  #.........................................................................................................\n  encoder = ( type, value ) ->\n    debug '©XXX-encoder', type, rpr value\n    return value.split '/' if type is 'route'\n    throw new Error \"unknown private type #{rpr type}\"\n  #.........................................................................................................\n  xdb_route     = join __dirname, '..', 'dbs/tests-with-private-types'\n  #.........................................................................................................\n  xdb_settings  =\n    size:           500\n    encoder:        encoder\n  #.........................................................................................................\n  xdb           = HOLLERITH.new_db xdb_route, xdb_settings\n  #.........................................................................................................\n  matchers = [\n    [\"pos\",\"componentcount\",1,\"丁\"]\n    [\"pos\",\"components\",\"丁\",\"丁\",0]\n    [\"pos\",\"mtime\",123456789,{\"type\":\"route\",\"value\":[\"\",\"foo\",\"bar\"]}]\n    [\"pos\",\"strokecount\",2,\"丁\"]\n    [\"spo\",\"丁\",\"componentcount\",1]\n    [\"spo\",\"丁\",\"components\",[\"丁\"]]\n    [\"spo\",\"丁\",\"strokecount\",2]\n    [\"spo\",{\"type\":\"route\",\"value\":[\"\",\"foo\",\"bar\"]},\"mtime\",123456789]\n    ]\n  #.........................................................................................................\n  write_data = ( handler ) =>\n    input = D.create_throughstream()\n    input\n      # .pipe D.$show()\n      .pipe HOLLERITH.$write xdb\n      .pipe D.$on_end -> handler()\n    #.......................................................................................................\n    for probe in @_feed_test_data.probes[ probes_idx ]\n      input.write probe\n    input.end()\n  #.........................................................................................................\n  read_data = ( handler ) ->\n    #.......................................................................................................\n    input = HOLLERITH.create_phrasestream xdb\n    input\n      # .pipe D.$show()\n      .pipe $ ( phrase, send ) =>\n        count  += +1\n        idx    += +1\n        debug '©Sc5FG', JSON.stringify phrase\n        T.eq phrase, matchers[ idx ]\n      .pipe D.$on_end -> handler()\n  #.........................................................................................................\n  step ( resume ) =>\n    yield HOLLERITH.clear xdb, resume\n    yield write_data resume\n    yield read_data  resume\n    yield xdb[ '%self' ].close resume\n    done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"write private types (3)\" ] = ( T, done ) ->\n  probes_idx    = 5\n  idx           = -1\n  count         = 0\n  #.........................................................................................................\n  encoder = ( type, value ) ->\n    # debug '©XXX-encoder', type, rpr value\n    return value.split '/' if type is 'route'\n    throw new Error \"unknown private type #{rpr type}\"\n  #.........................................................................................................\n  decoder = ( type, value ) ->\n    # debug '©XXX-decoder', type, rpr value\n    return value.join '/' if type is 'route'\n    throw new Error \"unknown private type #{rpr type}\"\n  #.........................................................................................................\n  xdb_route     = join __dirname, '..', 'dbs/tests-with-private-types'\n  #.........................................................................................................\n  xdb_settings  =\n    size:           500\n    encoder:        encoder\n    decoder:        decoder\n  #.........................................................................................................\n  xdb           = HOLLERITH.new_db xdb_route, xdb_settings\n  #.........................................................................................................\n  matchers = [\n    [\"pos\",\"componentcount\",1,\"丁\"]\n    [\"pos\",\"components\",\"丁\",\"丁\",0]\n    [\"pos\",\"mtime\",123456789,\"/foo/bar\"]\n    [\"pos\",\"strokecount\",2,\"丁\"]\n    [\"spo\",\"丁\",\"componentcount\",1]\n    [\"spo\",\"丁\",\"components\",[\"丁\"]]\n    [\"spo\",\"丁\",\"strokecount\",2]\n    [\"spo\",\"/foo/bar\",\"mtime\",123456789]\n    ]\n  #.........................................................................................................\n  write_data = ( handler ) =>\n    input = D.create_throughstream()\n    input\n      # .pipe D.$show()\n      .pipe HOLLERITH.$write xdb\n      .pipe D.$on_end -> handler()\n    #.......................................................................................................\n    for probe in @_feed_test_data.probes[ probes_idx ]\n      input.write probe\n    input.end()\n  #.........................................................................................................\n  read_data = ( handler ) ->\n    #.......................................................................................................\n    input = HOLLERITH.create_phrasestream xdb\n    input\n      # .pipe D.$show()\n      .pipe $ ( phrase, send ) =>\n        count  += +1\n        idx    += +1\n        urge '©Sc5FG', JSON.stringify phrase\n        T.eq phrase, matchers[ idx ]\n      .pipe D.$on_end -> handler()\n  #.........................................................................................................\n  step ( resume ) =>\n    yield HOLLERITH.clear xdb, resume\n    yield write_data resume\n    yield read_data  resume\n    yield xdb[ '%self' ].close resume\n    done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"bloom filter serialization without writes\" ] = ( T, done ) ->\n  #.........................................................................................................\n  step ( resume ) =>\n    xdb   = HOLLERITH.new_db get_new_db_name()\n    input = HOLLERITH.create_phrasestream xdb\n    input.pause()\n    input.pipe HOLLERITH.$write xdb\n    input.resume()\n    input.end()\n    T.ok true\n    done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"use non-string subjects in phrases\" ] = ( T, done ) ->\n  #.........................................................................................................\n  write_data = ( handler ) ->\n    input = D.create_throughstream()\n    #.......................................................................................................\n    input\n      .pipe HOLLERITH.$write db\n      .pipe D.$on_end ->\n        handler()\n    #.......................................................................................................\n    input.write [ '千', 'guide/kwic/v3/sortcode', [ [ [ '0686f---', null ], '千', [], [] ] ], ]\n    input.write [ '亻', 'guide/kwic/v3/sortcode', [ [ [ '0774f---', null ], '亻', [], [] ] ], ]\n    input.write [ '一', 'guide/kwic/v3/sortcode', [ [ [ '0000f---', null ], '一', [], [] ] ], ]\n    input.write [ '丿', 'guide/kwic/v3/sortcode', [ [ [ '0645f---', null ], '丿', [], [] ] ], ]\n    input.write [ '十', 'guide/kwic/v3/sortcode', [ [ [ '0104f---', null ], '十', [], [] ] ], ]\n    input.write [ [ 'ref', '千', 0, ], 'guide/kwic/v3/sortcode', [\n      [ [ '0774f---', '0000f---', null, ], [ '亻', [],        [ '一', ] ], ]\n      [ [ '0000f---', null, '0774f---', ], [ '一', [ '亻', ], []        ], ]\n      ] ]\n    input.write [ [ 'ref', '千', 1, ], 'guide/kwic/v3/sortcode', [\n      [ [ '0645f---', '0104f---', null, ], [ '丿', [],        [ '十', ] ], ]\n      [ [ '0104f---', null, '0645f---', ], [ '十', [ '丿', ], []        ], ]\n      ] ]\n    input.end()\n  #.........................................................................................................\n  show = ( handler ) ->\n    input = HOLLERITH.create_phrasestream db\n    input\n      .pipe D.$observe ( phrase ) =>\n        info JSON.stringify phrase\n      .pipe D.$on_end ->\n        handler()\n  #.........................................................................................................\n  step ( resume ) =>\n    yield clear_leveldb db[ '%self' ], resume\n    # yield feed_test_data db, probes_idx, resume\n    yield write_data resume\n    yield show resume\n    done()\n\n#-----------------------------------------------------------------------------------------------------------\n@_prune = ->\n  for name, value of @\n    continue if name.startsWith '_'\n    delete @[ name ] unless name in include\n  return null\n\n\n############################################################################################################\nunless module.parent?\n  # debug '0980', JSON.stringify ( Object.keys @ ), null, '  '\n  include = [\n    # \"write without error (1)\",\n    # \"write without error (2)\",\n    # \"read without error\",\n    # \"read keys without error (1)\",\n    # \"read keys without error (2)\",\n    # \"read keys without error (3)\",\n    # \"read keys without error (4)\",\n    # \"create_facetstream throws with wrong arguments\",\n    # \"read POS facets\",\n    # \"read POS phrases (1)\",\n    # \"read POS phrases (2)\",\n    # \"read SPO phrases\",\n    # \"sorting (1)\",\n    # \"sorting (2)\",\n    # \"H2 codec `encode` throws on anything but a list\",\n    # \"sort texts with H2 codec (1)\",\n    # \"sort texts with H2 codec (2)\",\n    # \"sort numbers with H2 codec (1)\",\n    # \"sort mixed values with H2 codec\",\n    # \"sort lists of mixed values with H2 codec\",\n    # \"sort routes with values (1)\",\n    # \"sort routes with values (2)\",\n    # \"read sample data\",\n    # \"read and write keys with lists\",\n    # \"encode keys with list elements\",\n    # \"read and write phrases with unanalyzed lists\",\n    # \"read partial POS phrases\",\n    # \"read single phrases (1)\",\n    # \"read single phrases (2)\",\n    # \"read single phrases (3)\",\n    # \"read single phrases (4)\",\n    # \"writing phrases with non-unique keys fails\",\n    # \"reminders\",\n    # \"invalid key not accepted (1)\",\n    # \"invalid key not accepted (2)\",\n    # \"catching errors (2)\",\n    # \"catching errors (1)\",\n    # \"building PODs from SPO phrases\",\n    # \"read phrases in lockstep\",\n    # \"has_any yields existence of key\",\n    # \"$write rejects duplicate S/P pairs\",\n    # \"codec accepts long keys\",\n    # \"write private types (1)\",\n    # \"write private types (2)\",\n    # \"write private types (3)\",\n    # \"bloom filter serialization without writes\",\n    \"use non-string subjects in phrases\"\n    ]\n  @_prune()\n  @_main()\n  # @[ \"XXX\" ] null, -> help \"(done)\"\n  # @[ \"YYY\" ] null, -> help \"(done)\"\n  # @[ \"ZZZ\" ] null, -> help \"(done)\"\n\n  # debug '©P9AOR', ( HOLLERITH.CODEC[ 'typemarkers'  ][ 'null'       ] ).toString 16\n  # debug '©xxmIp', ( HOLLERITH.CODEC[ 'typemarkers'  ][ 'false'      ] ).toString 16\n  # debug '©ZeY26', ( HOLLERITH.CODEC[ 'typemarkers'  ][ 'true'       ] ).toString 16\n  # debug '©WgER9', ( HOLLERITH.CODEC[ 'typemarkers'  ][ 'date'       ] ).toString 16\n  # debug '©UmpjJ', ( HOLLERITH.CODEC[ 'typemarkers'  ][ 'ninfinity'  ] ).toString 16\n  # debug '©Url0K', ( HOLLERITH.CODEC[ 'typemarkers'  ][ 'nnumber'    ] ).toString 16\n  # debug '©nFIIi', ( HOLLERITH.CODEC[ 'typemarkers'  ][ 'pnumber'    ] ).toString 16\n  # debug '©LZ58R', ( HOLLERITH.CODEC[ 'typemarkers'  ][ 'pinfinity'  ] ).toString 16\n  # debug '©MYxda', ( HOLLERITH.CODEC[ 'typemarkers'  ][ 'text'       ] ).toString 16\n\n\n\n\n\n\n\n\n\n\n"]}
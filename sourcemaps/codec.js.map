{"version":3,"sources":["codec.coffee"],"names":[],"mappings":"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","file":"codec.js","sourceRoot":"/source/","sourcesContent":["\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'HOLLERITH/CODEC'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\n#...........................................................................................................\nHOLLERITH                 = require './main'\n\n\n#-----------------------------------------------------------------------------------------------------------\nlast_unicode_chr        = ( String.fromCharCode 0xdbff ) + ( String.fromCharCode 0xdfff )\n### should always be 3 in modern versions of NodeJS: ###\nmax_bytes_per_chr       = Math.max ( new Buffer \"\\uffff\" ).length, ( new Buffer last_unicode_chr ).length / 2\nrbuffer_min_size        = 1024\nrbuffer_delta_size      = 1024\nrbuffer_max_size        = 65536\nrbuffer_new_size        = Math.floor ( rbuffer_max_size + rbuffer_min_size ) / 2\nrbuffer                 = new Buffer rbuffer_min_size\nbuffer_too_short_error  = new Error \"buffer too short\"\n\n#-----------------------------------------------------------------------------------------------------------\n@[ 'typemarkers' ]  = {}\n#...........................................................................................................\ntm_lo               = @[ 'typemarkers'  ][ 'lo'         ] = 0x00\ntm_null             = @[ 'typemarkers'  ][ 'null'       ] = 'B'.codePointAt 0\ntm_false            = @[ 'typemarkers'  ][ 'false'      ] = 'C'.codePointAt 0\ntm_true             = @[ 'typemarkers'  ][ 'true'       ] = 'D'.codePointAt 0\ntm_list             = @[ 'typemarkers'  ][ 'list'       ] = 'E'.codePointAt 0\ntm_date             = @[ 'typemarkers'  ][ 'date'       ] = 'G'.codePointAt 0\ntm_ninfinity        = @[ 'typemarkers'  ][ 'ninfinity'  ] = 'J'.codePointAt 0\ntm_nnumber          = @[ 'typemarkers'  ][ 'nnumber'    ] = 'K'.codePointAt 0\ntm_pnumber          = @[ 'typemarkers'  ][ 'pnumber'    ] = 'L'.codePointAt 0\ntm_pinfinity        = @[ 'typemarkers'  ][ 'pinfinity'  ] = 'M'.codePointAt 0\ntm_text             = @[ 'typemarkers'  ][ 'text'       ] = 'T'.codePointAt 0\ntm_hi               = @[ 'typemarkers'  ][ 'hi'         ] = 0xff\n\n#-----------------------------------------------------------------------------------------------------------\n@[ 'bytecounts' ]   = {}\n#...........................................................................................................\nbytecount_singular  = @[ 'bytecounts'   ][ 'singular'   ] = 1\nbytecount_number    = @[ 'bytecounts'   ][ 'number'     ] = 9\nbytecount_date      = @[ 'bytecounts'   ][ 'date'       ] = bytecount_number + 1\n\n#-----------------------------------------------------------------------------------------------------------\n@[ 'sentinels' ]  = {}\n#...........................................................................................................\n### http://www.merlyn.demon.co.uk/js-datex.htm ###\n@[ 'sentinels' ][ 'firstdate' ] = new Date -8640000000000000\n@[ 'sentinels' ][ 'lastdate'  ] = new Date +8640000000000000\n\n#-----------------------------------------------------------------------------------------------------------\n@[ 'keys' ]  = {}\n#...........................................................................................................\n@[ 'keys' ][ 'lo' ] = new Buffer [ @[ 'typemarkers' ][ 'lo' ] ]\n@[ 'keys' ][ 'hi' ] = new Buffer [ @[ 'typemarkers' ][ 'hi' ] ]\n\n#-----------------------------------------------------------------------------------------------------------\ngrow_rbuffer = ( delta_size ) ->\n  delta_size ?= rbuffer_delta_size\n  return null if delta_size < 1\n  # warn \"growing rbuffer (#{delta_size} bytes)\"\n  new_result_buffer = new Buffer rbuffer.length + delta_size\n  rbuffer.copy new_result_buffer\n  rbuffer     = new_result_buffer\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\nrelease_extraneous_rbuffer_bytes = ->\n  rbuffer = new Buffer rbuffer_new_size if rbuffer.length > rbuffer_max_size\n  return null\n\n\n#===========================================================================================================\n# VARIANTS\n#-----------------------------------------------------------------------------------------------------------\nwrite_singular = ( idx, value ) ->\n  throw buffer_too_short_error unless rbuffer.length >= idx + bytecount_singular\n  if      value is null   then typemarker = tm_null\n  else if value is false  then typemarker = tm_false\n  else if value is true   then typemarker = tm_true\n  else throw new Error \"unable to encode value of type #{CND.type_of value}\"\n  rbuffer[ idx ] = typemarker\n  return idx + bytecount_singular\n\n#-----------------------------------------------------------------------------------------------------------\nread_singular = ( buffer, idx ) ->\n  switch typemarker = buffer[ idx ]\n    when tm_null  then value = null\n    when tm_false then value = false\n    when tm_true  then value = true\n    else throw new Error \"unable to decode 0x#{typemarker.toString 16} at index #{idx} (#{rpr buffer})\"\n  return [ idx + bytecount_singular, value, ]\n\n\n#===========================================================================================================\n# NUMBERS\n#-----------------------------------------------------------------------------------------------------------\nwrite_number = ( idx, number ) ->\n  throw buffer_too_short_error unless rbuffer.length >= idx + bytecount_number\n  if number < 0\n    type    = tm_nnumber\n    number  = -number\n  else\n    type    = tm_pnumber\n  rbuffer[ idx ] = type\n  rbuffer.writeDoubleBE number, idx + 1\n  _invert_buffer rbuffer, idx if type is tm_nnumber\n  return idx + bytecount_number\n\n#-----------------------------------------------------------------------------------------------------------\nwrite_infinity = ( idx, number ) ->\n  throw buffer_too_short_error unless rbuffer.length >= idx + bytecount_singular\n  rbuffer[ idx ] = if number is -Infinity then tm_ninfinity else tm_pinfinity\n  return idx + bytecount_singular\n\n#-----------------------------------------------------------------------------------------------------------\nread_nnumber = ( buffer, idx ) ->\n  throw new Error \"not a negative number at index #{idx}\" unless buffer[ idx ] is tm_nnumber\n  copy = _invert_buffer ( new Buffer buffer.slice idx, idx + bytecount_number ), 0\n  return [ idx + bytecount_number, -( copy.readDoubleBE 1 ), ]\n\n#-----------------------------------------------------------------------------------------------------------\nread_pnumber = ( buffer, idx ) ->\n  throw new Error \"not a positive number at index #{idx}\" unless buffer[ idx ] is tm_pnumber\n  return [ idx + bytecount_number, buffer.readDoubleBE idx + 1, ]\n\n#-----------------------------------------------------------------------------------------------------------\n_invert_buffer = ( buffer, idx ) ->\n  buffer[ i ] = ~buffer[ i ] for i in [ idx + 1 .. idx + 8 ]\n  return buffer\n\n\n#===========================================================================================================\n# DATES\n#-----------------------------------------------------------------------------------------------------------\nwrite_date = ( idx, date ) ->\n  number          = +date\n  rbuffer[ idx ]  = tm_date\n  new_idx         = write_number idx + 1, number\n  return new_idx\n\n#-----------------------------------------------------------------------------------------------------------\nread_date = ( buffer, idx ) ->\n  throw new Error \"not a date at index #{idx}\" unless buffer[ idx ] is tm_date\n  switch type = buffer[ idx + 1 ]\n    when tm_nnumber    then [ idx, value, ] = read_nnumber    buffer, idx + 1\n    when tm_pnumber    then [ idx, value, ] = read_pnumber    buffer, idx + 1\n    else throw new Error \"unknown date type marker 0x#{type.toString 16} at index #{idx}\"\n  return [ idx, ( new Date value ), ]\n\n\n#===========================================================================================================\n# TEXTS\n#-----------------------------------------------------------------------------------------------------------\nwrite_text = ( idx, text ) ->\n  text                              = text.replace /\\x01/g, '\\x01\\x02'\n  text                              = text.replace /\\x00/g, '\\x01\\x01'\n  length_estimate                   = max_bytes_per_chr * text.length + 3\n  grow_rbuffer length_estimate - rbuffer.length - idx - 1\n  rbuffer[ idx                    ] = tm_text\n  byte_count                        = rbuffer.write text, idx + 1\n  rbuffer[ idx + byte_count + 1   ] = tm_lo\n  return idx + byte_count + 2\n\n#-----------------------------------------------------------------------------------------------------------\nread_text = ( buffer, idx ) ->\n  # urge '©J2d6R', buffer[ idx ], buffer[ idx ] is tm_text\n  throw new Error \"not a text at index #{idx}\" unless buffer[ idx ] is tm_text\n  stop_idx = idx\n  loop\n    stop_idx += +1\n    break if ( byte = buffer[ stop_idx ] ) is tm_lo\n    throw new Error \"runaway string at index #{idx}\" unless byte?\n  R = buffer.toString 'utf-8', idx + 1, stop_idx\n  R = R.replace /\\x01\\x02/g, '\\x01'\n  R = R.replace /\\x01\\x01/g, '\\x00'\n  return [ stop_idx + 1, R, ]\n\n\n#===========================================================================================================\n# LISTS\n#-----------------------------------------------------------------------------------------------------------\n### TAINT remove is_top_level if not used ###\nread_list = ( buffer, idx, is_top_level ) ->\n  # urge '©J2d6R', buffer[ idx ], buffer[ idx ] is tm_text\n  # throw new Error \"unable to read nested list at index #{idx}\" unless is_top_level\n  throw new Error \"not a list at index #{idx}\" unless buffer[ idx ] is tm_list\n  R     = []\n  idx  += +1\n  loop\n    break if ( byte = buffer[ idx ] ) is tm_lo\n    [ idx, value, ] = _decode buffer, idx, false, true\n    R.push value[ 0 ]\n    throw new Error \"runaway list at index #{idx}\" unless byte?\n  return [ idx + 1, R, ]\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\nwrite = ( idx, value ) ->\n  switch type = CND.type_of value\n    when 'text'       then return write_text     idx, value\n    when 'number'     then return write_number   idx, value\n    when 'jsinfinity' then return write_infinity idx, value\n    when 'jsdate'     then return write_date     idx, value\n  #.........................................................................................................\n  return write_singular  idx, value\n\n\n#===========================================================================================================\n# PUBLIC API\n#-----------------------------------------------------------------------------------------------------------\n@encode = ( key, extra_byte ) ->\n  rbuffer.fill 0x99\n  throw new Error \"expected a list, got a #{type}\" unless ( type = CND.type_of key ) is 'list'\n  idx = _encode key, 0, true\n  #.........................................................................................................\n  if extra_byte?\n    rbuffer[ idx ]  = extra_byte\n    idx            += +1\n  #.........................................................................................................\n  R = new Buffer idx\n  rbuffer.copy R, 0, 0, idx\n  release_extraneous_rbuffer_bytes()\n  #.........................................................................................................\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n### TAINT remove is_top_level if not used ###\n_encode = ( key, idx, is_top_level ) ->\n  last_element_idx = key.length - 1\n  # debug '©GP4RE', rpr key\n  for element, element_idx in key\n    loop\n      try\n        if CND.isa_list element\n          # unless is_top_level\n          #   throw new Error \"unable to encode nested list\"\n          rbuffer[ idx ]  = tm_list\n          idx            += +1\n          for sub_element in element\n            idx = _encode [ sub_element, ], idx, false\n          rbuffer[ idx ]  = tm_lo\n          idx            += +1\n        else\n          idx = write idx, element\n        break\n      catch error\n        unless error is buffer_too_short_error\n          key_rpr = []\n          for element in key\n            if CND.isa_jsbuffer element\n              key_rpr.push \"#{HOLLERITH.DUMP.rpr_of_buffer null, key[ 2 ]}\"\n            else\n              key_rpr.push rpr element\n          warn \"detected problem with key [ #{rpr key_rpr.join ', '} ]\"\n          throw error\n        grow_rbuffer()\n  #.........................................................................................................\n  return idx\n\n#-----------------------------------------------------------------------------------------------------------\n@decode = ( buffer ) ->\n  return ( _decode buffer, 0, true, false )[ 1 ]\n\n#-----------------------------------------------------------------------------------------------------------\n### TAINT remove is_top_level if not used ###\n_decode = ( buffer, idx, is_top_level, single ) ->\n  R         = []\n  last_idx  = buffer.length - 1\n  loop\n    break if idx > last_idx\n    switch type = buffer[ idx ]\n      when tm_list       then [ idx, value, ] = read_list       buffer, idx, is_top_level\n      when tm_text       then [ idx, value, ] = read_text       buffer, idx\n      when tm_nnumber    then [ idx, value, ] = read_nnumber    buffer, idx\n      when tm_ninfinity  then [ idx, value, ] = [ idx + 1, -Infinity, ]\n      when tm_pnumber    then [ idx, value, ] = read_pnumber    buffer, idx\n      when tm_pinfinity  then [ idx, value, ] = [ idx + 1, +Infinity, ]\n      when tm_date       then [ idx, value, ] = read_date       buffer, idx\n      else                    [ idx, value, ] = read_singular   buffer, idx\n    R.push value\n    break if single\n  #.........................................................................................................\n  return [ idx, R ]\n\n\n# debug ( require './dump' ).rpr_of_buffer null, buffer = @encode [ 'aaa', [], ]\n# debug '©tP5xQ', @decode buffer\n\n"]}
{"version":3,"sources":["benchmark.coffee"],"names":[],"mappings":"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","file":"benchmark.js","sourceRoot":"/source/","sourcesContent":["\n\n\n\n\n\n\n\n############################################################################################################\nnjs_path                  = require 'path'\n# njs_fs                    = require 'fs'\njoin                      = njs_path.join\n#...........................................................................................................\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'HOLLERITH/tests'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nsuspend                   = require 'coffeenode-suspend'\nstep                      = suspend.step\nafter                     = suspend.after\neventually                = suspend.eventually\nimmediately               = suspend.immediately\n# repeat_immediately        = suspend.repeat_immediately\n# every                     = suspend.every\n# #...........................................................................................................\n# test                      = require 'guy-test'\n# #...........................................................................................................\n# D                         = require 'pipedreams2'\n# $                         = D.remit.bind D\n# #...........................................................................................................\n# HOLLERITH                 = require './main'\n# db                        = null\n# #...........................................................................................................\nBYTEWISE                  = require 'bytewise'\n# levelup                   = require 'levelup'\n# leveldown                 = require 'leveldown'\nCODEC                     = require 'hollerith-codec'\nPASSPHRASE                = require 'coffeenode-passphrase'\nƒ                         = CND.format_number.bind CND\n\n#-----------------------------------------------------------------------------------------------------------\ntimes = {}\n\n#-----------------------------------------------------------------------------------------------------------\nstart = ( name ) ->\n  whisper \"start #{name}\"\n  times[ name ] = process.hrtime()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\nstop = ( name ) ->\n  dt = process.hrtime times[ name ]\n  times[ name ] = dt[ 0 ] + dt[ 1 ] / 1e9\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\nreport = ( n, min_name ) ->\n  columnify_settings =\n    config:\n      dt:     { align: 'right' }\n      rel:    { align: 'right' }\n      max:    { align: 'right' }\n  if min_name?\n    min = times[ min_name ]\n  else\n    min = Math.min ( dt for _, dt of times )...\n  max = Math.max ( dt for _, dt of times )...\n  debug '©q6yuS', min, max\n  data = []\n  for name, dt of times\n    # nanos = \"000000000#{dt[ 1 ]}\"\n    # nanos = nanos[ nanos.length - 9 .. nanos.length - 1 ]\n    # urge \"#{dt[ 0 ]}.#{nanos} #{name}\"\n    entry =\n      name:     name\n      dt:       ( dt.toFixed 9 )\n      rel:      \"#{( dt / min ).toFixed 2}\"\n      max:      \"#{( dt / max ).toFixed 2}\"\n    data.push entry\n  urge \"time needed to process #{ƒ n} arbitrary strings (lower is better):\"\n  help '\\n' + CND.columnify data, columnify_settings\n\n#-----------------------------------------------------------------------------------------------------------\n@test_h2c = ( probes ) ->\n  start 'H2C.encode'\n  CODEC.encode probe for probe in probes\n  stop 'H2C.encode'\n\n#-----------------------------------------------------------------------------------------------------------\n@test_bytewise = ( probes ) ->\n  start 'bytewise.encode'\n  BYTEWISE.encode probe for probe in probes\n  stop 'bytewise.encode'\n\n#-----------------------------------------------------------------------------------------------------------\n@test_json = ( probes ) ->\n  start 'new Buffer JSON.stringify'\n  new Buffer JSON.stringify probe for probe in probes\n  stop 'new Buffer JSON.stringify'\n\n#-----------------------------------------------------------------------------------------------------------\n@test_new_buffer = ( probes ) ->\n  start 'new_buffer'\n  for probe in probes\n    b = new Buffer probe\n  stop 'new_buffer'\n\n#-----------------------------------------------------------------------------------------------------------\n@test_buffer_write = ( probes ) ->\n  b = new Buffer 1024\n  start 'buffer_write'\n  for probe in probes\n    b.write probe[ 0 ]\n  stop 'buffer_write'\n\n#-----------------------------------------------------------------------------------------------------------\n@test_string_replace = ( probes ) ->\n  start 'string_replace'\n  for probe in probes\n    x = probe[ 0 ].replace /a/g, '#'\n  stop 'string_replace'\n\n#-----------------------------------------------------------------------------------------------------------\n@main = ->\n  n = 100000\n  whisper \"generating #{ƒ n} probes\"\n  probes = ( [ PASSPHRASE.get_passphrase(), ] for idx in [ 1 .. n ] )\n  help \"generated #{ƒ probes.length} probes; now performing benchmarks\"\n  @test_bytewise              probes\n  @test_json                  probes\n  @test_h2c                   probes\n  @test_new_buffer            probes\n  @test_buffer_write          probes\n  @test_string_replace        probes\n  report n, 'new Buffer JSON.stringify'\n\n\n############################################################################################################\nunless module.parent?\n  @main()\n\n\n\n\n\n\n\n\n\n\n\n"]}
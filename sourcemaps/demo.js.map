{"version":3,"sources":["demo.coffee"],"names":[],"mappings":"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","file":"demo.js","sourceRoot":"/source/","sourcesContent":["\n\n\n############################################################################################################\nnjs_path                  = require 'path'\n# njs_fs                    = require 'fs'\njoin                      = njs_path.join\n#...........................................................................................................\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'HOLLERITH/demo'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nsuspend                   = require 'coffeenode-suspend'\nstep                      = suspend.step\nafter                     = suspend.after\neventually                = suspend.eventually\nimmediately               = suspend.immediately\nrepeat_immediately        = suspend.repeat_immediately\nevery                     = suspend.every\n#...........................................................................................................\n# BYTEWISE                  = require 'bytewise'\n# through                   = require 'through2'\n# LevelBatch                = require 'level-batch-stream'\n# BatchStream               = require 'batch-stream'\n# parallel                  = require 'concurrent-writable'\nD                         = require 'pipedreams'\n$                         = D.remit.bind D\n$async                    = D.remit_async.bind D\nASYNC                     = require 'async'\nCHR                       = require 'coffeenode-chr'\nKWIC                      = require 'kwic'\n#...........................................................................................................\nnew_db                    = require 'level'\n# new_levelgraph            = require 'levelgraph'\n# db                        = new_levelgraph '/tmp/levelgraph'\nHOLLERITH                 = require './main'\nƒ                         = CND.format_number.bind CND\n#...........................................................................................................\noptions                   = null\n\n#-----------------------------------------------------------------------------------------------------------\n@_misfit          = Symbol 'misfit'\n\n\n#===========================================================================================================\n# PIPEDREAMS\n#-----------------------------------------------------------------------------------------------------------\nD.new_indexer = ( idx = 0 ) -> ( data ) => [ idx++, data, ]\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@initialize = ( handler ) ->\n  options[ 'db' ] = HOLLERITH.new_db options[ 'route' ]\n  handler null\n\n#-----------------------------------------------------------------------------------------------------------\n@main = ( first_query ) ->\n  first_query ?= { gte: 'os|rank/cjt:0', lte: 'os|rank/cjt:9', }\n  step ( resume ) =>\n    yield @initialize resume\n    db = options[ 'db' ]\n    count_chrs = ( text ) -> ( CHR.chrs_from_text text, input: 'xncr' ).length\n    #.......................................................................................................\n    input = db[ '%self' ].createKeyStream first_query\n    # k = \"so|glyph:繼|pod:\"\n    # input = db[ '%self' ].createKeyStream db, { gte: k, lte: k + '\\uffff' }\n    # debug '©cW8tK', HOLLERITH.new_key db, 'os', 'rank/cjt', '00000'\n    #.......................................................................................................\n    ### TAINT We can currently not use `HOLLERITH2.read_sub` because HOLLERITH2 assumes a key-only\n    DB that uses binary encoding with a custom https://github.com/deanlandolt/bytewise layer; the current\n    Jizura DB version uses UTF-8 strings and is a key/value DB. ###\n    #.......................................................................................................\n    input\n      .pipe @_$split_bkey()\n      #.....................................................................................................\n      # .pipe HOLLERITH.read_sub db, indexed: yes, ( key ) =>\n      .pipe @read_sub db, indexed: yes, ( key ) =>\n        [ pt, ok, rank, sk, glyph, ] = key\n        sub_key = \"so|glyph:#{glyph}|pod:\"\n        return db[ '%self' ].createValueStream { gte: sub_key, lte: sub_key + '\\uffff' }\n      #.....................................................................................................\n      .pipe D.$densort 0, 0, true\n      #.....................................................................................................\n      .pipe $ ( [ idx, [ pod, ], ], send ) =>\n        debug '©jd5cE', pod\n        unless pod[ 'strokeorder/short'  ]?\n          warn '©9YXoq',  pod\n        else\n          glyph       = pod[ 'glyph/uchr'         ]\n          strokeorder = pod[ 'strokeorder/short'  ][ 0 ].length\n          lineup      = pod[ 'guide/lineup/uchr'  ].replace /\\u3000/g, ''\n          send [ glyph, strokeorder, lineup, ]\n      #.....................................................................................................\n      .pipe $ ( [ glyph, strokeorder, lineup, ], send ) =>\n        send [ glyph, strokeorder, count_chrs lineup, ]\n      #.....................................................................................................\n      .pipe D.$sort ( a, b ) ->\n        idx = 1\n        return +1 if a[ idx ] > b[ idx ]\n        return -1 if a[ idx ] < b[ idx ]\n        return  0\n      #.....................................................................................................\n      .pipe D.$show()\n\n#-----------------------------------------------------------------------------------------------------------\n@_$split_bkey = -> $ ( bkey, send ) => send @_split_bkey bkey\n\n#-----------------------------------------------------------------------------------------------------------\n@_split_bkey = ( bkey ) ->\n  R = bkey.toString 'utf-8'\n  R = ( R.split '|' )[ .. 2 ]\n  R = [ R[ 0 ], ( R[ 1 ].split ':' )..., ( R[ 2 ].split ':' )..., ]\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@_$split_so_bkey = -> $ ( bkey, send ) => send @_split_so_bkey bkey\n\n#-----------------------------------------------------------------------------------------------------------\n@_split_so_bkey = ( bkey ) ->\n  R       = bkey.toString 'utf-8'\n  R       = R.split '|'\n  idx_txt = R[ 3 ]\n  R       = [ ( R[ 1 ].split ':' )[ 1 ], ( R[ 2 ].split ':' )..., ]\n  R.push ( parseInt idx_txt, 10 ) if idx_txt? and idx_txt.length > 0\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@_lte_from_gte = ( gte ) ->\n  R = new Buffer ( last_idx = Buffer.byteLength gte ) + 1\n  R.write gte\n  R[ last_idx ] = 0xff\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@$lineup_from_glyph = ( db ) ->\n  settings =\n    indexed:  no\n    single:   yes\n  return @read_sub db, settings, ( glyph ) =>\n    lte = \"so|glyph:#{glyph}|guide/lineup/uchr:\"\n    sub_input = db[ '%self' ].createKeyStream { gte: lte, lte: @_lte_from_gte lte, }\n    return sub_input\n\n#-----------------------------------------------------------------------------------------------------------\n@$shapeclass_wbf_from_glyph_and_lineup = ( db ) ->\n  ### TAINT wrong ###\n  settings =\n    indexed:  no\n    single:   yes\n  return @read_sub db, settings, ( [ glyph, lineup_glyphs, ] ) =>\n    for lineup_glyph in lineup_glyphs\n      do ( lineup_glyph ) =>\n        gte = \"so|glyph:#{lineup_glyph}|factor/strokeclass/wbf:\"\n        sub_input = db[ '%self' ].createKeyStream { gte: gte, lte: @_lte_from_gte gte, }\n        return sub_input\n\n#-----------------------------------------------------------------------------------------------------------\nHOLLERITH.$pick_subject = ->\n  return $ ( lkey, send ) =>\n    [ pt, _, v0, _, v1, ] = lkey\n    send if pt is 'so' then v0 else v1\n\n#-----------------------------------------------------------------------------------------------------------\nHOLLERITH.$pick_object = ->\n  return $ ( lkey, send ) =>\n    [ pt, _, v0, _, v1, ] = lkey\n    send if pt is 'so' then v1 else v0\n\n#-----------------------------------------------------------------------------------------------------------\nHOLLERITH.$pick_values = ->\n  return $ ( lkey, send ) =>\n    [ pt, _, v0, _, v1, ] = lkey\n    send if pt is 'so' then [ v0, v1, ] else [ v1, v0, ]\n\n#-----------------------------------------------------------------------------------------------------------\n@dump_jizura_db = ->\n  source_db   = HOLLERITH.new_db '/Volumes/Storage/temp/jizura-hollerith2'\n  prefix      = [ 'spo', '𡏠', ]\n  prefix      = [ 'spo', '㔰', ]\n  input       = HOLLERITH.create_phrasestream source_db, prefix\n  #.........................................................................................................\n  input\n    .pipe D.$count ( count ) -> help \"read #{count} keys\"\n    .pipe $ ( data, send ) => send JSON.stringify data\n    .pipe D.$show()\n\n#-----------------------------------------------------------------------------------------------------------\n@find_good_kwic_sample_glyphs_3 = ( db ) ->\n  ### version for Hollerith2 DBs; using `HOLLERITH.remit_async` instead of `HOLLERITH.read_sub`. ###\n  ###\n  *  ▶  '[[\"勷\",5,9907,[\"亠\",\"吅\",\"𠀎\",\"𧘇\",\"力\"]],\"41\",\"25\",\"11\",\"35\",\"53\"]'\n  *  ▶  '[[\"噿\",5,13090,[\"口\",\"羽\",\"亠\",\"从\",\"十\"]],\"25\",\"54\",\"41\",\"34\",\"12\"]'\n  *  ▶  '[[\"塾\",5,3818,[\"亠\",\"口\",\"子\",\"丸\",\"土\"]],\"41\",\"25\",\"51\",\"35\",\"12\"]'\n  *  ▶  '[[\"墩\",5,5457,[\"土\",\"亠\",\"口\",\"子\",\"夊\"]],\"12\",\"41\",\"25\",\"51\",\"35\"]'\n  *  ▶  '[[\"孃\",5,7225,[\"女\",\"亠\",\"吅\",\"𠀎\",\"𧘇\"]],\"53\",\"41\",\"25\",\"11\",\"35\"]'\n  *  ▶  '[[\"寡\",5,3412,[\"宀\",\"丆\",\"且\",\"八\",\"刀\"]],\"44\",\"13\",\"25\",\"34\",\"53\"]'\n  *  ▶  '[[\"巕\",5,13586,[\"山\",\"卄\",\"𠂤\",\"辛\",\"女\"]],\"25\",\"12\",\"32\",\"41\",\"53\"]'\n  *  ▶  '[[\"橔\",5,13883,[\"木\",\"亠\",\"口\",\"子\",\"夊\"]],\"12\",\"41\",\"25\",\"51\",\"35\"]'\n  *  ▶  '[[\"灂\",5,12349,[\"氵\",\"爫\",\"罒\",\"\",\"寸\"]],\"44\",\"34\",\"25\",\"51\",\"12\"]'\n  *  ▶  '[[\"纏\",5,3421,[\"糹\",\"广\",\"里\",\"八\",\"土\"]],\"55\",\"41\",\"25\",\"34\",\"12\"]'\n  *  ▶  '[[\"纕\",5,8882,[\"糹\",\"亠\",\"吅\",\"𠀎\",\"𧘇\"]],\"55\",\"41\",\"25\",\"11\",\"35\"]'\n  *  ▶  '[[\"鄸\",5,8392,[\"卄\",\"罒\",\"冖\",\"夕\",\"阝\"]],\"12\",\"25\",\"45\",\"35\",\"52\"]'\n  *  ▶  '[[\"韽\",5,10377,[\"亽\",\"𠃌\",\"酉\",\"立\",\"日\"]],\"34\",\"5\",\"12\",\"41\",\"25\"]'\n  *  ▶  '[[\"頀\",5,8385,[\"立\",\"日\",\"卄\",\"隹\",\"又\"]],\"41\",\"25\",\"12\",\"32\",\"54\"]'\n  *  ▶  '[[\"驐\",5,12644,[\"馬\",\"亠\",\"口\",\"子\",\"夊\"]],\"12\",\"41\",\"25\",\"51\",\"35\"]'\n  *  ▶  '[[\"骧\",5,6010,[\"马\",\"亠\",\"吅\",\"𠀎\",\"𧘇\"]],\"55\",\"41\",\"25\",\"11\",\"35\"]'\n  ###\n  #.........................................................................................................\n  step ( resume ) =>\n    db_route  = join __dirname, '../../jizura-datasources/data/leveldb-v2'\n    db       ?= HOLLERITH.new_db db_route, create: no\n    help \"using DB at #{db[ '%self' ][ 'location' ]}\"\n    #.......................................................................................................\n    CHR = require join __dirname, '../../coffeenode-chr'\n    chrs_from_text = ( text ) -> CHR.chrs_from_text text, input: 'xncr'\n    #.......................................................................................................\n    prefix  = [ 'pos', 'guide/lineup/length', 5, ]\n    query   = { prefix, }\n    input   = HOLLERITH.create_phrasestream db, query\n    #.......................................................................................................\n    decode_lineup = ( lineup ) =>\n      return chrs_from_text lineup.replace /\\u3000/g, ''\n    #.......................................................................................................\n    xncr_from_uchr = ( uchr ) =>\n      return if ( CHR.as_rsg uchr ) is 'u-pua' then ( CHR.as_xncr uchr, csg: 'jzr' ) else uchr\n    #.......................................................................................................\n    input\n      #.....................................................................................................\n      .pipe $async ( phrase, done ) =>\n        [ _, _, lineup_length, glyph, ]       = phrase\n        sub_prefix                            = [ 'spo', glyph, 'rank/cjt', ]\n        sub_fallback                          = [ null, null, null, Infinity, ]\n        sub_query                             = { prefix: sub_prefix, fallback: sub_fallback, }\n        debug '©zfQhm', phrase, sub_prefix if glyph is '公'\n        HOLLERITH.read_one_phrase db, sub_query, ( error, sub_phrase ) =>\n          return done.error error if error?\n          # debug '©FST09', sub_phrase unless sub_phrase[ sub_phrase.length - 1 ] is Infinity\n          [ _, _, _, rank, ] = sub_phrase\n          done [ glyph, { lineup_length, rank, }, ]\n      #.....................................................................................................\n      # .pipe D.$show()\n      .pipe D.$filter ( [ glyph, { lineup_length, rank, }, ] ) -> rank < 15000\n      #.....................................................................................................\n      .pipe $async ( entry, done ) =>\n        [ glyph, { lineup_length, rank, }, ]  = entry\n        sub_prefix                            = [ 'spo', glyph, 'guide/lineup/uchr', ]\n        sub_query                             = { prefix: sub_prefix, star: '*', fallback: null, }\n        HOLLERITH.read_one_phrase db, sub_query, ( error, sub_phrase ) =>\n          # debug '©h4GY2', sub_phrase\n          return done.error error if error?\n          return done() unless sub_phrase?\n          [ _, _, _, guides, ]  = sub_phrase\n          guides                = decode_lineup guides\n          done [ glyph, { lineup_length, rank, guides, }, ]\n      #.....................................................................................................\n      .pipe $async ( entry, done ) =>\n        [ glyph, { lineup_length, rank, guides, }, ]  = entry\n        tasks                                         = []\n        #...................................................................................................\n        for guide in guides\n          do ( guide ) =>\n            guide_xncr        = xncr_from_uchr guide\n            sub_prefix        = [ 'spo', guide_xncr, 'factor/shapeclass/wbf', ]\n            sub_fallback      = [ null, null, null, 'X', ]\n            sub_query         = { prefix: sub_prefix, fallback: sub_fallback, }\n            tasks.push ( handler ) -> HOLLERITH.read_one_phrase db, sub_query, handler\n        #...................................................................................................\n        ASYNC.parallelLimit tasks, 10, ( error, sub_phrases ) =>\n          return done.error error if error?\n          strokeclasses = []\n          for sub_phrase, sub_idx in sub_phrases\n            [ _, _, _, strokeorder, ] = sub_phrase\n            strokeclasses[ sub_idx ]  = strokeorder[ 0 ]\n          done [ glyph, { lineup_length, rank, guides, strokeclasses, }, ]\n      #.....................................................................................................\n      .pipe D.$filter ( entry ) =>\n        [ glyph, { lineup_length, rank, guides, strokeclasses, }, ] = entry\n        return ( strokeclasses[ .. ].sort().join '' ) is '12345'\n      #.....................................................................................................\n      .pipe $ ( [ glyph, { lineup_length, rank, guides, strokeclasses, }, ], send ) ->\n        guides        = guides.join ''\n        strokeclasses = strokeclasses.join ''\n        send [ glyph, { lineup_length, rank, guides, strokeclasses, }, ]\n      #.....................................................................................................\n      # .pipe D.$filter ( entry ) => entry[ 1 ][ 'strokeclasses' ] is '12345'\n      .pipe D.$show()\n\n#-----------------------------------------------------------------------------------------------------------\n@read_factors = ( db, handler ) ->\n  #.........................................................................................................\n  step ( resume ) =>\n    Z         = {}\n    db_route  = join __dirname, '../../jizura-datasources/data/leveldb-v2'\n    db       ?= HOLLERITH.new_db db_route, create: no\n    #.......................................................................................................\n    prefix  = [ 'pos', 'factor/', ]\n    query   = { prefix, star: '*', }\n    input   = HOLLERITH.create_phrasestream db, query\n    #.......................................................................................................\n    input\n      .pipe do =>\n        last_sbj  = null\n        target    = null\n        #...................................................................................................\n        return $ ( phrase, send, end ) =>\n          #.................................................................................................\n          if phrase?\n            [ _, prd, obj, sbj, ] = phrase\n            prd           = prd.replace /^factor\\//g, ''\n            sbj           = CHR.as_uchr sbj, input: 'xncr'\n            if sbj isnt last_sbj\n              send target if target?\n              target    = Z[ sbj ]?= { glyph: sbj, }\n              last_sbj  = sbj\n            target[ prd ] = obj\n            Z[ obj ]      = target if prd is 'sortcode'\n          #.................................................................................................\n          if end?\n            send target if target?\n            end()\n      .pipe D.$on_end -> handler null, Z\n\n#-----------------------------------------------------------------------------------------------------------\n@read_sample = ( db, limit_or_list, handler ) ->\n  ### Return a gamut of select glyphs from the DB. `limit_or_list` may be a list of glyphs or a number\n  representing an upper bound to the usage rank recorded as `rank/cjt`. If `limit_or_list` is a list,\n  a POD whose keys are the glyphs in the list is returned; if it is a number, a similar POD with all the\n  glyphs whose rank is not worse than the given limit is returned. If `limit_or_list` is smaller than zero\n  or equals infinity, `null` is returned to indicate absence of a filter. ###\n  Z         = {}\n  #.......................................................................................................\n  if CND.isa_list limit_or_list\n    Z[ glyph ] = 1 for glyph in limit_or_list\n    return handler null, Z\n  #.......................................................................................................\n  return handler null, null if limit_or_list < 0 or limit_or_list is Infinity\n  #.......................................................................................................\n  throw new Error \"expected list or number, got a #{type}\" unless CND.isa_number limit_or_list\n  #.......................................................................................................\n  db_route  = join __dirname, '../../jizura-datasources/data/leveldb-v2'\n  db       ?= HOLLERITH.new_db db_route, create: no\n  #.......................................................................................................\n  lo      = [ 'pos', 'rank/cjt', 0, ]\n  hi      = [ 'pos', 'rank/cjt', limit_or_list, ]\n  query   = { lo, hi, }\n  input   = HOLLERITH.create_phrasestream db, query\n  #.......................................................................................................\n  input\n    .pipe $ ( phrase, send ) =>\n        [ _, _, _, glyph, ] = phrase\n        Z[ glyph ]          = 1\n    .pipe D.$on_end -> handler null, Z\n\n#-----------------------------------------------------------------------------------------------------------\n@show_kwic_v2_and_v3_sample = ( db ) ->\n  #.........................................................................................................\n  step ( resume ) =>\n    db_route      = join __dirname, '../../jizura-datasources/data/leveldb-v2'\n    db           ?= HOLLERITH.new_db db_route, create: no\n    help \"using DB at #{db[ '%self' ][ 'location' ]}\"\n    factor_infos  = yield @read_factors db, resume\n    # debug '©g5bVR', factors; process.exit()\n    help \"read #{( Object.keys factor_infos ).length} entries for factor_infos\"\n    ranks         = {}\n    include       = Infinity\n    include       = 15000\n    include       = 5000\n    # include       = [ '寿', '邦', '帮', '畴', '铸', '筹', '涛', '祷', '绑', '綁',    ]\n    # include       = Array.from '未釐犛剺味昧眛魅鮇沬妹業寐鄴澲末抹茉枺沫袜妺'\n    # 'guide/hierarchy/uchr'\n    #.........................................................................................................\n    sample        = yield @read_sample db, include, resume\n    #.........................................................................................................\n    $reorder_phrase = =>\n      return $ ( phrase, send ) =>\n        ### extract sortcode ###\n        [ _, _, sortcode, glyph, _, ] = phrase\n        send [ glyph, sortcode, ]\n    #.........................................................................................................\n    $exclude_gaiji = =>\n      return D.$filter ( [ glyph, sortcode ] ) =>\n        return ( not glyph.startsWith '&' ) or ( glyph.startsWith '&jzr#' )\n    #.........................................................................................................\n    $include_sample = =>\n      return D.$filter ( [ glyph, sortcode ] ) => if sample? then ( glyph of sample ) else true\n    #.........................................................................................................\n    $extract_lineup = =>\n      return $ ( [ glyph, sortcode ], send ) =>\n        [ _, lineup, ]              = sortcode.split ';'\n        [ infix, suffix, prefix, ]  = lineup.split ','\n        lineup                      = prefix + '|' + infix + suffix\n        send [ glyph, lineup, ]\n    #.........................................................................................................\n    $format_sortcode_v3 = =>\n      return $ ( [ glyph, sortcode, ], send ) =>\n        [ _, infix, suffix, prefix, ] = sortcode\n        prefix.unshift '\\u3000' until prefix.length >= 6\n        suffix.push    '\\u3000' until suffix.length >= 6\n        prefix                        = prefix.join ''\n        suffix                        = suffix.join ''\n        lineup                        = prefix + '|' + infix + suffix\n        send [ glyph, lineup, ]\n    #.........................................................................................................\n    $unpack = =>\n      return $ ( [ [ v1, v2, ], v3, ], send ) =>\n        send [ v1, v2, v3, ]\n    #.........................................................................................................\n    $transform_v1_v2 = => D.combine [\n        $reorder_phrase()\n        $exclude_gaiji()\n        $include_sample()\n        $extract_lineup()\n        ]\n    #.........................................................................................................\n    $transform_v3 = => D.combine [\n        $reorder_phrase()\n        $exclude_gaiji()\n        $include_sample()\n        $format_sortcode_v3()\n        ]\n    #.........................................................................................................\n    query_v1  = { prefix: [ 'pos', 'guide/kwic/v1/sortcode', ], }\n    query_v2  = { prefix: [ 'pos', 'guide/kwic/v2/sortcode', ], }\n    query_v3  = { prefix: [ 'pos', 'guide/kwic/v3/sortcode', ], }\n    input_v1  = ( HOLLERITH.create_phrasestream db, query_v1 ).pipe $transform_v1_v2()\n    input_v2  = ( HOLLERITH.create_phrasestream db, query_v2 ).pipe $transform_v1_v2()\n    input_v3  = ( HOLLERITH.create_phrasestream db, query_v3 ).pipe $transform_v3()\n      # .pipe D.$observe ( [ glyph, lineup, ] ) -> help glyph, lineup if glyph is '畴'\n    #.........................................................................................................\n    input_v1\n      .pipe D.$lockstep input_v2, fallback: [ null, null, ]\n      .pipe D.$lockstep input_v3\n      .pipe $unpack()\n      .pipe do =>\n        last_guide = null\n        return $ ( [ v1, v2, v3, ], send ) =>\n          [ glyph_v1\n            lineup_v1 ] = v1\n          this_guide    = ( Array.from lineup_v1 )[ 7 ]\n          return send [ v1, v2, v3, ] if this_guide is last_guide\n          last_guide    = this_guide\n          linup         = \"　　　　　　|#{this_guide}　　　　　　\"\n          send [ [ this_guide, linup, ], [ this_guide, linup, ], [ this_guide, linup, ], ]\n          send [ v1, v2, v3, ]\n      .pipe do =>\n        count       = 0\n        wspc        = '\\u3000'\n        nspc        = '\\u3000'\n        # style       = 'A'\n        style       = 'B'\n        switch style\n          when 'A'\n            vsep        = '◉'\n            include_v1  = no\n            for_mkts    = no\n            ldiff_0     = ' '\n            ldiff_1     = '<'\n            rdiff_0     = ' '\n            rdiff_1     = '>'\n          when 'B'\n            vsep        = '║'\n            include_v1  = yes\n            for_mkts    = yes\n            ldiff_0     = wspc\n            ldiff_1     = '＜'\n            rdiff_0     = wspc\n            rdiff_1     = '＞'\n          else throw new Error \"unknown style #{rpr style}\"\n        #...................................................................................................\n        return D.$observe ( [ v1, v2, v3, ] ) =>\n          [ glyph_v1, lineup_v1, ]  = v1\n          [ glyph_v2, lineup_v2, ]  = v2\n          [ glyph_v3, lineup_v3, ]  = v3\n          #.................................................................................................\n          diff                      = []\n          diff_v1                   = if glyph_v1 is glyph_v2 then ldiff_0 else ldiff_1\n          diff_v2                   = if glyph_v2 is glyph_v3 then rdiff_0 else rdiff_1\n          # debug '©28420', rpr lineup_v3\n          #.................................................................................................\n          if include_v1\n            line  =                                          lineup_v1 + nspc + glyph_v1\n            line += nspc + diff_v1 + vsep           + nspc + lineup_v2 + nspc + glyph_v2\n            line += nspc +           vsep + diff_v2 + nspc + lineup_v3 + nspc + glyph_v3\n          #.................................................................................................\n          else\n            line  =                                          lineup_v2 + nspc + glyph_v2\n            line += nspc +           vsep + diff_v2 + nspc + lineup_v3 + nspc + glyph_v3\n          #.................................................................................................\n          if for_mkts\n            line += '<<< >>>'\n          #.................................................................................................\n          else\n            line += spc + spc + spc\n          #.................................................................................................\n          count                    += 1\n          help ƒ count if count % 500 is 0\n          echo line\n    #.........................................................................................................\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@show_codepoints_with_missing_predicates = ( v2_db, prd = 'guide/kwic/v1/lineup' ) ->\n  #.........................................................................................................\n  home          = join __dirname, '../../jizura-datasources'\n  v1_route      = join home, 'data/leveldb'\n  v2_route      = join home, 'data/leveldb-v2'\n  v1_db         = HOLLERITH.new_db v1_route, create: no\n  v2_db        ?= HOLLERITH.new_db v2_route, create: no\n  help \"using DB at #{v1_db[ '%self' ][ 'location' ]}\"\n  help \"using DB at #{v2_db[ '%self' ][ 'location' ]}\"\n  rank_limit    = Infinity\n  rank_limit    = 100\n  #.........................................................................................................\n  $extract_glyph = => $ ( xpos, send ) => send xpos[ 3 ]\n  $exclude_gaiji = => D.$filter ( glyph ) => ( not glyph.startsWith '&' ) or ( glyph.startsWith '&jzr#' )\n  #.........................................................................................................\n  $show_progress = =>\n    count = 0\n    return D.$observe =>\n      count += +1\n      echo ƒ count if count % 10000 is 0\n  #.........................................................................................................\n  $show = => D.$observe ( [ glyph, keys, ] ) =>\n    echo ( CHR.as_fncr glyph, input: 'xncr' ), CHR.as_uchr glyph, input: 'xncr'\n    for key in keys\n      echo '  ' + key\n  #.........................................................................................................\n  $exclude_rare_glyphs = =>\n    ### TAINT code duplication; factor out ###\n    ranks = {}\n    return $async ( glyph, done ) =>\n      ### filter out 'uncommon' glyphs (whose rank exceeds rank limit) ###\n      # debug '©72bFK', glyph, rank if ( rank = ranks[ glyph ] )?\n      return done glyph if rank_limit < 0 or rank_limit is Infinity\n      return done glyph if ( rank = ranks[ glyph ] )? and rank < rank_limit\n      sub_prefix  = [ 'spo', glyph, 'rank/cjt', ]\n      sub_query   = { prefix: sub_prefix, fallback: null, }\n      HOLLERITH.read_one_phrase v2_db, sub_query, ( error, sub_phrase ) =>\n        return done.error error if error?\n        if sub_phrase is null\n          ranks[ glyph ] = Infinity\n          return done()\n        [ _, _, _, rank, ]  = sub_phrase\n        ranks[ glyph ]      = rank\n        return done() unless rank < rank_limit\n        done glyph\n  #.........................................................................................................\n  $test_for_predicate = ( prd ) =>\n    return $async ( glyph, done ) =>\n      sub_prefix  = [ 'spo', glyph, prd, ]\n      sub_query   = { prefix: sub_prefix, fallback: null, }\n      HOLLERITH.read_one_phrase v2_db, sub_query, ( error, sub_phrase ) =>\n        return done.error error if error?\n        return done glyph if sub_phrase is null\n        done()\n  #.........................................................................................................\n  v1_lte_from_gte = ( gte ) ->\n    R = new Buffer ( last_idx = Buffer.byteLength gte ) + 1\n    R.write gte\n    R[ last_idx ] = 0xff\n    return R\n  #.........................................................................................................\n  $fetch_v1_entries = =>\n    return $async ( glyph, done ) =>\n      gte         = \"so|glyph:#{glyph}\"\n      lte         = v1_lte_from_gte gte\n      sub_input   = v1_db[ '%self' ].createKeyStream { gte, lte, }\n      Z           = []\n      # sub_input.on 'data', ( data ) -> debug '©9Wqdh', data\n      sub_input\n        .pipe $ ( key, send, end ) =>\n          if key?\n            Z.push key.toString 'utf-8'\n          if end?\n            end()\n            done [ glyph, Z, ]\n  #.........................................................................................................\n  # prefix  = { prefix: [ 'pos', 'cp/cid', ], }\n  prefix  = { prefix: [ 'pos', 'cp/inner/original', ], }\n  input   = HOLLERITH.create_phrasestream v2_db, prefix\n  #.........................................................................................................\n  input\n    .pipe $extract_glyph()\n    .pipe $exclude_gaiji()\n    # .pipe $show_progress()\n    # .pipe $exclude_rare_glyphs()\n    .pipe $test_for_predicate prd\n    .pipe $fetch_v1_entries()\n    .pipe D.$show()\n    .pipe $show()\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@show_encoding_sample = ->\n  encoding  = HOLLERITH.CODEC.encodings[ 'dbcs2' ]\n  encoding  = HOLLERITH.CODEC.encodings[ 'aleph' ]\n  encoding  = HOLLERITH.CODEC.encodings[ 'rdctn' ]\n  phrases   = [\n    [ '丁', 'strokecount',     2,                          ]\n    [ '三', 'strokecount',     3,                          ]\n    [ '夫', 'strokecount',     5,                          ]\n    [ '國', 'strokecount',     11,                         ]\n    [ '形', 'strokecount',     7,                          ]\n    [ '丁', 'componentcount',  1,                          ]\n    [ '三', 'componentcount',  1,                          ]\n    [ '夫', 'componentcount',  1,                          ]\n    [ '國', 'componentcount',  4,                          ]\n    [ '形', 'componentcount',  2,                          ]\n    [ '丁', 'components',      [ '丁', ],                  ]\n    [ '三', 'components',      [ '三', ],                  ]\n    [ '夫', 'components',      [ '夫', ],                  ]\n    [ '國', 'components',      [ '囗', '戈', '口', '一', ], ]\n    [ '形', 'components',      [ '开', '彡', ],             ]\n    ]\n  for [ sbj, prd, obj, ] in phrases\n    key       = ( HOLLERITH.CODEC.encode [ sbj, prd, ], )\n    value     = ( new Buffer JSON.stringify obj )\n    key_rpr   = ( encoding[ key[ idx ] ] for idx in [ 0 ... key.length ] ).join ''\n    value_rpr = ( encoding[ value[ idx ] ] for idx in [ 0 ... value.length ] ).join ''\n    urge key_rpr, '┊', value_rpr\n  b = new Buffer '一x丁x丂'\n  # text = new Buffer '一'\n  # text_rpr =\n  # help b, text_rpr\n  help HOLLERITH.CODEC.rpr_of_buffer HOLLERITH.CODEC.encode [ true, -1 / 7, ]\n\n  # chrs = []\n  # for cid in [ 0 .. 255 ]\n  #   chrs.push String.fromCodePoint cid\n  #   chrs.push '\\n' if cid > 0 and cid % 32 is 0\n  # debug '©ZgY4D', chrs\n  # help chrs.join ''\n  # urge ( String.fromCodePoint cid for cid in [ 0x2400 .. 0x2426 ] ).join ''\n  # urge ( String.fromCodePoint cid for cid in [ 0x24b6 .. 0x24e9 ] ).join ''\n  # urge ( String.fromCodePoint cid for cid in [ 0xff01 .. 0xff60 ] ).join ''\n\n\n############################################################################################################\nunless module.parent?\n\n  #---------------------------------------------------------------------------------------------------------\n  options =\n    #.......................................................................................................\n    # 'route':                njs_path.join __dirname, '../dbs/demo'\n    'route':                njs_path.resolve __dirname, '../../jizura-datasources/data/leveldb-v2'\n    # 'route':            '/tmp/leveldb'\n  #---------------------------------------------------------------------------------------------------------\n  debug '©AoOAS', options\n  # @find_good_kwic_sample_glyphs_3()\n  @show_kwic_v2_and_v3_sample()\n  # @show_codepoints_with_missing_predicates()\n  # @show_encoding_sample()\n  # @compile_encodings()\n\n\n"]}
{"version":3,"sources":["demo.coffee"],"names":[],"mappings":"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","file":"demo.js","sourceRoot":"/source/","sourcesContent":["\n\n\n############################################################################################################\nnjs_path                  = require 'path'\n# njs_fs                    = require 'fs'\njoin                      = njs_path.join\n#...........................................................................................................\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'HOLLERITH/test'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nsuspend                   = require 'coffeenode-suspend'\nstep                      = suspend.step\nafter                     = suspend.after\neventually                = suspend.eventually\nimmediately               = suspend.immediately\nrepeat_immediately        = suspend.repeat_immediately\nevery                     = suspend.every\n#...........................................................................................................\n# BYTEWISE                  = require 'bytewise'\n# through                   = require 'through2'\n# LevelBatch                = require 'level-batch-stream'\n# BatchStream               = require 'batch-stream'\n# parallel                  = require 'concurrent-writable'\nD                         = require 'pipedreams2'\n$                         = D.remit.bind D\n$async                    = D.remit_async.bind D\n#...........................................................................................................\nnew_db                    = require 'level'\n# new_levelgraph            = require 'levelgraph'\n# db                        = new_levelgraph '/tmp/levelgraph'\nHOLLERITH                 = require './main'\nƒ                         = CND.format_number.bind CND\n#...........................................................................................................\noptions                   = null\n\n#-----------------------------------------------------------------------------------------------------------\n@_misfit          = Symbol 'misfit'\n\n\n#===========================================================================================================\n# PIPEDREAMS\n#-----------------------------------------------------------------------------------------------------------\nD.new_indexer = ( idx = 0 ) -> ( data ) => [ idx++, data, ]\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@initialize = ( handler ) ->\n  options[ 'db' ] = HOLLERITH.new_db options[ 'route' ]\n  handler null\n\n#-----------------------------------------------------------------------------------------------------------\n@main = ( first_query ) ->\n  first_query ?= { gte: 'os|rank/cjt:0', lte: 'os|rank/cjt:9', }\n  step ( resume ) =>\n    yield @initialize resume\n    db = options[ 'db' ]\n    CHR = require '/Volumes/Storage/io/coffeenode-chr'\n    count_chrs = ( text ) -> ( CHR.chrs_from_text text, input: 'xncr' ).length\n    #.......................................................................................................\n    input = db[ '%self' ].createKeyStream first_query\n    # k = \"so|glyph:繼|pod:\"\n    # input = db[ '%self' ].createKeyStream db, { gte: k, lte: k + '\\uffff' }\n    # debug '©cW8tK', HOLLERITH.new_key db, 'os', 'rank/cjt', '00000'\n    #.......................................................................................................\n    ### TAINT We can currently not use `HOLLERITH2.read_sub` because HOLLERITH2 assumes a key-only\n    DB that uses binary encoding with a custom https://github.com/deanlandolt/bytewise layer; the current\n    Jizura DB version uses UTF-8 strings and is a key/value DB. ###\n    #.......................................................................................................\n    input\n      .pipe @_$split_bkey()\n      #.....................................................................................................\n      # .pipe HOLLERITH.read_sub db, indexed: yes, ( key ) =>\n      .pipe @read_sub db, indexed: yes, ( key ) =>\n        [ pt, ok, rank, sk, glyph, ] = key\n        sub_key = \"so|glyph:#{glyph}|pod:\"\n        return db[ '%self' ].createValueStream { gte: sub_key, lte: sub_key + '\\uffff' }\n      #.....................................................................................................\n      .pipe D.$densort 0, 0, true\n      #.....................................................................................................\n      .pipe $ ( [ idx, [ pod, ], ], send ) =>\n        debug '©jd5cE', pod\n        unless pod[ 'strokeorder/short'  ]?\n          warn '©9YXoq',  pod\n        else\n          glyph       = pod[ 'glyph/uchr'         ]\n          strokeorder = pod[ 'strokeorder/short'  ][ 0 ].length\n          lineup      = pod[ 'guide/lineup/uchr'  ].replace /\\u3000/g, ''\n          send [ glyph, strokeorder, lineup, ]\n      #.....................................................................................................\n      .pipe $ ( [ glyph, strokeorder, lineup, ], send ) =>\n        send [ glyph, strokeorder, count_chrs lineup, ]\n      #.....................................................................................................\n      .pipe D.$sort ( a, b ) ->\n        idx = 1\n        return +1 if a[ idx ] > b[ idx ]\n        return -1 if a[ idx ] < b[ idx ]\n        return  0\n      #.....................................................................................................\n      .pipe D.$show()\n\n#-----------------------------------------------------------------------------------------------------------\n@_$split_bkey = -> $ ( bkey, send ) => send @_split_bkey bkey\n\n#-----------------------------------------------------------------------------------------------------------\n@_split_bkey = ( bkey ) ->\n  R = bkey.toString 'utf-8'\n  R = ( R.split '|' )[ .. 2 ]\n  R = [ R[ 0 ], ( R[ 1 ].split ':' )..., ( R[ 2 ].split ':' )..., ]\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@_$split_so_bkey = -> $ ( bkey, send ) => send @_split_so_bkey bkey\n\n#-----------------------------------------------------------------------------------------------------------\n@_split_so_bkey = ( bkey ) ->\n  R       = bkey.toString 'utf-8'\n  R       = R.split '|'\n  idx_txt = R[ 3 ]\n  R       = [ ( R[ 1 ].split ':' )[ 1 ], ( R[ 2 ].split ':' )..., ]\n  R.push ( parseInt idx_txt, 10 ) if idx_txt? and idx_txt.length > 0\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@_lte_from_gte = ( gte ) ->\n  R = new Buffer ( last_idx = Buffer.byteLength gte ) + 1\n  R.write gte\n  R[ last_idx ] = 0xff\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@$lineup_from_glyph = ( db ) ->\n  settings =\n    indexed:  no\n    single:   yes\n  return @read_sub db, settings, ( glyph ) =>\n    lte = \"so|glyph:#{glyph}|guide/lineup/uchr:\"\n    sub_input = db[ '%self' ].createKeyStream { gte: lte, lte: @_lte_from_gte lte, }\n    return sub_input\n\n#-----------------------------------------------------------------------------------------------------------\n@$shapeclass_wbf_from_glyph_and_lineup = ( db ) ->\n  ### TAINT wrong ###\n  settings =\n    indexed:  no\n    single:   yes\n  return @read_sub db, settings, ( [ glyph, lineup_glyphs, ] ) =>\n    for lineup_glyph in lineup_glyphs\n      do ( lineup_glyph ) =>\n        gte = \"so|glyph:#{lineup_glyph}|factor/strokeclass/wbf:\"\n        sub_input = db[ '%self' ].createKeyStream { gte: gte, lte: @_lte_from_gte gte, }\n        return sub_input\n\n#-----------------------------------------------------------------------------------------------------------\nHOLLERITH.$pick_subject = ->\n  return $ ( lkey, send ) =>\n    [ pt, _, v0, _, v1, ] = lkey\n    send if pt is 'so' then v0 else v1\n\n#-----------------------------------------------------------------------------------------------------------\nHOLLERITH.$pick_object = ->\n  return $ ( lkey, send ) =>\n    [ pt, _, v0, _, v1, ] = lkey\n    send if pt is 'so' then v1 else v0\n\n#-----------------------------------------------------------------------------------------------------------\nHOLLERITH.$pick_values = ->\n  return $ ( lkey, send ) =>\n    [ pt, _, v0, _, v1, ] = lkey\n    send if pt is 'so' then [ v0, v1, ] else [ v1, v0, ]\n\n#-----------------------------------------------------------------------------------------------------------\n@copy_jizura_db = ->\n  ds_options  = require '/Volumes/Storage/io/jizura-datasources/options'\n  source_db   = HOLLERITH.new_db options[ 'route' ]\n  target_db   = HOLLERITH.new_db '/Volumes/Storage/temp/jizura-hollerith2'\n  gte         = 'so|'\n  # gte         = 'so|glyph:𤊂' # !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n  lte         = @_lte_from_gte gte\n  input       = source_db[ '%self' ].createKeyStream { gte, lte, }\n  batch_size  = 10000\n  output      = HOLLERITH.$write target_db, { batch: batch_size, }\n  #.........................................................................................................\n  input\n    .pipe D.$count ( count ) -> help \"read #{count} keys\"\n    .pipe @_$split_so_bkey()\n    # .pipe $ ( key, send ) =>\n    #   ### !!!!! ###\n    #   [ glyph, prd, obj, idx, ] = key\n    #   send key if glyph in [ '中', '國', '皇', '帝', ]\n    .pipe $ ( key, send ) =>\n      [ glyph, prd, obj, idx, ] = key\n      send key unless prd is 'pod'\n    .pipe D.$count ( count ) -> help \"kept #{count} entries\"\n    #.......................................................................................................\n    .pipe do =>\n      buffer      = null\n      memo        = null\n      last_sp     = null\n      # within_list = no\n      return $ ( key, send ) =>\n        [ sbj, prd, obj, idx, ] = key\n        if idx?\n          sp = \"#{sbj}|#{prd}\"\n          if sp is last_sp\n            buffer[ idx ] = obj\n          else\n            send [ memo..., buffer, ] if buffer?\n            buffer        = []\n            buffer[ idx ] = obj\n            memo          = [ sbj, prd, ]\n            last_sp       = sp\n        else\n          send [ sbj, prd, obj, ]\n    #.......................................................................................................\n    .pipe $ ( [ sbj, prd, obj, ], send ) =>\n      ### Compactify sparse lists so all `undefined` elements are removed; warn about this ###\n      if ( CND.type_of obj ) is 'list'\n        new_obj = ( element for element in obj when element isnt undefined )\n        if obj.length isnt new_obj.length\n          warn \"phrase #{rpr [ sbj, prd, obj, ]} contained undefined elements; compactified\"\n        obj = new_obj\n      send [ sbj, prd, obj, ]\n    #.......................................................................................................\n    # .pipe D.$show()\n    .pipe $ ( [ sbj, prd, obj, ], send ) =>\n      ### Type Casting ###\n      type_description = ds_options[ 'schema' ][ prd ]\n      unless type_description?\n        warn \"no type description for predicate #{rpr prd}\"\n      else\n        switch type = type_description[ 'type' ]\n          when 'int'\n            obj = parseInt obj, 10\n          when 'text'\n            ### TAINT we have no booleans configured ###\n            if      obj is 'true'   then obj = true\n            else if obj is 'false'  then obj = false\n      send [ sbj, prd, obj, ]\n    #.......................................................................................................\n    .pipe do =>\n      count = 0\n      return $ ( phrase, send ) =>\n        count += 1\n        # !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n        # if count % 10000 is 0\n        #   echo count, phrase\n        send phrase\n    #.......................................................................................................\n    .pipe output\n\n#-----------------------------------------------------------------------------------------------------------\n@dump_jizura_db = ->\n  source_db   = HOLLERITH.new_db '/Volumes/Storage/temp/jizura-hollerith2'\n  prefix      = [ 'spo', '𡏠', ]\n  prefix      = [ 'spo', '㔰', ]\n  input       = HOLLERITH.create_phrasestream source_db, prefix\n  #.........................................................................................................\n  input\n    .pipe D.$count ( count ) -> help \"read #{count} keys\"\n    .pipe $ ( data, send ) => send JSON.stringify data\n    .pipe D.$show()\n\n#-----------------------------------------------------------------------------------------------------------\n### version for Hollerith1 DBs ###\n@find_good_kwic_sample_glyphs_1 = ( db ) ->\n  #.........................................................................................................\n  step ( resume ) =>\n    unless db?\n      yield @initialize resume\n      db = options[ 'db' ]\n    #.......................................................................................................\n    CHR = require '/Volumes/Storage/io/coffeenode-chr'\n    chrs_from_text = ( text ) -> CHR.chrs_from_text text, input: 'xncr'\n    #.......................................................................................................\n    gte     = 'os|guide/lineup/length:05'\n    lte     = @_lte_from_gte gte\n    input   = db[ '%self' ].createKeyStream { gte: gte, lte: lte, }\n    #.......................................................................................................\n    decode_rank = ( bkey ) =>\n      [ ..., rank_txt, ] = @_split_bkey bkey\n      return parseInt rank_txt, 10\n    #.......................................................................................................\n    decode_lineup = ( bkey ) =>\n      [ ..., lineup, ] = @_split_bkey bkey\n      lineup = lineup.replace /\\u3000/g, ''\n      return chrs_from_text lineup\n    #.......................................................................................................\n    xncr_from_uchr = ( uchr ) =>\n      return if ( CHR.as_rsg uchr ) is 'u-pua' then ( CHR.as_xncr uchr, csg: 'jzr' ) else uchr\n    #.......................................................................................................\n    input\n      .pipe @_$split_bkey()\n      #.....................................................................................................\n      .pipe HOLLERITH.read_sub db, mangle: decode_rank, ( phrase ) =>\n        [ ..., glyph, ]           = phrase\n        sub_gte     = \"so|glyph:#{glyph}|rank/cjt:\"\n        sub_lte     = @_lte_from_gte sub_gte\n        sub_input   = db[ '%self' ].createKeyStream { gte: sub_gte, lte: sub_lte, }\n        return [ glyph, sub_input, ]\n      #.....................................................................................................\n      .pipe D.$filter ( [ glyph, rank, ] ) -> rank < 1500\n      #.....................................................................................................\n      .pipe HOLLERITH.read_sub db, mangle: decode_lineup, ( record ) =>\n        [ glyph, rank, ]  = record\n        sub_gte           = \"so|glyph:#{glyph}|guide/lineup/uchr:\"\n        sub_lte           = @_lte_from_gte sub_gte\n        sub_input         = db[ '%self' ].createKeyStream { gte: sub_gte, lte: sub_lte, }\n        return [ [ glyph, rank, ], sub_input, ]\n      #.....................................................................................................\n      .pipe HOLLERITH.read_sub db, ( record ) =>\n        [ [ glyph, rank, ], guides, ] = record\n        confluence                    = D.create_throughstream()\n        stream_count                  = 0\n        #...................................................................................................\n        for guide in guides\n          do ( guide ) =>\n            guide_xncr        = xncr_from_uchr guide\n            stream_count     += +1\n            sub_gte           = \"so|glyph:#{guide_xncr}|factor/shapeclass/wbf:\"\n            sub_lte           = @_lte_from_gte sub_gte\n            sub_input         = db[ '%self' ].createKeyStream { gte: sub_gte, lte: sub_lte, }\n            sub_input.on 'end', ->\n              stream_count += -1\n              if stream_count < 1\n                confluence.end()\n            sub_input\n              .pipe @_$split_bkey()\n              .pipe $ ( data, send ) =>\n                [ ..., shapeclass_wbf, ] = data\n                confluence.write [ guide, shapeclass_wbf, ]\n        #...................................................................................................\n        return [ [ glyph, rank, guides, ], confluence, ]\n      #.....................................................................................................\n      .pipe $ ( data, send ) -> send JSON.stringify data\n      .pipe D.$show()\n\n#-----------------------------------------------------------------------------------------------------------\n### version for Hollerith2 DBs ###\n@find_good_kwic_sample_glyphs_2 = ( db ) ->\n  ###\n  *  ▶  '[[\"勷\",5,9907,[\"亠\",\"吅\",\"𠀎\",\"𧘇\",\"力\"]],\"41\",\"25\",\"11\",\"35\",\"53\"]'\n  *  ▶  '[[\"噿\",5,13090,[\"口\",\"羽\",\"亠\",\"从\",\"十\"]],\"25\",\"54\",\"41\",\"34\",\"12\"]'\n  *  ▶  '[[\"塾\",5,3818,[\"亠\",\"口\",\"子\",\"丸\",\"土\"]],\"41\",\"25\",\"51\",\"35\",\"12\"]'\n  *  ▶  '[[\"墩\",5,5457,[\"土\",\"亠\",\"口\",\"子\",\"夊\"]],\"12\",\"41\",\"25\",\"51\",\"35\"]'\n  *  ▶  '[[\"孃\",5,7225,[\"女\",\"亠\",\"吅\",\"𠀎\",\"𧘇\"]],\"53\",\"41\",\"25\",\"11\",\"35\"]'\n  *  ▶  '[[\"寡\",5,3412,[\"宀\",\"丆\",\"且\",\"八\",\"刀\"]],\"44\",\"13\",\"25\",\"34\",\"53\"]'\n  *  ▶  '[[\"巕\",5,13586,[\"山\",\"卄\",\"𠂤\",\"辛\",\"女\"]],\"25\",\"12\",\"32\",\"41\",\"53\"]'\n  *  ▶  '[[\"橔\",5,13883,[\"木\",\"亠\",\"口\",\"子\",\"夊\"]],\"12\",\"41\",\"25\",\"51\",\"35\"]'\n  *  ▶  '[[\"灂\",5,12349,[\"氵\",\"爫\",\"罒\",\"\",\"寸\"]],\"44\",\"34\",\"25\",\"51\",\"12\"]'\n  *  ▶  '[[\"纏\",5,3421,[\"糹\",\"广\",\"里\",\"八\",\"土\"]],\"55\",\"41\",\"25\",\"34\",\"12\"]'\n  *  ▶  '[[\"纕\",5,8882,[\"糹\",\"亠\",\"吅\",\"𠀎\",\"𧘇\"]],\"55\",\"41\",\"25\",\"11\",\"35\"]'\n  *  ▶  '[[\"鄸\",5,8392,[\"卄\",\"罒\",\"冖\",\"夕\",\"阝\"]],\"12\",\"25\",\"45\",\"35\",\"52\"]'\n  *  ▶  '[[\"韽\",5,10377,[\"亽\",\"𠃌\",\"酉\",\"立\",\"日\"]],\"34\",\"5\",\"12\",\"41\",\"25\"]'\n  *  ▶  '[[\"頀\",5,8385,[\"立\",\"日\",\"卄\",\"隹\",\"又\"]],\"41\",\"25\",\"12\",\"32\",\"54\"]'\n  *  ▶  '[[\"驐\",5,12644,[\"馬\",\"亠\",\"口\",\"子\",\"夊\"]],\"12\",\"41\",\"25\",\"51\",\"35\"]'\n  *  ▶  '[[\"骧\",5,6010,[\"马\",\"亠\",\"吅\",\"𠀎\",\"𧘇\"]],\"55\",\"41\",\"25\",\"11\",\"35\"]'\n  ###\n  #.........................................................................................................\n  step ( resume ) =>\n    db ?= HOLLERITH.new_db '/Volumes/Storage/temp/jizura-hollerith2'\n    #.......................................................................................................\n    CHR = require '/Volumes/Storage/io/coffeenode-chr'\n    chrs_from_text = ( text ) -> CHR.chrs_from_text text, input: 'xncr'\n    #.......................................................................................................\n    prefix  = [ 'pos', 'guide/lineup/length', 5, ]\n    input   = HOLLERITH.create_phrasestream db, prefix\n    # #.......................................................................................................\n    # decode_rank = ( bkey ) =>\n    #   [ ..., rank_txt, ] = @_split_bkey bkey\n    #   return parseInt rank_txt, 10\n    #.......................................................................................................\n    decode_lineup = ( data ) =>\n      [ ..., lineup, ] = data\n      return chrs_from_text lineup.replace /\\u3000/g, ''\n    #.......................................................................................................\n    xncr_from_uchr = ( uchr ) =>\n      return if ( CHR.as_rsg uchr ) is 'u-pua' then ( CHR.as_xncr uchr, csg: 'jzr' ) else uchr\n    #.......................................................................................................\n    input\n      #.....................................................................................................\n      .pipe HOLLERITH.read_sub db, ( phrase ) =>\n        [ _, glyph, _, lineup_length, ] = phrase\n        # debug '©xhHjm', rpr phrase\n        sub_prefix                      = [ 'spo', glyph, 'rank/cjt', ]\n        sub_input                       = HOLLERITH.create_phrasestream db, sub_prefix\n        return [ [ glyph, lineup_length, ], sub_input, ]\n      #.....................................................................................................\n      .pipe $ ( data, send ) =>\n        [ [ glyph, lineup_length, ], [ ..., rank, ], ] = data\n        send [ glyph, lineup_length, rank, ]\n      #.....................................................................................................\n      .pipe D.$filter ( [ glyph, lineup_length, rank, ] ) -> rank < 15000\n      #.....................................................................................................\n      .pipe HOLLERITH.read_sub db, mangle: decode_lineup, ( data ) =>\n        [ glyph, lineup_length, rank, ] = data\n        sub_prefix                      = [ 'spo', glyph, 'guide/lineup/uchr', ]\n        sub_input                       = HOLLERITH.create_phrasestream db, sub_prefix\n        return [ [ glyph, lineup_length, rank, ], sub_input, ]\n      #.....................................................................................................\n      .pipe HOLLERITH.read_sub db, ( data ) =>\n        [ [ glyph, lineup_length, rank, ], guides, ]  = data\n        confluence                                    = D.create_throughstream()\n        stream_count                                  = 0\n        #...................................................................................................\n        for guide in guides\n          do ( guide ) =>\n            guide_xncr        = xncr_from_uchr guide\n            stream_count     += +1\n            sub_prefix        = [ 'spo', guide_xncr, 'factor/shapeclass/wbf', ]\n            sub_input         = HOLLERITH.create_phrasestream db, sub_prefix\n            sub_input.on 'end', ->\n              stream_count += -1\n              if stream_count < 1\n                confluence.end()\n            sub_input\n              .pipe $ ( data, send ) =>\n                [ ..., shapeclass_wbf, ] = data\n                confluence.write shapeclass_wbf\n        #...................................................................................................\n        return [ [ glyph, lineup_length, rank, guides, ], confluence, ]\n      #.....................................................................................................\n      .pipe D.$filter ( data ) =>\n        [ [ glyph, lineup_length, rank, guides, ], shapeclasses_wbf..., ] = data\n        counts = [ 0, 0, 0, 0, 0, ]\n        for shapeclass_wbf in shapeclasses_wbf\n          shapeclass_idx            = ( parseInt shapeclass_wbf[ 0 ], 10 ) - 1\n          counts[ shapeclass_idx ] += +1\n        return ( counts.join ',' ) is '1,1,1,1,1'\n      #.....................................................................................................\n      .pipe $ ( data, send ) -> send JSON.stringify data\n      .pipe D.$show()\n\n#-----------------------------------------------------------------------------------------------------------\n### version for Hollerith2 DBs; using `HOLLERITH.remit_async` instead of `HOLLERITH.read_sub`. ###\n@find_good_kwic_sample_glyphs_3 = ( db ) ->\n  #.........................................................................................................\n  step ( resume ) =>\n    db ?= HOLLERITH.new_db '/Volumes/Storage/temp/jizura-hollerith2'\n    #.......................................................................................................\n    CHR = require '/Volumes/Storage/io/coffeenode-chr'\n    chrs_from_text = ( text ) -> CHR.chrs_from_text text, input: 'xncr'\n    #.......................................................................................................\n    prefix  = [ 'pos', 'guide/lineup/length', 5, ]\n    input   = HOLLERITH.create_phrasestream db, prefix\n    #.......................................................................................................\n    decode_lineup = ( lineup ) =>\n      return chrs_from_text lineup.replace /\\u3000/g, ''\n    #.......................................................................................................\n    xncr_from_uchr = ( uchr ) =>\n      return if ( CHR.as_rsg uchr ) is 'u-pua' then ( CHR.as_xncr uchr, csg: 'jzr' ) else uchr\n    #.......................................................................................................\n    input\n      #.....................................................................................................\n      .pipe $async ( phrase, done ) =>\n        [ _, glyph, _, lineup_length, ] = phrase\n        sub_prefix                      = [ 'spo', glyph, 'rank/cjt', ]\n        HOLLERITH.read_phrases db, sub_prefix, '*', null, ( error, sub_phrases ) =>\n          return done.error error if error?\n          return done() unless sub_phrases?\n          return done.error new Error \"illegal phrase count #{count}\" unless ( count = sub_phrases.length ) is 1\n          rank = sub_phrases[ 0 ][ 3 ]\n          done [ glyph, { lineup_length, rank, }, ]\n      #.....................................................................................................\n      .pipe D.$filter ( [ glyph, { lineup_length, rank, }, ] ) -> rank < 1500\n      #.....................................................................................................\n      .pipe $async ( entry, done ) =>\n        [ glyph, { lineup_length, rank, }, ]  = entry\n        sub_prefix                            = [ 'spo', glyph, 'guide/lineup/uchr', ]\n        HOLLERITH.read_phrases db, sub_prefix, '*', null, ( error, sub_phrases ) =>\n          return done.error error if error?\n          return done() unless sub_phrases?\n          return done.error new Error \"illegal phrase count #{count}\" unless ( count = sub_phrases.length ) is 1\n          guides = decode_lineup sub_phrases[ 0 ][ 3 ]\n          done [ glyph, { lineup_length, rank, guides, }, ]\n      #.....................................................................................................\n      .pipe D.$show()\n      # #.....................................................................................................\n      # .pipe HOLLERITH.read_sub db, ( data ) =>\n      #   debug '©0cKxC', data\n      #   [ glyph, { lineup_length, rank, guides, }, ]  = data\n      #   tasks                                         = []\n      #   #...................................................................................................\n      #   for guide in guides\n      #     do ( guide ) =>\n      #       guide_xncr        = xncr_from_uchr guide\n      #       sub_prefix        = [ 'spo', guide_xncr, 'factor/shapeclass/wbf', ]\n      #       sub_input         = HOLLERITH.create_phrasestream db, sub_prefix\n      #       sub_input.on 'end', ->\n      #         stream_count += -1\n      #         if stream_count < 1\n      #           confluence.end()\n      #       sub_input\n      #         .pipe $ ( data, send ) =>\n      #           [ ..., shapeclass_wbf, ] = data\n      #           confluence.write shapeclass_wbf\n      #   #...................................................................................................\n      #   return [ [ glyph, lineup_length, rank, guides, ], confluence, ]\n      # #.....................................................................................................\n      # .pipe D.$filter ( data ) =>\n      #   [ [ glyph, lineup_length, rank, guides, ], shapeclasses_wbf..., ] = data\n      #   counts = [ 0, 0, 0, 0, 0, ]\n      #   for shapeclass_wbf in shapeclasses_wbf\n      #     shapeclass_idx            = ( parseInt shapeclass_wbf[ 0 ], 10 ) - 1\n      #     counts[ shapeclass_idx ] += +1\n      #   return ( counts.join ',' ) is '1,1,1,1,1'\n      # #.....................................................................................................\n      # .pipe $ ( data, send ) -> send JSON.stringify data\n      # .pipe D.$show()\n\n\n#-----------------------------------------------------------------------------------------------------------\n@show_encoding_sample = ->\n  encoding  = HOLLERITH.DUMP.encodings[ 'dbcs2' ]\n  encoding  = HOLLERITH.DUMP.encodings[ 'aleph' ]\n  encoding  = HOLLERITH.DUMP.encodings[ 'rdctn' ]\n  phrases   = [\n    [ '丁', 'strokecount',     2,                          ]\n    [ '三', 'strokecount',     3,                          ]\n    [ '夫', 'strokecount',     5,                          ]\n    [ '國', 'strokecount',     11,                         ]\n    [ '形', 'strokecount',     7,                          ]\n    [ '丁', 'componentcount',  1,                          ]\n    [ '三', 'componentcount',  1,                          ]\n    [ '夫', 'componentcount',  1,                          ]\n    [ '國', 'componentcount',  4,                          ]\n    [ '形', 'componentcount',  2,                          ]\n    [ '丁', 'components',      [ '丁', ],                  ]\n    [ '三', 'components',      [ '三', ],                  ]\n    [ '夫', 'components',      [ '夫', ],                  ]\n    [ '國', 'components',      [ '囗', '戈', '口', '一', ], ]\n    [ '形', 'components',      [ '开', '彡', ],             ]\n    ]\n  for [ sbj, prd, obj, ] in phrases\n    key       = ( HOLLERITH.CODEC.encode [ sbj, prd, ], )\n    value     = ( new Buffer JSON.stringify obj )\n    key_rpr   = ( encoding[ key[ idx ] ] for idx in [ 0 ... key.length ] ).join ''\n    value_rpr = ( encoding[ value[ idx ] ] for idx in [ 0 ... value.length ] ).join ''\n    urge key_rpr, '┊', value_rpr\n  b = new Buffer '一x丁x丂'\n  # text = new Buffer '一'\n  # text_rpr =\n  # help b, text_rpr\n  help HOLLERITH.DUMP.rpr_of_buffer null, HOLLERITH.CODEC.encode [ true, -1 / 7, ]\n\n  # chrs = []\n  # for cid in [ 0 .. 255 ]\n  #   chrs.push String.fromCodePoint cid\n  #   chrs.push '\\n' if cid > 0 and cid % 32 is 0\n  # debug '©ZgY4D', chrs\n  # help chrs.join ''\n  # urge ( String.fromCodePoint cid for cid in [ 0x2400 .. 0x2426 ] ).join ''\n  # urge ( String.fromCodePoint cid for cid in [ 0x24b6 .. 0x24e9 ] ).join ''\n  # urge ( String.fromCodePoint cid for cid in [ 0xff01 .. 0xff60 ] ).join ''\n\n\n############################################################################################################\nunless module.parent?\n\n  #---------------------------------------------------------------------------------------------------------\n  options =\n    #.......................................................................................................\n    # 'route':                njs_path.join __dirname, '../dbs/demo'\n    'route':                '/Volumes/Storage/io/jizura-datasources/data/leveldb'\n    # 'route':            '/tmp/leveldb'\n  #---------------------------------------------------------------------------------------------------------\n  debug '©AoOAS', options\n  # step ( resume ) =>\n  #   yield @initialize resume\n  #   db = options[ 'db' ]\n  #   @find_good_kwic_sample_glyphs_2 db\n  # @copy_jizura_db()\n  # @dump_jizura_db()\n  # @find_good_kwic_sample_glyphs_2()\n  @find_good_kwic_sample_glyphs_3()\n  # @show_encoding_sample()\n  # @compile_encodings()\n\n\n"]}
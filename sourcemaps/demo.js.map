{"version":3,"sources":["demo.coffee"],"names":[],"mappings":"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","file":"demo.js","sourceRoot":"/source/","sourcesContent":["\n\n\n############################################################################################################\nnjs_path                  = require 'path'\n# njs_fs                    = require 'fs'\njoin                      = njs_path.join\n#...........................................................................................................\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'HOLLERITH/demo'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nsuspend                   = require 'coffeenode-suspend'\nstep                      = suspend.step\nafter                     = suspend.after\neventually                = suspend.eventually\nimmediately               = suspend.immediately\nrepeat_immediately        = suspend.repeat_immediately\nevery                     = suspend.every\n#...........................................................................................................\n# BYTEWISE                  = require 'bytewise'\n# through                   = require 'through2'\n# LevelBatch                = require 'level-batch-stream'\n# BatchStream               = require 'batch-stream'\n# parallel                  = require 'concurrent-writable'\nD                         = require 'pipedreams2'\n$                         = D.remit.bind D\n$async                    = D.remit_async.bind D\nASYNC                     = require 'async'\nCHR                       = require 'coffeenode-chr'\n#...........................................................................................................\nnew_db                    = require 'level'\n# new_levelgraph            = require 'levelgraph'\n# db                        = new_levelgraph '/tmp/levelgraph'\nHOLLERITH                 = require './main'\nƒ                         = CND.format_number.bind CND\n#...........................................................................................................\noptions                   = null\n\n#-----------------------------------------------------------------------------------------------------------\n@_misfit          = Symbol 'misfit'\n\n\n#===========================================================================================================\n# PIPEDREAMS\n#-----------------------------------------------------------------------------------------------------------\nD.new_indexer = ( idx = 0 ) -> ( data ) => [ idx++, data, ]\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@initialize = ( handler ) ->\n  options[ 'db' ] = HOLLERITH.new_db options[ 'route' ]\n  handler null\n\n#-----------------------------------------------------------------------------------------------------------\n@main = ( first_query ) ->\n  first_query ?= { gte: 'os|rank/cjt:0', lte: 'os|rank/cjt:9', }\n  step ( resume ) =>\n    yield @initialize resume\n    db = options[ 'db' ]\n    count_chrs = ( text ) -> ( CHR.chrs_from_text text, input: 'xncr' ).length\n    #.......................................................................................................\n    input = db[ '%self' ].createKeyStream first_query\n    # k = \"so|glyph:繼|pod:\"\n    # input = db[ '%self' ].createKeyStream db, { gte: k, lte: k + '\\uffff' }\n    # debug '©cW8tK', HOLLERITH.new_key db, 'os', 'rank/cjt', '00000'\n    #.......................................................................................................\n    ### TAINT We can currently not use `HOLLERITH2.read_sub` because HOLLERITH2 assumes a key-only\n    DB that uses binary encoding with a custom https://github.com/deanlandolt/bytewise layer; the current\n    Jizura DB version uses UTF-8 strings and is a key/value DB. ###\n    #.......................................................................................................\n    input\n      .pipe @_$split_bkey()\n      #.....................................................................................................\n      # .pipe HOLLERITH.read_sub db, indexed: yes, ( key ) =>\n      .pipe @read_sub db, indexed: yes, ( key ) =>\n        [ pt, ok, rank, sk, glyph, ] = key\n        sub_key = \"so|glyph:#{glyph}|pod:\"\n        return db[ '%self' ].createValueStream { gte: sub_key, lte: sub_key + '\\uffff' }\n      #.....................................................................................................\n      .pipe D.$densort 0, 0, true\n      #.....................................................................................................\n      .pipe $ ( [ idx, [ pod, ], ], send ) =>\n        debug '©jd5cE', pod\n        unless pod[ 'strokeorder/short'  ]?\n          warn '©9YXoq',  pod\n        else\n          glyph       = pod[ 'glyph/uchr'         ]\n          strokeorder = pod[ 'strokeorder/short'  ][ 0 ].length\n          lineup      = pod[ 'guide/lineup/uchr'  ].replace /\\u3000/g, ''\n          send [ glyph, strokeorder, lineup, ]\n      #.....................................................................................................\n      .pipe $ ( [ glyph, strokeorder, lineup, ], send ) =>\n        send [ glyph, strokeorder, count_chrs lineup, ]\n      #.....................................................................................................\n      .pipe D.$sort ( a, b ) ->\n        idx = 1\n        return +1 if a[ idx ] > b[ idx ]\n        return -1 if a[ idx ] < b[ idx ]\n        return  0\n      #.....................................................................................................\n      .pipe D.$show()\n\n#-----------------------------------------------------------------------------------------------------------\n@_$split_bkey = -> $ ( bkey, send ) => send @_split_bkey bkey\n\n#-----------------------------------------------------------------------------------------------------------\n@_split_bkey = ( bkey ) ->\n  R = bkey.toString 'utf-8'\n  R = ( R.split '|' )[ .. 2 ]\n  R = [ R[ 0 ], ( R[ 1 ].split ':' )..., ( R[ 2 ].split ':' )..., ]\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@_$split_so_bkey = -> $ ( bkey, send ) => send @_split_so_bkey bkey\n\n#-----------------------------------------------------------------------------------------------------------\n@_split_so_bkey = ( bkey ) ->\n  R       = bkey.toString 'utf-8'\n  R       = R.split '|'\n  idx_txt = R[ 3 ]\n  R       = [ ( R[ 1 ].split ':' )[ 1 ], ( R[ 2 ].split ':' )..., ]\n  R.push ( parseInt idx_txt, 10 ) if idx_txt? and idx_txt.length > 0\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@_lte_from_gte = ( gte ) ->\n  R = new Buffer ( last_idx = Buffer.byteLength gte ) + 1\n  R.write gte\n  R[ last_idx ] = 0xff\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@$lineup_from_glyph = ( db ) ->\n  settings =\n    indexed:  no\n    single:   yes\n  return @read_sub db, settings, ( glyph ) =>\n    lte = \"so|glyph:#{glyph}|guide/lineup/uchr:\"\n    sub_input = db[ '%self' ].createKeyStream { gte: lte, lte: @_lte_from_gte lte, }\n    return sub_input\n\n#-----------------------------------------------------------------------------------------------------------\n@$shapeclass_wbf_from_glyph_and_lineup = ( db ) ->\n  ### TAINT wrong ###\n  settings =\n    indexed:  no\n    single:   yes\n  return @read_sub db, settings, ( [ glyph, lineup_glyphs, ] ) =>\n    for lineup_glyph in lineup_glyphs\n      do ( lineup_glyph ) =>\n        gte = \"so|glyph:#{lineup_glyph}|factor/strokeclass/wbf:\"\n        sub_input = db[ '%self' ].createKeyStream { gte: gte, lte: @_lte_from_gte gte, }\n        return sub_input\n\n#-----------------------------------------------------------------------------------------------------------\nHOLLERITH.$pick_subject = ->\n  return $ ( lkey, send ) =>\n    [ pt, _, v0, _, v1, ] = lkey\n    send if pt is 'so' then v0 else v1\n\n#-----------------------------------------------------------------------------------------------------------\nHOLLERITH.$pick_object = ->\n  return $ ( lkey, send ) =>\n    [ pt, _, v0, _, v1, ] = lkey\n    send if pt is 'so' then v1 else v0\n\n#-----------------------------------------------------------------------------------------------------------\nHOLLERITH.$pick_values = ->\n  return $ ( lkey, send ) =>\n    [ pt, _, v0, _, v1, ] = lkey\n    send if pt is 'so' then [ v0, v1, ] else [ v1, v0, ]\n\n#-----------------------------------------------------------------------------------------------------------\n@dump_jizura_db = ->\n  source_db   = HOLLERITH.new_db '/Volumes/Storage/temp/jizura-hollerith2'\n  prefix      = [ 'spo', '𡏠', ]\n  prefix      = [ 'spo', '㔰', ]\n  input       = HOLLERITH.create_phrasestream source_db, prefix\n  #.........................................................................................................\n  input\n    .pipe D.$count ( count ) -> help \"read #{count} keys\"\n    .pipe $ ( data, send ) => send JSON.stringify data\n    .pipe D.$show()\n\n#-----------------------------------------------------------------------------------------------------------\n@find_good_kwic_sample_glyphs_3 = ( db ) ->\n  ### version for Hollerith2 DBs; using `HOLLERITH.remit_async` instead of `HOLLERITH.read_sub`. ###\n  ###\n  *  ▶  '[[\"勷\",5,9907,[\"亠\",\"吅\",\"𠀎\",\"𧘇\",\"力\"]],\"41\",\"25\",\"11\",\"35\",\"53\"]'\n  *  ▶  '[[\"噿\",5,13090,[\"口\",\"羽\",\"亠\",\"从\",\"十\"]],\"25\",\"54\",\"41\",\"34\",\"12\"]'\n  *  ▶  '[[\"塾\",5,3818,[\"亠\",\"口\",\"子\",\"丸\",\"土\"]],\"41\",\"25\",\"51\",\"35\",\"12\"]'\n  *  ▶  '[[\"墩\",5,5457,[\"土\",\"亠\",\"口\",\"子\",\"夊\"]],\"12\",\"41\",\"25\",\"51\",\"35\"]'\n  *  ▶  '[[\"孃\",5,7225,[\"女\",\"亠\",\"吅\",\"𠀎\",\"𧘇\"]],\"53\",\"41\",\"25\",\"11\",\"35\"]'\n  *  ▶  '[[\"寡\",5,3412,[\"宀\",\"丆\",\"且\",\"八\",\"刀\"]],\"44\",\"13\",\"25\",\"34\",\"53\"]'\n  *  ▶  '[[\"巕\",5,13586,[\"山\",\"卄\",\"𠂤\",\"辛\",\"女\"]],\"25\",\"12\",\"32\",\"41\",\"53\"]'\n  *  ▶  '[[\"橔\",5,13883,[\"木\",\"亠\",\"口\",\"子\",\"夊\"]],\"12\",\"41\",\"25\",\"51\",\"35\"]'\n  *  ▶  '[[\"灂\",5,12349,[\"氵\",\"爫\",\"罒\",\"\",\"寸\"]],\"44\",\"34\",\"25\",\"51\",\"12\"]'\n  *  ▶  '[[\"纏\",5,3421,[\"糹\",\"广\",\"里\",\"八\",\"土\"]],\"55\",\"41\",\"25\",\"34\",\"12\"]'\n  *  ▶  '[[\"纕\",5,8882,[\"糹\",\"亠\",\"吅\",\"𠀎\",\"𧘇\"]],\"55\",\"41\",\"25\",\"11\",\"35\"]'\n  *  ▶  '[[\"鄸\",5,8392,[\"卄\",\"罒\",\"冖\",\"夕\",\"阝\"]],\"12\",\"25\",\"45\",\"35\",\"52\"]'\n  *  ▶  '[[\"韽\",5,10377,[\"亽\",\"𠃌\",\"酉\",\"立\",\"日\"]],\"34\",\"5\",\"12\",\"41\",\"25\"]'\n  *  ▶  '[[\"頀\",5,8385,[\"立\",\"日\",\"卄\",\"隹\",\"又\"]],\"41\",\"25\",\"12\",\"32\",\"54\"]'\n  *  ▶  '[[\"驐\",5,12644,[\"馬\",\"亠\",\"口\",\"子\",\"夊\"]],\"12\",\"41\",\"25\",\"51\",\"35\"]'\n  *  ▶  '[[\"骧\",5,6010,[\"马\",\"亠\",\"吅\",\"𠀎\",\"𧘇\"]],\"55\",\"41\",\"25\",\"11\",\"35\"]'\n  ###\n  #.........................................................................................................\n  step ( resume ) =>\n    db_route  = join __dirname, '../../jizura-datasources/data/leveldb-v2'\n    db       ?= HOLLERITH.new_db db_route, create: no\n    help \"using DB at #{db[ '%self' ][ 'location' ]}\"\n    #.......................................................................................................\n    CHR = require join __dirname, '../../coffeenode-chr'\n    chrs_from_text = ( text ) -> CHR.chrs_from_text text, input: 'xncr'\n    #.......................................................................................................\n    prefix  = [ 'pos', 'guide/lineup/length', 5, ]\n    query   = { prefix, }\n    input   = HOLLERITH.create_phrasestream db, query\n    #.......................................................................................................\n    decode_lineup = ( lineup ) =>\n      return chrs_from_text lineup.replace /\\u3000/g, ''\n    #.......................................................................................................\n    xncr_from_uchr = ( uchr ) =>\n      return if ( CHR.as_rsg uchr ) is 'u-pua' then ( CHR.as_xncr uchr, csg: 'jzr' ) else uchr\n    #.......................................................................................................\n    input\n      #.....................................................................................................\n      .pipe $async ( phrase, done ) =>\n        [ _, _, lineup_length, glyph, ]       = phrase\n        sub_prefix                            = [ 'spo', glyph, 'rank/cjt', ]\n        sub_fallback                          = [ null, null, null, Infinity, ]\n        sub_query                             = { prefix: sub_prefix, fallback: sub_fallback, }\n        debug '©zfQhm', phrase, sub_prefix if glyph is '公'\n        HOLLERITH.read_one_phrase db, sub_query, ( error, sub_phrase ) =>\n          return done.error error if error?\n          # debug '©FST09', sub_phrase unless sub_phrase[ sub_phrase.length - 1 ] is Infinity\n          [ _, _, _, rank, ] = sub_phrase\n          done [ glyph, { lineup_length, rank, }, ]\n      #.....................................................................................................\n      # .pipe D.$show()\n      .pipe D.$filter ( [ glyph, { lineup_length, rank, }, ] ) -> rank < 15000\n      #.....................................................................................................\n      .pipe $async ( entry, done ) =>\n        [ glyph, { lineup_length, rank, }, ]  = entry\n        sub_prefix                            = [ 'spo', glyph, 'guide/lineup/uchr', ]\n        sub_query                             = { prefix: sub_prefix, star: '*', fallback: null, }\n        HOLLERITH.read_one_phrase db, sub_query, ( error, sub_phrase ) =>\n          # debug '©h4GY2', sub_phrase\n          return done.error error if error?\n          return done() unless sub_phrase?\n          [ _, _, _, guides, ]  = sub_phrase\n          guides                = decode_lineup guides\n          done [ glyph, { lineup_length, rank, guides, }, ]\n      #.....................................................................................................\n      .pipe $async ( entry, done ) =>\n        [ glyph, { lineup_length, rank, guides, }, ]  = entry\n        tasks                                         = []\n        #...................................................................................................\n        for guide in guides\n          do ( guide ) =>\n            guide_xncr        = xncr_from_uchr guide\n            sub_prefix        = [ 'spo', guide_xncr, 'factor/shapeclass/wbf', ]\n            sub_fallback      = [ null, null, null, 'X', ]\n            sub_query         = { prefix: sub_prefix, fallback: sub_fallback, }\n            tasks.push ( handler ) -> HOLLERITH.read_one_phrase db, sub_query, handler\n        #...................................................................................................\n        ASYNC.parallelLimit tasks, 10, ( error, sub_phrases ) =>\n          return done.error error if error?\n          strokeclasses = []\n          for sub_phrase, sub_idx in sub_phrases\n            [ _, _, _, strokeorder, ] = sub_phrase\n            strokeclasses[ sub_idx ]  = strokeorder[ 0 ]\n          done [ glyph, { lineup_length, rank, guides, strokeclasses, }, ]\n      #.....................................................................................................\n      .pipe D.$filter ( entry ) =>\n        [ glyph, { lineup_length, rank, guides, strokeclasses, }, ] = entry\n        return ( strokeclasses[ .. ].sort().join '' ) is '12345'\n      #.....................................................................................................\n      .pipe $ ( [ glyph, { lineup_length, rank, guides, strokeclasses, }, ], send ) ->\n        guides        = guides.join ''\n        strokeclasses = strokeclasses.join ''\n        send [ glyph, { lineup_length, rank, guides, strokeclasses, }, ]\n      #.....................................................................................................\n      # .pipe D.$filter ( entry ) => entry[ 1 ][ 'strokeclasses' ] is '12345'\n      .pipe D.$show()\n\n#-----------------------------------------------------------------------------------------------------------\n@read_factors = ( db, handler ) ->\n  #.........................................................................................................\n  step ( resume ) =>\n    Z         = {}\n    db_route  = join __dirname, '../../jizura-datasources/data/leveldb-v2'\n    db       ?= HOLLERITH.new_db db_route, create: no\n    #.......................................................................................................\n    prefix  = [ 'pos', 'factor/', ]\n    query   = { prefix, star: '*', }\n    input   = HOLLERITH.create_phrasestream db, query\n    #.......................................................................................................\n    input\n      .pipe do =>\n        last_sbj  = null\n        target    = null\n        #...................................................................................................\n        return $ ( phrase, send, end ) =>\n          #.................................................................................................\n          if phrase?\n            [ _, prd, obj, sbj, ] = phrase\n            prd           = prd.replace /^factor\\//g, ''\n            sbj           = CHR.as_uchr sbj, input: 'xncr'\n            if sbj isnt last_sbj\n              send target if target?\n              target    = Z[ sbj ]?= { glyph: sbj, }\n              last_sbj  = sbj\n            target[ prd ] = obj\n            Z[ obj ]      = target if prd is 'sortcode'\n          #.................................................................................................\n          if end?\n            send target if target?\n            end()\n      .pipe D.$on_end -> handler null, Z\n\n\n#-----------------------------------------------------------------------------------------------------------\n@show_kwic_v2_sample = ( db ) ->\n  #.........................................................................................................\n  # step ( resume ) =>\n  db_route      = join __dirname, '../../jizura-datasources/data/leveldb-v2'\n  db           ?= HOLLERITH.new_db db_route, create: no\n  help \"using DB at #{db[ '%self' ][ 'location' ]}\"\n  # factors       = yield @read_factors db, resume\n  # debug '©g5bVR', factors; process.exit()\n  # help \"read #{( Object.keys factors ).length} entries for factors\"\n  ranks         = {}\n  rank_limit    = 10000\n  rank_limit    = Infinity\n  sample        = [ '寿', '邦', '帮', '畴', '铸', '筹', '涛', '祷', '绑', '綁',    ]\n  #.........................................................................................................\n  $reorder_phrase = =>\n    return $ ( phrase, send ) =>\n      ### extract sortcode ###\n      [ _, _, sortcode, glyph, _, ] = phrase\n      send [ glyph, sortcode, ]\n  #.........................................................................................................\n  $exclude_gaiji = =>\n    return D.$filter ( [ glyph, sortcode ] ) =>\n      return ( not glyph.startsWith '&' ) or ( glyph.startsWith '&jzr#' )\n  #.........................................................................................................\n  $include_sample = =>\n    return D.$filter ( [ glyph, sortcode ] ) => glyph in sample\n  #.........................................................................................................\n  $exclude_rare_glyphs = =>\n    return $async ( [ glyph, sortcode, ], done ) =>\n      ### filter out 'uncommon' glyphs (whose rank exceeds rank limit) ###\n      # debug '©72bFK', glyph, rank if ( rank = ranks[ glyph ] )?\n      return done [ glyph, sortcode, ] if rank_limit < 0 or rank_limit is Infinity\n      return done [ glyph, sortcode, ] if ( rank = ranks[ glyph ] )? and rank < rank_limit\n      sub_prefix  = [ 'spo', glyph, 'rank/cjt', ]\n      sub_query   = { prefix: sub_prefix, fallback: null, }\n      HOLLERITH.read_one_phrase db, sub_query, ( error, sub_phrase ) =>\n        return done.error error if error?\n        if sub_phrase is null\n          ranks[ glyph ] = Infinity\n          return done()\n        [ _, _, _, rank, ]  = sub_phrase\n        ranks[ glyph ]      = rank\n        return done() unless rank < rank_limit\n        done [ glyph, sortcode, ]\n  #.........................................................................................................\n  $extract_lineup = =>\n    return $ ( [ glyph, sortcode ], send ) =>\n      [ _, lineup, ]              = sortcode.split ';'\n      [ infix, suffix, prefix, ]  = lineup.split ','\n      lineup                      = prefix + '|' + infix + '|' + suffix\n      send [ glyph, lineup, ]\n  #.........................................................................................................\n  $transform = => D.combine [\n      $reorder_phrase()\n      $exclude_gaiji()\n      # $include_sample()\n      $exclude_rare_glyphs()\n      $extract_lineup()\n      ]\n  #.........................................................................................................\n  prefix_v1 = { prefix: [ 'pos', 'guide/kwic/v1/sortcode', ], }\n  prefix_v2 = { prefix: [ 'pos', 'guide/kwic/v2/sortcode', ], }\n  input_v1  = ( HOLLERITH.create_phrasestream db, prefix_v1 ).pipe $transform()\n  input_v2  = ( HOLLERITH.create_phrasestream db, prefix_v2 ).pipe $transform()\n  #.........................................................................................................\n  input_v1\n    .pipe D.$lockstep input_v2\n    .pipe do =>\n      count = 0\n      return $ ( [ [ glyph_v1, lineup_v1, ], [ glyph_v2, lineup_v2, ], ], send ) =>\n        spc   = '\\u3000'\n        line  = lineup_v1 + spc + glyph_v1 + spc + '◉' + spc + lineup_v2 + spc + glyph_v2\n        # help line\n        count += 1\n        help ƒ count if count % 10000 is 0\n        echo line\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@show_codepoints_with_missing_predicates = ( v2_db, prd = 'guide/kwic/v1/lineup' ) ->\n  #.........................................................................................................\n  home          = join __dirname, '../../jizura-datasources'\n  v1_route      = join home, 'data/leveldb'\n  v2_route      = join home, 'data/leveldb-v2'\n  v1_db         = HOLLERITH.new_db v1_route, create: no\n  v2_db        ?= HOLLERITH.new_db v2_route, create: no\n  help \"using DB at #{v1_db[ '%self' ][ 'location' ]}\"\n  help \"using DB at #{v2_db[ '%self' ][ 'location' ]}\"\n  rank_limit    = Infinity\n  rank_limit    = 100\n  #.........................................................................................................\n  $extract_glyph = => $ ( xpos, send ) => send xpos[ 3 ]\n  $exclude_gaiji = => D.$filter ( glyph ) => ( not glyph.startsWith '&' ) or ( glyph.startsWith '&jzr#' )\n  #.........................................................................................................\n  $show_progress = =>\n    count = 0\n    return D.$observe =>\n      count += +1\n      echo ƒ count if count % 10000 is 0\n  #.........................................................................................................\n  $show = => D.$observe ( [ glyph, keys, ] ) =>\n    echo ( CHR.as_fncr glyph, input: 'xncr' ), CHR.as_uchr glyph, input: 'xncr'\n    for key in keys\n      echo '  ' + key\n  #.........................................................................................................\n  $exclude_rare_glyphs = =>\n    ### TAINT code duplication; factor out ###\n    ranks = {}\n    return $async ( glyph, done ) =>\n      ### filter out 'uncommon' glyphs (whose rank exceeds rank limit) ###\n      # debug '©72bFK', glyph, rank if ( rank = ranks[ glyph ] )?\n      return done glyph if rank_limit < 0 or rank_limit is Infinity\n      return done glyph if ( rank = ranks[ glyph ] )? and rank < rank_limit\n      sub_prefix  = [ 'spo', glyph, 'rank/cjt', ]\n      sub_query   = { prefix: sub_prefix, fallback: null, }\n      HOLLERITH.read_one_phrase v2_db, sub_query, ( error, sub_phrase ) =>\n        return done.error error if error?\n        if sub_phrase is null\n          ranks[ glyph ] = Infinity\n          return done()\n        [ _, _, _, rank, ]  = sub_phrase\n        ranks[ glyph ]      = rank\n        return done() unless rank < rank_limit\n        done glyph\n  #.........................................................................................................\n  $test_for_predicate = ( prd ) =>\n    return $async ( glyph, done ) =>\n      sub_prefix  = [ 'spo', glyph, prd, ]\n      sub_query   = { prefix: sub_prefix, fallback: null, }\n      HOLLERITH.read_one_phrase v2_db, sub_query, ( error, sub_phrase ) =>\n        return done.error error if error?\n        return done glyph if sub_phrase is null\n        done()\n  #.........................................................................................................\n  v1_lte_from_gte = ( gte ) ->\n    R = new Buffer ( last_idx = Buffer.byteLength gte ) + 1\n    R.write gte\n    R[ last_idx ] = 0xff\n    return R\n  #.........................................................................................................\n  $fetch_v1_entries = =>\n    return $async ( glyph, done ) =>\n      gte         = \"so|glyph:#{glyph}\"\n      lte         = v1_lte_from_gte gte\n      sub_input   = v1_db[ '%self' ].createKeyStream { gte, lte, }\n      Z           = []\n      # sub_input.on 'data', ( data ) -> debug '©9Wqdh', data\n      sub_input\n        .pipe $ ( key, send, end ) =>\n          if key?\n            Z.push key.toString 'utf-8'\n          if end?\n            end()\n            done [ glyph, Z, ]\n  #.........................................................................................................\n  # prefix  = { prefix: [ 'pos', 'cp/cid', ], }\n  prefix  = { prefix: [ 'pos', 'cp/inner/original', ], }\n  input   = HOLLERITH.create_phrasestream v2_db, prefix\n  #.........................................................................................................\n  input\n    .pipe $extract_glyph()\n    .pipe $exclude_gaiji()\n    # .pipe $show_progress()\n    # .pipe $exclude_rare_glyphs()\n    .pipe $test_for_predicate prd\n    .pipe $fetch_v1_entries()\n    .pipe D.$show()\n    .pipe $show()\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@show_encoding_sample = ->\n  encoding  = HOLLERITH.DUMP.encodings[ 'dbcs2' ]\n  encoding  = HOLLERITH.DUMP.encodings[ 'aleph' ]\n  encoding  = HOLLERITH.DUMP.encodings[ 'rdctn' ]\n  phrases   = [\n    [ '丁', 'strokecount',     2,                          ]\n    [ '三', 'strokecount',     3,                          ]\n    [ '夫', 'strokecount',     5,                          ]\n    [ '國', 'strokecount',     11,                         ]\n    [ '形', 'strokecount',     7,                          ]\n    [ '丁', 'componentcount',  1,                          ]\n    [ '三', 'componentcount',  1,                          ]\n    [ '夫', 'componentcount',  1,                          ]\n    [ '國', 'componentcount',  4,                          ]\n    [ '形', 'componentcount',  2,                          ]\n    [ '丁', 'components',      [ '丁', ],                  ]\n    [ '三', 'components',      [ '三', ],                  ]\n    [ '夫', 'components',      [ '夫', ],                  ]\n    [ '國', 'components',      [ '囗', '戈', '口', '一', ], ]\n    [ '形', 'components',      [ '开', '彡', ],             ]\n    ]\n  for [ sbj, prd, obj, ] in phrases\n    key       = ( HOLLERITH.CODEC.encode [ sbj, prd, ], )\n    value     = ( new Buffer JSON.stringify obj )\n    key_rpr   = ( encoding[ key[ idx ] ] for idx in [ 0 ... key.length ] ).join ''\n    value_rpr = ( encoding[ value[ idx ] ] for idx in [ 0 ... value.length ] ).join ''\n    urge key_rpr, '┊', value_rpr\n  b = new Buffer '一x丁x丂'\n  # text = new Buffer '一'\n  # text_rpr =\n  # help b, text_rpr\n  help HOLLERITH.DUMP.rpr_of_buffer null, HOLLERITH.CODEC.encode [ true, -1 / 7, ]\n\n  # chrs = []\n  # for cid in [ 0 .. 255 ]\n  #   chrs.push String.fromCodePoint cid\n  #   chrs.push '\\n' if cid > 0 and cid % 32 is 0\n  # debug '©ZgY4D', chrs\n  # help chrs.join ''\n  # urge ( String.fromCodePoint cid for cid in [ 0x2400 .. 0x2426 ] ).join ''\n  # urge ( String.fromCodePoint cid for cid in [ 0x24b6 .. 0x24e9 ] ).join ''\n  # urge ( String.fromCodePoint cid for cid in [ 0xff01 .. 0xff60 ] ).join ''\n\n\n############################################################################################################\nunless module.parent?\n\n  #---------------------------------------------------------------------------------------------------------\n  options =\n    #.......................................................................................................\n    # 'route':                njs_path.join __dirname, '../dbs/demo'\n    'route':                '/Volumes/Storage/io/jizura-datasources/data/leveldb'\n    # 'route':            '/tmp/leveldb'\n  #---------------------------------------------------------------------------------------------------------\n  debug '©AoOAS', options\n  # @find_good_kwic_sample_glyphs_3()\n  # @show_kwic_v2_sample()\n  @show_codepoints_with_missing_predicates()\n  # @show_encoding_sample()\n  # @compile_encodings()\n\n\n"]}
{"version":3,"sources":["async-streams.coffee"],"names":[],"mappings":"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","file":"async-streams.js","sourceRoot":"/source/","sourcesContent":["\n\n\n\n############################################################################################################\nnjs_path                  = require 'path'\n# njs_fs                    = require 'fs'\njoin                      = njs_path.join\n#...........................................................................................................\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'HOLLERITH/tests'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nsuspend                   = require 'coffeenode-suspend'\nstep                      = suspend.step\nafter                     = suspend.after\n# eventually                = suspend.eventually\n### TAINT experimentally using `later` in place of `setImmediate` ###\nlater                     = suspend.immediately\n#...........................................................................................................\ntest                      = require 'guy-test'\n#...........................................................................................................\nD                         = require 'pipedreams2'\n$                         = D.remit.bind D\n$async                    = D.remit_async.bind D\n#...........................................................................................................\nHOLLERITH                 = require './main'\ndb                        = null\n#...........................................................................................................\nlevelup                   = require 'level'\nleveldown                 = require 'level/node_modules/leveldown'\nCODEC                     = require './codec'\n#...........................................................................................................\nƒ                         = CND.format_number\n\n\n\n\n\n\nf = ->\n  step ( resume ) =>\n    input_A = D.create_throughstream()\n    #.......................................................................................................\n    input_B = input_A\n      .pipe $async ( data, done ) ->\n        dt = if data is 1 then 5 else CND.random_number 0.5, 1.5\n        debug '©WscFi', data, dt\n        after dt, =>\n          urge \"send #{rpr data}\"\n          done data\n      .pipe D.$show()\n      .pipe D.$on_end ( end ) =>\n        urge '$on_end 1'\n        after 1, => urge '$on_end 2'; end()\n    #.......................................................................................................\n    input_A.on  'end', -> urge \"input_A.end\"\n    input_B.on  'end', -> urge \"input_B.end\"\n    #.......................................................................................................\n    write = ->\n      for n in [ 0 .. 10 ]\n        help \"write #{n}\"\n        input_A.write n\n        yield after 0.5, resume\n      input_A.end()\n    #.......................................................................................................\n    write()\n\n\n\n\n\nf()\n\n\n\n\n\n\n"]}
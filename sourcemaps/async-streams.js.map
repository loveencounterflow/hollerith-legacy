{"version":3,"sources":["async-streams.coffee"],"names":[],"mappings":"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","file":"async-streams.js","sourceRoot":"/source/","sourcesContent":["\n\n\n\n############################################################################################################\nnjs_path                  = require 'path'\n# njs_fs                    = require 'fs'\njoin                      = njs_path.join\n#...........................................................................................................\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'HOLLERITH/tests'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nsuspend                   = require 'coffeenode-suspend'\nstep                      = suspend.step\nafter                     = suspend.after\n# eventually                = suspend.eventually\n### TAINT experimentally using `later` in place of `setImmediate` ###\nlater                     = suspend.immediately\n#...........................................................................................................\ntest                      = require 'guy-test'\n#...........................................................................................................\nD                         = require 'pipedreams2'\n$                         = D.remit.bind D\n$async                    = D.remit_async.bind D\n#...........................................................................................................\nHOLLERITH                 = require './main'\ndb                        = null\n#...........................................................................................................\nlevelup                   = require 'level'\nleveldown                 = require 'level/node_modules/leveldown'\nCODEC                     = require 'hollerith-codec'\n#...........................................................................................................\nƒ                         = CND.format_number\nmisfit                    = Symbol 'misfit'\n\n\n#-----------------------------------------------------------------------------------------------------------\nf = ->\n  step ( resume ) =>\n    number_input = D.create_throughstream()\n    lc_input    = D.create_throughstream()\n    uc_input    = D.create_throughstream()\n    #.......................................................................................................\n    number_input\n      .pipe D.$lockstep lc_input, fallback: 'missing'\n      .pipe D.$lockstep uc_input, fallback: 'missing'\n      # .pipe $async ( data, done ) ->\n      #   dt = if data is 1 then 5 else CND.random_number 0.5, 1.5\n      #   # debug '©WscFi', data, dt\n      #   after dt, =>\n      #     urge \"send #{rpr data}\"\n      #     done data\n      .pipe D.$show()\n      .pipe D.$on_end ( end ) =>\n        urge '$on_end 1'\n        after 0.5, => urge '$on_end 2'; end()\n    #.......................................................................................................\n    for n in [ 0 .. 7 ]\n      letter = String.fromCodePoint ( 'a'.codePointAt 0 ) + n\n      help \"write #{letter}\"\n      lc_input.write letter\n      yield after 0.25, resume\n    lc_input.end()\n    #.......................................................................................................\n    for n in [ 0 .. 7 ]\n      letter = String.fromCodePoint ( 'A'.codePointAt 0 ) + n\n      help \"write #{letter}\"\n      uc_input.write letter\n      yield after 0.25, resume\n    uc_input.end()\n    #.......................................................................................................\n    for n in [ 0 .. 9 ]\n      help \"write #{n}\"\n      number_input.write n\n      yield after 0.25, resume\n    number_input.end()\n    #.......................................................................................................\n    return null\n\n\nf()\n\n\n\n\n\n\n"]}
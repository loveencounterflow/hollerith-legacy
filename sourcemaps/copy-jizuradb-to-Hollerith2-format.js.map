{"version":3,"sources":["copy-jizuradb-to-Hollerith2-format.coffee"],"names":[],"mappings":"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","file":"copy-jizuradb-to-Hollerith2-format.js","sourceRoot":"/source/","sourcesContent":["\n\n\n############################################################################################################\nnjs_path                  = require 'path'\n# # njs_fs                    = require 'fs'\njoin                      = njs_path.join\n#...........................................................................................................\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'HOLLERITH/copy'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nsuspend                   = require 'coffeenode-suspend'\nstep                      = suspend.step\nafter                     = suspend.after\neventually                = suspend.eventually\nimmediately               = suspend.immediately\nrepeat_immediately        = suspend.repeat_immediately\nevery                     = suspend.every\n#...........................................................................................................\nD                         = require 'pipedreams2'\n$                         = D.remit.bind D\n$async                    = D.remit_async.bind D\n#...........................................................................................................\nHOLLERITH                 = require './main'\nDEMO                      = require './demo'\n∆í                         = CND.format_number.bind CND\n\n#-----------------------------------------------------------------------------------------------------------\noptions =\n  sample:         null\n  # sample:         [ '‰∏≠', 'Âúã', 'Áöá', 'Â∏ù', ]\n\n#-----------------------------------------------------------------------------------------------------------\n@$show_progress = ( size ) ->\n  size   ?= 1e3\n  count   = 0\n  return $ ( data, send ) =>\n    count += 1\n    echo ∆í count if count % size is 0\n    send data\n\n#-----------------------------------------------------------------------------------------------------------\n@$keep_small_sample = ->\n  return $ ( key, send ) =>\n    return send key unless options[ 'sample' ]?\n    [ glyph, prd, obj, idx, ] = key\n    send key if glyph in options[ 'sample' ]\n\n#-----------------------------------------------------------------------------------------------------------\n@$throw_out_pods = ->\n  return $ ( key, send ) =>\n    [ glyph, prd, obj, idx, ] = key\n    send key unless prd is 'pod'\n\n#-----------------------------------------------------------------------------------------------------------\n@$cast_types = ( ds_options ) ->\n  return $ ( [ sbj, prd, obj, idx, ], send ) =>\n    type_description = ds_options[ 'schema' ][ prd ]\n    unless type_description?\n      warn \"no type description for predicate #{rpr prd}\"\n    else\n      switch type = type_description[ 'type' ]\n        when 'int'\n          obj = parseInt obj, 10\n        when 'text'\n          ### TAINT we have no booleans configured ###\n          if      obj is 'true'   then obj = true\n          else if obj is 'false'  then obj = false\n    send if idx? then [ sbj, prd, obj, idx, ] else [ sbj, prd, obj, ]\n\n#-----------------------------------------------------------------------------------------------------------\n@$collect_lists = ->\n  objs          = null\n  sbj_prd       = null\n  last_digest   = null\n  context_keys  = []\n  has_errors    = false\n  #.........................................................................................................\n  return $ ( key, send, end ) =>\n    #.......................................................................................................\n    if key?\n      context_keys.push key; context_keys.shift() if context_keys.length > 10\n      [ sbj, prd, obj, idx, ] = key\n      digest                  = JSON.stringify [ sbj, prd, ]\n      #.....................................................................................................\n      if digest is last_digest\n        if idx?\n          objs[ idx ] = obj\n        else\n          ### A certain subject/predicate combination can only ever be repeated if an index is\n          present in the key ###\n          alert()\n          alert \"erroneous repeated entry; context:\"\n          alert context_keys\n          has_errors = true\n      else\n        send [ sbj_prd..., objs, ] if objs?\n        objs            = null\n        last_digest     = digest\n        if idx?\n          objs            = []\n          objs[ idx ]     = obj\n          sbj_prd         = [ sbj, prd, ]\n        else\n          send key\n    #.......................................................................................................\n    if end?\n      send [ sbj_prd..., objs, ] if objs?\n      return send.error new Error \"there were errors; see alerts above\" if has_errors\n      end()\n    #.......................................................................................................\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$compact_lists = ->\n  return $ ( [ sbj, prd, obj, ], send ) =>\n    ### Compactify sparse lists so all `undefined` elements are removed; warn about this ###\n    if ( CND.type_of obj ) is 'list'\n      new_obj = ( element for element in obj when element isnt undefined )\n      if obj.length isnt new_obj.length\n        warn \"phrase #{rpr [ sbj, prd, obj, ]} contained undefined elements; compactified\"\n      obj = new_obj\n    send [ sbj, prd, obj, ]\n\n#-----------------------------------------------------------------------------------------------------------\n@copy_jizura_db = ->\n  home            = join __dirname, '../../jizura-datasources'\n  source_route    = join home, 'data/leveldb'\n  target_route    = join home, 'data/leveldb-v2'\n  target_db_size  = 1e6\n  ds_options      = require join home, 'options'\n  source_db       = HOLLERITH.new_db source_route\n  target_db       = HOLLERITH.new_db target_route, size: target_db_size\n  #.........................................................................................................\n  step ( resume ) =>\n    yield HOLLERITH.clear target_db, resume\n    gte         = 'so|'\n    lte         = DEMO._lte_from_gte gte\n    input       = source_db[ '%self' ].createKeyStream { gte, lte, }\n    batch_size  = 1e4\n    output      = HOLLERITH.$write target_db, { batch: batch_size, }\n    #.........................................................................................................\n    help \"copying from  #{source_route}\"\n    help \"to            #{target_route}\"\n    help \"reading records with prefix #{rpr gte}\"\n    help \"writing with batch size #{∆í batch_size}\"\n    #.........................................................................................................\n    input\n      #.......................................................................................................\n      .pipe @$show_progress 1e4\n      .pipe D.$count ( count ) -> help \"read #{∆í count} keys\"\n      .pipe DEMO._$split_so_bkey()\n      .pipe @$keep_small_sample()\n      .pipe @$throw_out_pods()\n      .pipe @$cast_types ds_options\n      .pipe @$collect_lists()\n      .pipe @$compact_lists()\n      # .pipe D.$show()\n      .pipe D.$count ( count ) -> help \"kept #{∆í count} entries\"\n      .pipe output\n\n\n############################################################################################################\nunless module.parent?\n  @copy_jizura_db()\n"]}
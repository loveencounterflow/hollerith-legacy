{"version":3,"sources":["copy-jizuradb-to-Hollerith2-format.coffee"],"names":[],"mappings":"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","file":"copy-jizuradb-to-Hollerith2-format.js","sourceRoot":"/source/","sourcesContent":["\n\n\n############################################################################################################\nnjs_path                  = require 'path'\n# # njs_fs                    = require 'fs'\njoin                      = njs_path.join\n#...........................................................................................................\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'HOLLERITH/copy'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nsuspend                   = require 'coffeenode-suspend'\nstep                      = suspend.step\nafter                     = suspend.after\neventually                = suspend.eventually\nimmediately               = suspend.immediately\nrepeat_immediately        = suspend.repeat_immediately\nevery                     = suspend.every\n#...........................................................................................................\nD                         = require 'pipedreams2'\n$                         = D.remit.bind D\n$async                    = D.remit_async.bind D\n#...........................................................................................................\nHOLLERITH                 = require './main'\nDEMO                      = require './demo'\nƒ                         = CND.format_number.bind CND\n\n#-----------------------------------------------------------------------------------------------------------\noptions =\n  # sample:         null\n  sample:         [ '疈', '國', '𠵓', ]\n  sample:         [ '𡬜', '國', '𠵓', ]\n\n#-----------------------------------------------------------------------------------------------------------\n@$show_progress = ( size ) ->\n  size   ?= 1e3\n  count   = 0\n  return $ ( data, send ) =>\n    count += 1\n    echo ƒ count if count % size is 0\n    send data\n\n#-----------------------------------------------------------------------------------------------------------\n@$keep_small_sample = ->\n  return $ ( key, send ) =>\n    return send key unless options[ 'sample' ]?\n    [ glyph, prd, obj, idx, ] = key\n    send key if glyph in options[ 'sample' ]\n\n#-----------------------------------------------------------------------------------------------------------\n@$throw_out_pods = ->\n  return $ ( key, send ) =>\n    [ glyph, prd, obj, idx, ] = key\n    send key unless prd is 'pod'\n\n#-----------------------------------------------------------------------------------------------------------\n@$cast_types = ( ds_options ) ->\n  return $ ( [ sbj, prd, obj, idx, ], send ) =>\n    type_description = ds_options[ 'schema' ][ prd ]\n    unless type_description?\n      warn \"no type description for predicate #{rpr prd}\"\n    else\n      switch type = type_description[ 'type' ]\n        when 'int'\n          obj = parseInt obj, 10\n        when 'text'\n          ### TAINT we have no booleans configured ###\n          if      obj is 'true'   then obj = true\n          else if obj is 'false'  then obj = false\n    send if idx? then [ sbj, prd, obj, idx, ] else [ sbj, prd, obj, ]\n\n#-----------------------------------------------------------------------------------------------------------\n@$collect_lists = ->\n  objs          = null\n  sbj_prd       = null\n  last_digest   = null\n  context_keys  = []\n  has_errors    = false\n  #.........................................................................................................\n  return $ ( key, send, end ) =>\n    #.......................................................................................................\n    if key?\n      context_keys.push key; context_keys.shift() if context_keys.length > 10\n      [ sbj, prd, obj, idx, ] = key\n      digest                  = JSON.stringify [ sbj, prd, ]\n      #.....................................................................................................\n      if digest is last_digest\n        if idx?\n          objs[ idx ] = obj\n        else\n          ### A certain subject/predicate combination can only ever be repeated if an index is\n          present in the key ###\n          alert()\n          alert \"erroneous repeated entry; context:\"\n          alert context_keys\n          has_errors = true\n      else\n        send [ sbj_prd..., objs, ] if objs?\n        objs            = null\n        last_digest     = digest\n        if idx?\n          objs            = []\n          objs[ idx ]     = obj\n          sbj_prd         = [ sbj, prd, ]\n        else\n          send key\n    #.......................................................................................................\n    if end?\n      send [ sbj_prd..., objs, ] if objs?\n      return send.error new Error \"there were errors; see alerts above\" if has_errors\n      end()\n    #.......................................................................................................\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$compact_lists = ->\n  return $ ( [ sbj, prd, obj, ], send ) =>\n    ### Compactify sparse lists so all `undefined` elements are removed; warn about this ###\n    if ( CND.type_of obj ) is 'list'\n      new_obj = ( element for element in obj when element isnt undefined )\n      if obj.length isnt new_obj.length\n        warn \"phrase #{rpr [ sbj, prd, obj, ]} contained undefined elements; compactified\"\n      obj = new_obj\n    send [ sbj, prd, obj, ]\n\n#-----------------------------------------------------------------------------------------------------------\n@$add_version_to_kwic_v1 = ->\n  ### mark up all predicates `guide/kwic/*` as `guide/kwic/v1/*` ###\n  return $ ( [ sbj, prd, obj, ], send ) =>\n    if prd.startsWith 'guide/kwic/'\n      prd = prd.replace /^guide\\/kwic\\//, 'guide/kwic/v1/'\n    send [ sbj, prd, obj, ]\n\n#-----------------------------------------------------------------------------------------------------------\n@_long_wrapped_lineups_from_guide_has_uchr = ( guides ) ->\n  ### Extending lineups to accommodate for glyphs with 'overlong' factorials (those with more than 6\n  factors; these were previously excluded from the gamut in `feed-db.coffee`, line 2135,\n  `@KWIC.$compose_lineup_facets`). ###\n  lineup      = guides[ .. ]\n  last_idx    = lineup.length - 1 + 6\n  lineup.push    '\\u3000' while lineup.length < 19\n  lineup.unshift '\\u3000' while lineup.length < 25\n  R           = []\n  for idx in [ 6 .. last_idx ]\n    infix   = lineup[ idx ]\n    suffix  = lineup[ idx + 1 .. idx + 6 ].join ''\n    prefix  = lineup[ idx - 6 .. idx - 1 ].join ''\n    R.push [ infix, suffix, prefix, ].join ','\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@$add_kwic_v2 = ->\n  ### see `demo/show_kwic_v2_sample` ###\n  last_glyph            = null\n  long_wrapped_lineups  = null\n  return $ ( [ sbj, prd, obj, ], send ) =>\n    #.......................................................................................................\n    ### >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> ###\n    if prd is 'guide/has/uchr'\n      last_glyph            = sbj\n      long_wrapped_lineups  = @_long_wrapped_lineups_from_guide_has_uchr obj\n      warn long_wrapped_lineups\n    ### >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> ###\n    #.......................................................................................................\n    return send [ sbj, prd, obj, ] unless prd.startsWith 'guide/kwic/v1/'\n    #.......................................................................................................\n    switch prd.replace /^guide\\/kwic\\/v1\\//, ''\n      when 'lineup/wrapped/infix', 'lineup/wrapped/prefix', 'lineup/wrapped/suffix', 'lineup/wrapped/single'\n        ### copy to target ###\n        send [ sbj, prd, obj, ]\n      when 'sortcode'\n        [ glyph, _, sortcodes_v1, ] = [ sbj, prd, obj, ]\n        sortcodes_v2                = []\n        #...................................................................................................\n        ### The difference between KWIC sortcodes of version 1 and version 2 lies in the re-arrangement\n        of the factor codes and the index codes. In v1, the index codes appeared interspersed with\n        the factor codes; in v2, the index codes come up front and the index codes come in the latter half\n        of the sortcode strings. The effect of this rearrangement is that now that all of the indexes\n        (which indicate the position of each factor in the lineup) are weaker than any of the factor codes,\n        like sequences of factor codes (and, therefore, factors) will always be grouped together (whereas\n        in v1, only like factors with like positions appeared together, and often like sequences appeared\n        with other sequences interspersed where their indexes demanded it so). ###\n        for sortcode_v1 in sortcodes_v1\n          sortrow_v1 = ( x for x in sortcode_v1.split /(........,..),/ when x.length > 0 )\n          sortrow_v1 = ( x.split ',' for x in sortrow_v1 )\n          sortrow_v2 = []\n          sortrow_v2.push sortcode for [ sortcode, _, ] in sortrow_v1\n          sortrow_v2.push position for [ _, position, ] in sortrow_v1\n          sortcodes_v2.push sortrow_v2.join ','\n        #...................................................................................................\n        unless glyph is last_glyph\n          return send.error new Error \"unexpected mismatch: #{rpr glyph}, #{rpr last_glyph}\"\n        #...................................................................................................\n        unless long_wrapped_lineups?\n          return send.error new Error \"missing long wrapped lineups for glyph #{rpr glyph}\"\n        #...................................................................................................\n        unless sortcodes_v2.length is long_wrapped_lineups.length\n          warn 'sortcodes_v2:         ', sortcodes_v2\n          warn 'long_wrapped_lineups: ', long_wrapped_lineups\n          return send.error new Error \"length mismatch for glyph #{rpr glyph}\"\n        #...................................................................................................\n        sortcodes_v1[ idx ] += \";\" + lineup for lineup, idx in long_wrapped_lineups\n        sortcodes_v2[ idx ] += \";\" + lineup for lineup, idx in long_wrapped_lineups\n        send [ glyph, 'guide/kwic/v2/lineup/wrapped/single', long_wrapped_lineups, ]\n        long_wrapped_lineups  = null\n        #...................................................................................................\n        send [ glyph, prd, sortcodes_v1, ]\n        send [ glyph, 'guide/kwic/v2/sortcode', sortcodes_v2, ]\n      else\n        send.error new Error \"unhandled predicate #{rpr prd}\"\n\n#-----------------------------------------------------------------------------------------------------------\n@v1_split_so_bkey = ( bkey ) ->\n  R       = bkey.toString 'utf-8'\n  R       = R.split '|'\n  idx_txt = R[ 3 ]\n  R       = [ ( R[ 1 ].split ':' )[ 1 ], ( R[ 2 ].split ':' )..., ]\n  R.push ( parseInt idx_txt, 10 ) if idx_txt? and idx_txt.length > 0\n  for r, idx in R\n    continue unless CND.isa_text r\n    continue unless 'µ' in r\n    R[ idx ] = @v1_unescape r\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@v1_$split_so_bkey = -> $ ( bkey, send ) => send @v1_split_so_bkey bkey\n\n#-----------------------------------------------------------------------------------------------------------\n@v1_lte_from_gte = ( gte ) ->\n  R = new Buffer ( last_idx = Buffer.byteLength gte ) + 1\n  R.write gte\n  R[ last_idx ] = 0xff\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@v1_unescape = ( text_esc ) ->\n  matcher = /µ([0-9a-f]{2})/g\n  return text_esc.replace matcher, ( _, cid_hex ) ->\n    return String.fromCharCode parseInt cid_hex, 16\n\n#-----------------------------------------------------------------------------------------------------------\n@copy_jizura_db = ->\n  home            = join __dirname, '../../jizura-datasources'\n  source_route    = join home, 'data/leveldb'\n  # target_route    = join home, 'data/leveldb-v2'\n  ### !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! ###\n  target_route    = '/tmp/leveldb-v2'\n  target_db_size  = 1e6\n  ds_options      = require join home, 'options'\n  source_db       = HOLLERITH.new_db source_route\n  target_db       = HOLLERITH.new_db target_route, size: target_db_size, create: yes\n  help \"using DB at #{source_db[ '%self' ][ 'location' ]}\"\n  help \"using DB at #{target_db[ '%self' ][ 'location' ]}\"\n  #.........................................................................................................\n  step ( resume ) =>\n    yield HOLLERITH.clear target_db, resume\n    # gte         = 'so|glyph:中'\n    # gte         = 'so|glyph:覆'\n    gte         = 'so|'\n    lte         = @v1_lte_from_gte gte\n    input       = source_db[ '%self' ].createKeyStream { gte, lte, }\n    batch_size  = 1e4\n    output      = HOLLERITH.$write target_db, { batch: batch_size, }\n    #.........................................................................................................\n    help \"copying from  #{source_route}\"\n    help \"to            #{target_route}\"\n    help \"reading records with prefix #{rpr gte}\"\n    help \"writing with batch size #{ƒ batch_size}\"\n    #.........................................................................................................\n    input\n      #.......................................................................................................\n      .pipe @$show_progress 1e4\n      .pipe D.$count ( count ) -> help \"read #{ƒ count} keys\"\n      .pipe @v1_$split_so_bkey()\n      .pipe @$keep_small_sample()\n      .pipe @$throw_out_pods()\n      .pipe @$cast_types ds_options\n      .pipe @$collect_lists()\n      .pipe @$compact_lists()\n      .pipe @$add_version_to_kwic_v1()\n      .pipe @$add_kwic_v2()\n      .pipe D.$show()\n      .pipe D.$count ( count ) -> help \"kept #{ƒ count} entries\"\n      .pipe output\n\n\n############################################################################################################\nunless module.parent?\n  @copy_jizura_db()\n"]}
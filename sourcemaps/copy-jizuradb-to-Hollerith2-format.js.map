{"version":3,"sources":["copy-jizuradb-to-Hollerith2-format.coffee"],"names":[],"mappings":"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","file":"copy-jizuradb-to-Hollerith2-format.js","sourceRoot":"/source/","sourcesContent":["\n\n\n############################################################################################################\n# njs_path                  = require 'path'\n# # njs_fs                    = require 'fs'\n# join                      = njs_path.join\n#...........................................................................................................\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'HOLLERITH/copy'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nsuspend                   = require 'coffeenode-suspend'\nstep                      = suspend.step\nafter                     = suspend.after\neventually                = suspend.eventually\nimmediately               = suspend.immediately\nrepeat_immediately        = suspend.repeat_immediately\nevery                     = suspend.every\n#...........................................................................................................\n# BYTEWISE                  = require 'bytewise'\n# through                   = require 'through2'\n# LevelBatch                = require 'level-batch-stream'\n# BatchStream               = require 'batch-stream'\n# parallel                  = require 'concurrent-writable'\nD                         = require 'pipedreams2'\n$                         = D.remit.bind D\n$async                    = D.remit_async.bind D\n#...........................................................................................................\n# new_db                    = require 'level'\n# new_levelgraph            = require 'levelgraph'\n# db                        = new_levelgraph '/tmp/levelgraph'\nHOLLERITH                 = require './main'\nDEMO                      = require './demo'\nƒ                         = CND.format_number.bind CND\n\n#-----------------------------------------------------------------------------------------------------------\noptions =\n  sample:         null\n  # sample:         [ '中', '國', '皇', '帝', ]\n\n#-----------------------------------------------------------------------------------------------------------\n@$show_progress = ( size ) ->\n  size   ?= 1e3\n  count   = 0\n  return $ ( data, send ) =>\n    count += 1\n    whisper ƒ count if count % size is 0\n    send data\n\n#-----------------------------------------------------------------------------------------------------------\n@$keep_small_sample = ->\n  return $ ( key, send ) =>\n    return send key unless options[ 'sample' ]?\n    [ glyph, prd, obj, idx, ] = key\n    send key if glyph in options[ 'sample' ]\n\n#-----------------------------------------------------------------------------------------------------------\n@$throw_out_pods = ->\n  return $ ( key, send ) =>\n    [ glyph, prd, obj, idx, ] = key\n    send key unless prd is 'pod'\n\n#-----------------------------------------------------------------------------------------------------------\n@$cast_types = ( ds_options ) ->\n  return $ ( [ sbj, prd, obj, idx, ], send ) =>\n    type_description = ds_options[ 'schema' ][ prd ]\n    unless type_description?\n      warn \"no type description for predicate #{rpr prd}\"\n    else\n      switch type = type_description[ 'type' ]\n        when 'int'\n          obj = parseInt obj, 10\n        when 'text'\n          ### TAINT we have no booleans configured ###\n          if      obj is 'true'   then obj = true\n          else if obj is 'false'  then obj = false\n    send if idx? then [ sbj, prd, obj, idx, ] else [ sbj, prd, obj, ]\n\n#-----------------------------------------------------------------------------------------------------------\n@$collect_lists = ->\n  objs        = null\n  sbj_prd     = null\n  last_digest = null\n  #.........................................................................................................\n  return $ ( key, send, end ) =>\n    #.......................................................................................................\n    if key?\n      [ sbj, prd, obj, idx, ] = key\n      digest                  = JSON.stringify [ sbj, prd, ] # \"#{sbj}|#{prd}\"\n      #.....................................................................................................\n      if digest is last_digest\n        if idx?\n          objs[ idx ] = obj\n        else\n          ### A certain subject/predicate combination can only ever be repeated if an index is\n          present in the key ###\n          debug '©EyAEd', key\n          throw new Error \"should never happen\"\n      else\n        send [ sbj_prd..., objs, ] if objs?\n        objs            = null\n        last_digest     = digest\n        if idx?\n          objs            = []\n          objs[ idx ]     = obj\n          sbj_prd         = [ sbj, prd, ]\n        else\n          send key\n    #.......................................................................................................\n    if end?\n      send [ sbj_prd..., objs, ] if objs?\n      end()\n    #.......................................................................................................\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@copy_jizura_db = ->\n  ds_options  = require '/Volumes/Storage/io/jizura-datasources/options'\n  source_db   = HOLLERITH.new_db '/Volumes/Storage/io/jizura-datasources/data/leveldb' # options[ 'route' ]\n  target_db   = HOLLERITH.new_db '/tmp/jizura-hollerith2'\n  # target_db   = HOLLERITH.new_db '/Volumes/Storage/temp/jizura-hollerith2'\n  #.........................................................................................................\n  step ( resume ) =>\n    yield HOLLERITH.clear target_db, resume\n    gte         = 'so|'\n    # ### !!!!!!!!!!!!!!!!!!!!!!!! ###\n    # gte         = 'so|glyph:中' # !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n    # ### !!!!!!!!!!!!!!!!!!!!!!!! ###\n    lte         = DEMO._lte_from_gte gte\n    debug '©Y4DzO', { gte, lte, }\n    input       = source_db[ '%self' ].createKeyStream { gte, lte, }\n    batch_size  = 10000\n    ### !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! ###\n    batch_size  = 1\n    output      = HOLLERITH.$write target_db, { batch: batch_size, }\n    #.........................................................................................................\n    input\n      #.......................................................................................................\n      .pipe @$show_progress 1e5\n      # .pipe D.$show()\n      .pipe D.$count ( count ) -> help \"read #{ƒ count} keys\"\n      .pipe DEMO._$split_so_bkey()\n      .pipe @$keep_small_sample()\n      .pipe @$throw_out_pods()\n      .pipe @$cast_types ds_options\n      .pipe @$collect_lists()\n      .pipe D.$count ( count ) -> help \"kept #{ƒ count} entries\"\n      .pipe output\n\n\n    # #.......................................................................................................\n    # .pipe $ ( [ sbj, prd, obj, ], send ) =>\n    #   ### Compactify sparse lists so all `undefined` elements are removed; warn about this ###\n    #   if ( CND.type_of obj ) is 'list'\n    #     debug '©xACAv', obj\n    #     new_obj = ( element for element in obj when element isnt undefined )\n    #     if obj.length isnt new_obj.length\n    #       warn \"phrase #{rpr [ sbj, prd, obj, ]} contained undefined elements; compactified\"\n    #     obj = new_obj\n    #   send [ sbj, prd, obj, ]\n    # #.......................................................................................................\n    # .pipe $ ( [ sbj, prd, obj, ], send ) =>\n    #   ### Type Casting ###\n    #   type_description = ds_options[ 'schema' ][ prd ]\n    #   unless type_description?\n    #     warn \"no type description for predicate #{rpr prd}\"\n    #   else\n    #     switch type = type_description[ 'type' ]\n    #       when 'int'\n    #         obj = parseInt obj, 10\n    #       when 'text'\n    #         ### TAINT we have no booleans configured ###\n    #         if      obj is 'true'   then obj = true\n    #         else if obj is 'false'  then obj = false\n    #   send [ sbj, prd, obj, ]\n    # #.......................................................................................................\n\n\n############################################################################################################\nunless module.parent?\n  @copy_jizura_db()\n"]}
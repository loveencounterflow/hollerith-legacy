{"version":3,"sources":["main.coffee"],"names":[],"mappings":"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","file":"main.js","sourceRoot":"/source/","sourcesContent":["\n\n############################################################################################################\n# njs_util                  = require 'util'\n# njs_path                  = require 'path'\n# njs_fs                    = require 'fs'\n#...........................................................................................................\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'HOLLERITH/main'\nlog                       = CND.get_logger 'plain',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\nƒ                         = CND.format_number.bind CND\n#...........................................................................................................\nsuspend                   = require 'coffeenode-suspend'\nstep                      = suspend.step\n#...........................................................................................................\nCODEC                     = @CODEC = require 'hollerith-codec'\nDUMP                      = @DUMP  = require './dump'\n_codec_encode             = CODEC.encode.bind CODEC\n_codec_encode_plus_tm_hi  = CODEC.encode_plus_hi.bind CODEC\n_codec_decode             = CODEC.decode.bind CODEC\n#...........................................................................................................\nD                         = require 'pipedreams'\n$                         = D.remit.bind D\n$async                    = D.remit_async.bind D\n_new_level_db             = require 'level'\nleveldown                 = require 'leveldown'\n#...........................................................................................................\nsuspend                   = require 'coffeenode-suspend'\nstep                      = suspend.step\nlater                     = suspend.immediately\n#...........................................................................................................\n@_LODASH                  = require 'lodash'\n\n\n#-----------------------------------------------------------------------------------------------------------\n@phrasetypes      = [ 'pos', 'spo', ]\n@_misfit          = Symbol 'misfit'\n@_zero_value_bfr  = new Buffer 'null'\n# warn \"mind inconsistencies in HOLLERITH2/main @_zero_enc etc\"\n# @_zero            = true # ?????????????????????????????\n# @_zero_enc        = _codec_encode [ @_zero,    ]\n# @_lo_enc          = _codec_encode [ null,      ]\n# @_hi_enc          = _codec_encode [ CODEC., ]\n# @_last_octet      = new Buffer [ 0xff, ]\n\n#-----------------------------------------------------------------------------------------------------------\n@new_db = ( route, settings ) ->\n  ### TAINT we should force this operation to be asynchronous; otherwise, DB may not be writeable ###\n  create_if_missing = settings?[ 'create'   ] ? yes\n  size              = settings?[ 'size'     ] ? 1e5\n  encoder           = settings?[ 'encoder'  ] ? null\n  decoder           = settings?[ 'decoder'  ] ? null\n  #.........................................................................................................\n  level_settings =\n    'keyEncoding':          'binary'\n    'valueEncoding':        'binary'\n    'createIfMissing':      create_if_missing\n    'errorIfExists':        no\n    'compression':          yes\n    'sync':                 no\n  #.........................................................................................................\n  ( require 'mkdirp' ).sync route if create_if_missing\n  #.........................................................................................................\n  substrate = _new_level_db route, level_settings, ( error ) ->\n    if error?\n      if error[ 'name' ] is 'OpenError'\n        ### TAINT error also thrown with misleading message if route doesn't exist up the penultimate term ###\n        throw new Error \"No database found at #{route} and no `create` setting given\"\n      throw error\n  #.........................................................................................................\n  R =\n    '~isa':           'HOLLERITH/db'\n    '%self':          substrate\n    'size':           size\n    'encoder':        encoder\n    'decoder':        decoder\n  #.........................................................................................................\n  return R\n\n# #-----------------------------------------------------------------------------------------------------------\n# @_reopen = ( db, handler ) ->\n#   step ( resume ) =>\n#     route = db[ '%self' ][ 'location' ]\n#     yield db[ '%self' ].close resume\n#     yield db[ '%self' ].open resume\n#     whisper \"re-opened LevelDB at #{route}\"\n#     handler null\n\n#-----------------------------------------------------------------------------------------------------------\n@clear = ( db, handler ) ->\n  step ( resume ) =>\n    route = db[ '%self' ][ 'location' ]\n    whisper \"closing DB\"\n    yield db[ '%self' ].close resume\n    # whisper \"erasing DB\"\n    yield leveldown.destroy route, resume\n    # whisper \"re-opening DB\"\n    yield db[ '%self' ].open resume\n    whisper \"erased and re-opened LevelDB at #{route}\"\n    handler null\n\n# #-----------------------------------------------------------------------------------------------------------\n# @clear = ( db, handler ) ->\n#   ASYNC = require 'async'\n#   route = db[ '%self' ][ 'location' ]\n#   tasks = []\n#   #.........................................................................................................\n#   tasks.push ( handler ) =>\n#     whisper \"closing DB...\"\n#     db[ '%self' ].close =>\n#       whisper \"ok\"\n#       handler()\n#   #.........................................................................................................\n#   tasks.push ( handler ) =>\n#     whisper \"erasing DB...\"\n#     leveldown.destroy route, =>\n#       whisper \"ok\"\n#       handler()\n#   #.........................................................................................................\n#   tasks.push ( handler ) =>\n#     whisper \"re-opening DB...\"\n#     db[ '%self' ].open =>\n#       whisper \"ok\"\n#       handler()\n#   #.........................................................................................................\n#   ASYNC.series tasks, ( error ) =>\n#     return handler error if error?\n#     whisper \"erased and re-opened LevelDB at #{route}\"\n#     handler()\n\n\n#===========================================================================================================\n# METADATA\n#-----------------------------------------------------------------------------------------------------------\n@_put_meta = ( db, name, value, handler ) ->\n  ### TAINT should use own type for metadata ###\n  key_bfr   = @_encode_key db, [ 'meta', name, ]\n  value_bfr = if CND.isa_jsbuffer then value else @_encode_value db, value\n  db[ '%self' ].put key_bfr, value_bfr, ( error ) => handler error if handler?\n\n#-----------------------------------------------------------------------------------------------------------\n@_get_meta = ( db, name, fallback, handler ) ->\n  switch arity = arguments.length\n    when 3\n      handler   = fallback\n      fallback  = @_misfit\n    when 4\n      null\n    else\n      throw new Error \"expected 3 or 4 arguments, got #{arity}\"\n  #.........................................................................................................\n  key_bfr = @_encode_key db, [ 'meta', name, ]\n  db[ '%self' ].get key_bfr, ( error, value ) =>\n    if error?\n      return handler null, fallback if ( error[ 'type' ] is 'NotFoundError' ) and ( fallback isnt @_misfit )\n      return handler error\n    handler null, value\n\n#-----------------------------------------------------------------------------------------------------------\n@_is_meta = ( db, key_bfr ) -> ( ( key_bfr.slice 0, @_meta_prefix.length ).compare @_meta_prefix ) is 0\n\n### TAINT must derive meta key prefix from result of `_put_meta` ###\n@_meta_prefix = new Buffer [ 0x54, 0x6d, 0x65, 0x74, 0x61, 0x00, ]\n\n\n#===========================================================================================================\n# WRITING\n#-----------------------------------------------------------------------------------------------------------\n@$write = ( db, settings ) ->\n  ### TAINT currently loading and saving bloom filter each time a pipeline with `$write` is run ###\n  #.........................................................................................................\n  settings         ?= {}\n  ### Superficial experiments show that a much bigger batch size than 1'000 does not tend to improve\n  throughput; therefore, in order to reduce memory footprint, it seems advisable to leave batch size\n  in the order of around a thousand entries. ###\n  batch_size        = settings[ 'batch'  ] ? 1000\n  solid_predicates  = settings[ 'solids' ] ? []\n  loner_predicates  = settings[ 'loners' ] ? []\n  ensure_unique     = settings[ 'unique' ] ? true\n  substrate         = db[ '%self' ]\n  R                 = D.create_throughstream()\n  batch_written     = null\n  #.........................................................................................................\n  $index = => $ ( spo, send ) =>\n    [ sbj, prd, obj, ] = spo\n    send [ [ 'spo', sbj, prd, ], obj, ]\n    #.......................................................................................................\n    unless ( ( obj_type = CND.type_of obj ) is 'pod' ) or ( prd in loner_predicates )\n      #.....................................................................................................\n      if ( obj_type is 'list' ) and not ( prd in solid_predicates )\n        for obj_element, obj_idx in obj\n          send [ [ 'pos', prd, obj_element, sbj, obj_idx, ], ]\n      #.....................................................................................................\n      else\n        send [ [ 'pos', prd, obj, sbj, ], ]\n  #.........................................................................................................\n  $encode = => $ ( facet, send ) =>\n    [ key, value, ] = facet\n    phrasetype      = key[ 0 ]\n    key_bfr         = @_encode_key db, key\n    value_bfr       = if value? then @_encode_value db, value else @_zero_value_bfr\n    send [ phrasetype, key_bfr, value_bfr, ]\n  #.........................................................................................................\n  $as_batch_entry = => $ ( facet_bfr_plus, send ) =>\n    [ phrasetype, key_bfr, value_bfr, ] = facet_bfr_plus\n    send type: 'put', key: key_bfr, value: value_bfr\n  #.........................................................................................................\n  $write = => $ ( batch, send ) =>\n    substrate.batch batch\n    batch_written()\n    send batch\n  #.........................................................................................................\n  if ensure_unique\n    { batch_written, $ensure_unique_sp, $load_bloom, $save_bloom, } = @_get_bloom_methods db\n  else\n    batch_written = ->\n  #.........................................................................................................\n  pipeline = []\n  pipeline.push $load_bloom()         if ensure_unique\n  pipeline.push @$validate_spo()\n  pipeline.push $ensure_unique_sp()   if ensure_unique\n  pipeline.push $index()\n  pipeline.push $encode()\n  pipeline.push $as_batch_entry()\n  pipeline.push D.$batch batch_size\n  pipeline.push $write()\n  pipeline.push $save_bloom()         if ensure_unique\n  #.........................................................................................................\n  R = R.pipe D.combine pipeline...\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@validate_spo = ( spo ) ->\n  ### Do a shallow sanity check to see whether `spo` is a triplet. ###\n  throw new Error \"invalid SPO key, must be list: #{rpr spo}\" unless CND.isa_list spo\n  throw new Error \"invalid SPO key, must be of length 3: #{rpr spo}\" unless spo.length is 3\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$validate_spo = ->\n  ### Do a shallow sanity check to see whether all incoming data are triplets. ###\n  return $ ( spo, send ) =>\n    ### Analyze SPO key and send all necessary POS facets: ###\n    try\n      @validate_spo spo\n    catch error\n      return send.error error\n      # throw error\n    send spo\n\n#-----------------------------------------------------------------------------------------------------------\n@_get_bloom_methods = ( db ) ->\n  #---------------------------------------------------------------------------------------------------------\n  bloom_settings        = size: db[ 'size' ] ? 1e5\n  seen                  = {}\n  #---------------------------------------------------------------------------------------------------------\n  batch_written = ->\n    seen = {}\n  #---------------------------------------------------------------------------------------------------------\n  show_bloom_info = =>\n    CND.BLOOM.report db[ '%bloom' ]\n  #---------------------------------------------------------------------------------------------------------\n  $ensure_unique_sp = =>\n    #.......................................................................................................\n    return $async ( spo, done ) =>\n      [ sbj, prd, _, ]      = spo\n      key                   = [ sbj, prd, ]\n      key_bfr               = CODEC.encode key\n      key_txt               = key_bfr.toString 'hex'\n      bloom                 = db[ '%bloom' ]\n      seen_has_key          = seen[ key_txt ]?\n      bloom_has_key         = CND.BLOOM.has bloom, key_bfr\n      #.....................................................................................................\n      if seen_has_key\n        warn key\n        return done.error new Error \"S/P pair already in DB: #{rpr key}\"\n      #.....................................................................................................\n      seen[ key_txt ] = 1\n      CND.BLOOM.add bloom, key_bfr\n      #.....................................................................................................\n      return done spo unless bloom_has_key\n      #.....................................................................................................\n      @has_any db, { prefix: [ 'spo', sbj, prd, ], }, ( error, db_has_key ) =>\n        return done.error error if error?\n        if db_has_key\n          return done.error new Error \"S/P pair already in DB: #{rpr key}\"\n        done spo\n  #---------------------------------------------------------------------------------------------------------\n  $load_bloom = =>\n    is_first = yes\n    return $async ( data, done ) =>\n      unless is_first\n        return if data? then done data else done()\n      #.....................................................................................................\n      is_first = no\n      whisper \"loading Bloom filter...\"\n      #.....................................................................................................\n      @_get_meta db, 'bloom', null, ( error, bloom_bfr ) =>\n        return done.error error if error?\n        if bloom_bfr is null\n          warn 'no bloom filter found'\n          bloom = CND.BLOOM.new_filter bloom_settings\n        else\n          bloom = CND.BLOOM.from_buffer bloom_bfr\n        db[ '%bloom' ] = bloom\n        whisper \"...ok\"\n        show_bloom_info()\n        return if data? then done data else done()\n  #---------------------------------------------------------------------------------------------------------\n  $save_bloom = =>\n    return D.$on_end ( send, end ) =>\n      whisper \"saving Bloom filter...\"\n      bloom_bfr = CND.BLOOM.as_buffer db[ '%bloom' ]\n      whisper \"serialized bloom filter to #{ƒ bloom_bfr.length} bytes\"\n      show_bloom_info()\n      #.....................................................................................................\n      @_put_meta db, 'bloom', bloom_bfr, ( error ) =>\n        return send.error error if error?\n        whisper \"...ok\"\n        end()\n  #---------------------------------------------------------------------------------------------------------\n  return { batch_written, $ensure_unique_sp, $load_bloom, $save_bloom, }\n\n\n#===========================================================================================================\n# READING\n#-----------------------------------------------------------------------------------------------------------\n@create_phrasestream = ( db, query ) ->\n  return @_create_phrasestream db, query\n\n#-----------------------------------------------------------------------------------------------------------\n@read_phrases = ( db, query, handler ) ->\n  switch arity = arguments.length\n    when 2\n      handler   = query\n      query     = null\n    when 3\n      null\n    else\n      throw new Error \"expected 2 or 3 arguments, got #{arity}\"\n  return @_create_phrasestream db, query, handler\n\n#-----------------------------------------------------------------------------------------------------------\n@read_one_phrase = ( db, query, handler ) ->\n  fallback = @_misfit\n  #.........................................................................................................\n  switch arity = arguments.length\n    when 2\n      handler   = query\n      query     = null\n    when 3\n      null\n    else\n      throw new Error \"expected 4 or 5 arguments, got #{arity}\"\n  #.........................................................................................................\n  if query? and 'fallback' of query\n    fallback = query[ 'fallback' ]\n    delete query[ 'fallback' ]\n  #.........................................................................................................\n  @read_phrases db, query, ( error, phrases ) =>\n    return handler error if error?\n    return handler null, fallback if ( phrases.length is 0 ) and ( fallback isnt @_misfit )\n    return handler new Error \"expected 1 phrase, got #{phrases.length}\" if phrases.length isnt 1\n    handler null, phrases[ 0 ]\n\n#-----------------------------------------------------------------------------------------------------------\n@_create_phrasestream = ( db, query, handler ) ->\n  input = @create_facetstream db, query\n  R = input.pipe @$as_phrase db\n  if handler?\n    R = R\n      .pipe D.$collect()\n      .pipe $ ( data, send ) =>\n        handler null, data\n    R.on 'error', ( error ) => handler error\n  R[ '%meta' ] = input[ '%meta' ]\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@create_facetstream = ( db, query ) ->\n  ###\n  * If none of `lo`, `hi` or 'prefix' are given, the stream will iterate over all entries.\n  * If both `lo` and `hi` are given, a query with lower and upper, inclusive boundaries (in LevelDB these\n    are called `gte` and `lte`, respectively) is issued.\n  * If only `prefix` is given, a prefix query is issued. Prefix queries may be 'exclusive' or 'inclusive'.\n    Exclusive prefixes match the list elements that make up the HOLLERITH entry keys in a component-wise\n    fashion, while inclusive queries also match when the last prefix element is the start of the\n    corresponding component of the entry key. For example, `{ prefix: [ 'pos', 'shape', ] }` will match\n    only entries whose first two key elements are `'pos'` and `'shape'`, while a query using\n    `{ prefix: [ 'pos', 'shape', ], star: '*', }` will additionally match entries with such keys as\n    `[ 'pos', 'shapeclass', ]` and `[ 'pos', 'shape/strokeorder', ]`.\n  * If only `lo` or only `hi` is given, an error is issued.\n  ###\n  lo_hint = null\n  hi_hint = null\n  #.........................................................................................................\n  if query?\n    keys = Object.keys query\n    switch arity = keys.length\n      when 1\n        switch key = keys[ 0 ]\n          when 'prefix'\n            lo_hint = query[ key ]\n          when 'lo', 'prefix'\n            throw new Error \"illegal to specify `lo` but not `hi`\"\n            # lo_hint = query[ key ]\n          when 'hi'\n            throw new Error \"illegal to specify `hi` but not `lo`\"\n            # hi_hint = query[ key ]\n          else\n            throw new Error \"unknown hint key #{rpr key}\"\n      when 2\n        keys.sort()\n        if keys[ 0 ] is 'hi' and keys[ 1 ] is 'lo'\n          lo_hint = query[ 'lo' ]\n          hi_hint = query[ 'hi' ]\n        else if keys[ 0 ] is 'prefix' and keys[ 1 ] is 'star'\n          lo_hint = query[ 'prefix' ]\n          hi_hint = query[ 'star' ]\n          throw new Error \"expected `star` to be '*', got #{rpr hi_hint}\" unless hi_hint is '*'\n        else\n          throw new Error \"illegal hint keys #{rpr keys}\"\n      else\n        throw new Error \"illegal hint arity #{rpr arity}\"\n  #.........................................................................................................\n  # debug '©KaWp7', lo_hint, hi_hint\n  return @_create_facetstream db, lo_hint, hi_hint\n\n#-----------------------------------------------------------------------------------------------------------\n@_create_facetstream = ( db, lo_hint = null, hi_hint = null ) ->\n  ### TAINT `lo_hint` and `hi_hint` should be called `first` and `second` ###\n  #.........................................................................................................\n  if hi_hint? and not lo_hint?\n    throw new Error \"must give `lo_hint` when `hi_hint` is given\"\n  #.........................................................................................................\n  if lo_hint? and not hi_hint?\n    query       = @_query_from_prefix db, lo_hint\n  #.........................................................................................................\n  else if lo_hint? and hi_hint is '*'\n    query       = @_query_from_prefix db, lo_hint, '*'\n  #.........................................................................................................\n  else\n    lo_hint_bfr = if lo_hint? then (        @_encode_key db, lo_hint )          else null\n    hi_hint_bfr = if hi_hint? then ( @_query_from_prefix db, hi_hint )[ 'lte' ] else null\n    # lo_hint_bfr = if lo_hint? then (        @_encode_key db, lo_hint )          else CODEC[ 'keys' ][ 'lo' ]\n    # hi_hint_bfr = if hi_hint? then ( @_query_from_prefix db, hi_hint )[ 'lte' ] else CODEC[ 'keys' ][ 'hi' ]\n    query       = { gte: lo_hint_bfr, lte: hi_hint_bfr, }\n  #.........................................................................................................\n  ### TAINT Should we test for well-formed entries here? ###\n  R = db[ '%self' ].createReadStream query\n  #.........................................................................................................\n  ### TAINT decoding transfrom should be made public ###\n  R = R.pipe $ ( { key, value }, send ) =>\n    unless @_is_meta db, key\n      send [ ( @_decode_key db, key ), ( @_decode_value db, value ), ]\n  #.........................................................................................................\n  R[ '%meta' ] = {}\n  R[ '%meta' ][ 'query' ] = query\n  #.........................................................................................................\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@has = ( db, key, handler ) ->\n  key_bfr = if CND.isa_jsbuffer then key else @_encode_key db, key\n  #.........................................................................................................\n  db[ '%self' ].get key_bfr, ( error, obj_bfr ) =>\n    if error?\n      return handler null, false if error[ 'type' ] is 'NotFoundError'\n      return handler error\n    handler null, true\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@has_any = ( db, query, handler ) ->\n  input   = @create_facetstream db, query\n  active  = yes\n  #.........................................................................................................\n  input\n    .pipe $ ( data, send, end ) =>\n      if data?\n        active = no\n        input.destroy()\n        handler null, true\n      if end?\n        handler null, false if active?\n        end()\n  #.........................................................................................................\n  return null\n\n#===========================================================================================================\n# KEYS & VALUES\n#-----------------------------------------------------------------------------------------------------------\n@_encode_key = ( db, key, plus_tm_hi ) ->\n  throw new Error \"illegal key #{rpr key}\" if key is undefined\n  return _codec_encode_plus_tm_hi key, db[ 'encoder' ] if plus_tm_hi\n  return _codec_encode            key, db[ 'encoder' ]\n\n#-----------------------------------------------------------------------------------------------------------\n@_decode_key = ( db, key ) ->\n  R = _codec_decode key, db[ 'decoder' ]\n  throw new Error \"illegal key #{rpr key}\" if R is undefined\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@_encode_value = ( db, value      ) -> new Buffer ( JSON.stringify value ), 'utf-8'\n@_decode_value = ( db, value_bfr  ) -> JSON.parse value_bfr.toString 'utf-8'\n\n#-----------------------------------------------------------------------------------------------------------\n@as_phrase = ( db, key, value ) ->\n  try\n    switch phrasetype = key[ 0 ]\n      when 'spo'\n        throw new Error \"illegal SPO key (length #{length})\"  unless ( length = key.length ) is 3\n        throw new Error \"illegal value (A) #{rpr value}\"      if value is undefined\n        return [ phrasetype, key[ 1 ], key[ 2 ], value, ]\n      when 'pos'\n        throw new Error \"illegal POS key (length #{length})\"  unless 4 <= ( length = key.length ) <= 5\n        throw new Error \"illegal value (B) #{rpr value}\"      unless ( value in [ undefined, null, ] )\n        return [ phrasetype, key[ 1 ], key[ 2 ], key[ 3 ], key[ 4 ], ] if key[ 4 ]?\n        return [ phrasetype, key[ 1 ], key[ 2 ], key[ 3 ],           ]\n    throw new Error \"unknown phrasetype #{rpr phrasetype}\"\n  catch error\n    warn \"detected problem with key #{rpr key}\"\n    warn \"and/or value              #{rpr value}\"\n    throw error\n#-----------------------------------------------------------------------------------------------------------\n@normalize_phrase = ( db, phrase ) ->\n  switch phrasetype = phrase[ 0 ]\n    when 'spo'\n      return phrase\n    when 'pos'\n      return [ 'spo', phrase[ 3 ], phrase[ 1 ], phrase[ 2 ], phrase[ 4 ], ] if phrase[ 4 ]?\n      return [ 'spo', phrase[ 3 ], phrase[ 1 ], phrase[ 2 ],           ]\n  throw new Error \"unknown phrasetype #{rpr phrasetype}\"\n\n#-----------------------------------------------------------------------------------------------------------\n@$as_phrase = ( db ) ->\n  return $ ( data, send ) =>\n    send @as_phrase db, data...\n\n#-----------------------------------------------------------------------------------------------------------\n@key_from_url = ( db, url ) ->\n  ### TAINT does not unescape as yet ###\n  ### TAINT does not cast values as yet ###\n  ### TAINT does not support multiple indexes as yet ###\n  [ phrasetype, first, second, idx, ] = url.split '|'\n  unless phrasetype? and phrasetype.length > 0 and phrasetype in [ 'so', 'os', ]\n    throw new Error \"illegal URL key #{rpr url}\"\n  unless first? and first.length > 0 and second? and second.length > 0\n    throw new Error \"illegal URL key #{rpr url}\"\n  idx = if ( idx? and idx.length > 0 ) then ( parseInt idx, 10 ) else 0\n  [ sk, sv, ] =  first.split ':'\n  [ ok, ov, ] = second.split ':'\n  unless sk? and sk.length > 0 and ok? and ok.length > 0\n    throw new Error \"illegal URL key #{rpr url}\"\n  [ sk, sv, ok, ov, ] = [ ok, ov, sk, sv, ] if phrasetype is 'os'\n  return [ phrasetype, sk, sv, ok, ov, idx, ]\n\n#-----------------------------------------------------------------------------------------------------------\n@as_url = ( db, key, value, settings ) ->\n  key         = @_decode_key    db, key   if CND.isa_jsbuffer key\n  value       = @_decode_value  db, value if CND.isa_jsbuffer value\n  colors      = settings?[ 'colors' ] ? no\n  I           = if colors then CND.darkgrey '|' else '|'\n  E           = if colors then CND.darkgrey ':' else ':'\n  # debug '©HDXXd', key\n  # debug '©HDXXd', value\n  # debug '©iU0gA', @as_phrase db, key, value\n  # debug '©iU0gA', @normalize_phrase db, @as_phrase db, key, value\n  [ phrasetype, tail..., ]  = key\n  if phrasetype is 'spo'\n    [ sbj, prd, ] = tail\n    obj           = rpr value\n    if colors\n      phrasetype  = CND.grey      phrasetype\n      sbj         = CND.RED       sbj\n      prd         = CND.YELLOW    prd\n      obj         = CND.GREEN     obj\n    return phrasetype + I + sbj + I + prd + E + obj\n    # else\n    #   return \"spo|#{sbj}|#{prd}|\"\n  else\n    [ prd, obj, sbj, idx, ] = tail\n    idx_rpr = if idx? then rpr idx else ''\n    if colors\n      phrasetype  = CND.grey      phrasetype\n      sbj         = CND.RED       sbj\n      prd         = CND.YELLOW    prd\n      obj         = CND.GREEN     obj\n      return phrasetype + I + prd + E + obj + I + sbj\n    else\n      return \"pos|#{prd}:#{obj}|#{sbj}|#{idx_rpr}\"\n\n#-----------------------------------------------------------------------------------------------------------\n@$url_from_key = ( db ) -> $ ( key, send ) => send @url_from_key db, key\n@$key_from_url = ( db ) -> $ ( url, send ) => send @key_from_url db, key\n\n#-----------------------------------------------------------------------------------------------------------\n@_type_from_key = ( db, key ) ->\n  if Array.isArray key\n    # throw new Error \"illegal key: #{rpr key}\" unless key.length is 6\n    throw new Error \"illegal phrasetype: #{rpr key}\" unless key[ '0' ] in @phrasetypes\n    return 'list'\n  return 'other'\n\n\n#===========================================================================================================\n# PREFIXES & QUERIES\n#-----------------------------------------------------------------------------------------------------------\n### TAINT should be public ###\n@_query_from_prefix = ( db, prefix, star ) ->\n  if star?\n    ### 'Asterisk' encoding: partial key segments match ###\n    gte   = @_encode_key db, prefix\n    lte   = @_encode_key db, prefix\n    lte[ lte.length - 1 ] = CODEC[ 'typemarkers'  ][ 'hi' ]\n  #.........................................................................................................\n  else\n    ### 'Classical' encoding: only full key segments match ###\n    base  = @_encode_key db, prefix, true\n    gte   = base.slice 0, base.length - 1\n    lte   = base.slice 0, base.length\n  #.........................................................................................................\n  return { gte, lte, }\n\n\n\n\n\n"]}
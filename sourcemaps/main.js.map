{"version":3,"sources":["main.coffee"],"names":[],"mappings":"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","file":"main.js","sourceRoot":"/source/","sourcesContent":["\n\n############################################################################################################\n# njs_util                  = require 'util'\n# njs_path                  = require 'path'\n# njs_fs                    = require 'fs'\n#...........................................................................................................\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'HOLLERITH/main'\nlog                       = CND.get_logger 'plain',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\nƒ                         = CND.format_number.bind CND\n#...........................................................................................................\nsuspend                   = require 'coffeenode-suspend'\nstep                      = suspend.step\n#...........................................................................................................\nCODEC                     = @CODEC = require './codec'\nDUMP                      = @DUMP  = require './dump'\n_codec_encode             = CODEC.encode.bind CODEC\n_codec_decode             = CODEC.decode.bind CODEC\n#...........................................................................................................\nD                         = require 'pipedreams2'\n$                         = D.remit.bind D\n$async                    = D.remit_async.bind D\n_new_level_db             = require 'level'\nleveldown                 = require 'level/node_modules/leveldown'\n#...........................................................................................................\nsuspend                   = require 'coffeenode-suspend'\nstep                      = suspend.step\nlater                     = suspend.immediately\n#...........................................................................................................\n@_LODASH                  = require 'lodash'\n\n\n#-----------------------------------------------------------------------------------------------------------\n@phrasetypes      = [ 'pos', 'spo', ]\n@_misfit          = Symbol 'misfit'\n@_zero_value_bfr  = new Buffer 'null'\n# warn \"mind inconsistencies in HOLLERITH2/main @_zero_enc etc\"\n# @_zero            = true # ?????????????????????????????\n# @_zero_enc        = _codec_encode [ @_zero,    ]\n# @_lo_enc          = _codec_encode [ null,      ]\n# @_hi_enc          = _codec_encode [ CODEC., ]\n# @_last_octet      = new Buffer [ 0xff, ]\n\n#-----------------------------------------------------------------------------------------------------------\n@new_db = ( route, settings ) ->\n  ### TAINT we should force this operation to be asynchronous; otherwise, DB may not be writeable ###\n  create_if_missing = settings?[ 'create' ] ? yes\n  size              = settings?[ 'size'   ] ? 1e5\n  #.........................................................................................................\n  level_settings =\n    'keyEncoding':          'binary'\n    'valueEncoding':        'binary'\n    'createIfMissing':      create_if_missing\n    'errorIfExists':        no\n    'compression':          yes\n    'sync':                 no\n  #.........................................................................................................\n  substrate = _new_level_db route, level_settings, ( error ) ->\n    if error?\n      if error[ 'name' ] is 'OpenError'\n        throw new Error \"No database found at #{route} and no `create` setting given\"\n      throw error\n  #.........................................................................................................\n  R =\n    '~isa':           'HOLLERITH/db'\n    '%self':          substrate\n    'size':           size\n  #.........................................................................................................\n  return R\n\n# #-----------------------------------------------------------------------------------------------------------\n# @_reopen = ( db, handler ) ->\n#   step ( resume ) =>\n#     route = db[ '%self' ][ 'location' ]\n#     yield db[ '%self' ].close resume\n#     yield db[ '%self' ].open resume\n#     whisper \"re-opened LevelDB at #{route}\"\n#     handler null\n\n#-----------------------------------------------------------------------------------------------------------\n@clear = ( db, handler ) ->\n  step ( resume ) =>\n    route = db[ '%self' ][ 'location' ]\n    whisper \"closing DB\"\n    yield db[ '%self' ].close resume\n    # whisper \"erasing DB\"\n    yield leveldown.destroy route, resume\n    # whisper \"re-opening DB\"\n    yield db[ '%self' ].open resume\n    whisper \"erased and re-opened LevelDB at #{route}\"\n    handler null\n\n# #-----------------------------------------------------------------------------------------------------------\n# @clear = ( db, handler ) ->\n#   ASYNC = require 'async'\n#   route = db[ '%self' ][ 'location' ]\n#   tasks = []\n#   #.........................................................................................................\n#   tasks.push ( handler ) =>\n#     whisper \"closing DB...\"\n#     db[ '%self' ].close =>\n#       whisper \"ok\"\n#       handler()\n#   #.........................................................................................................\n#   tasks.push ( handler ) =>\n#     whisper \"erasing DB...\"\n#     leveldown.destroy route, =>\n#       whisper \"ok\"\n#       handler()\n#   #.........................................................................................................\n#   tasks.push ( handler ) =>\n#     whisper \"re-opening DB...\"\n#     db[ '%self' ].open =>\n#       whisper \"ok\"\n#       handler()\n#   #.........................................................................................................\n#   ASYNC.series tasks, ( error ) =>\n#     return handler error if error?\n#     whisper \"erased and re-opened LevelDB at #{route}\"\n#     handler()\n\n\n#===========================================================================================================\n# METADATA\n#-----------------------------------------------------------------------------------------------------------\n@_put_meta = ( db, name, value, handler ) ->\n  ### TAINT should use own type for metadata ###\n  key_bfr   = @_encode_key db, [ 'meta', name, ]\n  value_bfr = if CND.isa_jsbuffer then value else @_encode_value db, value\n  db[ '%self' ].put key_bfr, value_bfr, ( error ) => handler error if handler?\n\n#-----------------------------------------------------------------------------------------------------------\n@_get_meta = ( db, name, fallback, handler ) ->\n  switch arity = arguments.length\n    when 3\n      handler   = fallback\n      fallback  = @_misfit\n    when 4\n      null\n    else\n      throw new Error \"expected 3 or 4 arguments, got #{arity}\"\n  #.........................................................................................................\n  key_bfr = @_encode_key db, [ 'meta', name, ]\n  db[ '%self' ].get key_bfr, ( error, value ) =>\n    if error?\n      return handler null, fallback if ( error[ 'type' ] is 'NotFoundError' ) and ( fallback isnt @_misfit )\n      return handler error\n    handler null, value\n\n#-----------------------------------------------------------------------------------------------------------\n@_is_meta = ( db, key_bfr ) -> ( ( key_bfr.slice 0, @_meta_prefix.length ).compare @_meta_prefix ) is 0\n\n### TAINT must derive meta key prefix from result of `_put_meta` ###\n@_meta_prefix = new Buffer [ 0x54, 0x6d, 0x65, 0x74, 0x61, 0x00, ]\n\n\n#===========================================================================================================\n# WRITING\n#-----------------------------------------------------------------------------------------------------------\n@$write = ( db, settings ) ->\n  ### TAINT currently loading and saving bloom filter each time a pipeline with `$write` is run ###\n  #.........................................................................................................\n  settings         ?= {}\n  ### Superficial experiments show that a much bigger batch size than 1'000 does not tend to improve\n  throughput; therefore, in order to reduce memory footprint, it seems advisable to leave batch size\n  in the order of around a thousand entries. ###\n  batch_size        = settings[ 'batch'  ] ? 1000\n  solid_predicates  = settings[ 'solids' ] ? []\n  ensure_unique     = settings[ 'unique' ] ? true\n  substrate         = db[ '%self' ]\n  R                 = D.create_throughstream()\n  #.........................................................................................................\n  $index = => $ ( spo, send ) =>\n    [ sbj, prd, obj, ] = spo\n    send [ [ 'spo', sbj, prd, ], obj, ]\n    #.......................................................................................................\n    unless ( obj_type = CND.type_of obj ) is 'pod'\n      #.....................................................................................................\n      if ( obj_type is 'list' ) and not ( prd in solid_predicates )\n        for obj_element, obj_idx in obj\n          send [ [ 'pos', prd, obj_element, sbj, obj_idx, ], ]\n      #.....................................................................................................\n      else\n        send [ [ 'pos', prd, obj, sbj, ], ]\n  #.........................................................................................................\n  $encode = => $ ( facet, send ) =>\n    [ key, value, ] = facet\n    phrasetype      = key[ 0 ]\n    key_bfr         = @_encode_key db, key\n    value_bfr       = if value? then @_encode_value db, value else @_zero_value_bfr\n    send [ phrasetype, key_bfr, value_bfr, ]\n  #.........................................................................................................\n  $as_batch_entry = => $ ( facet_bfr_plus, send ) =>\n    [ phrasetype, key_bfr, value_bfr, ] = facet_bfr_plus\n    send type: 'put', key: key_bfr, value: value_bfr\n  #.........................................................................................................\n  $write = => $ ( batch, send ) =>\n    substrate.batch batch\n    send batch\n  #.........................................................................................................\n  if ensure_unique\n    { $ensure_unique_spo, $load_bloom, $save_bloom, } = @_get_bloom_methods db\n  #.........................................................................................................\n  pipeline = []\n  pipeline.push $load_bloom()         if ensure_unique\n  pipeline.push @$validate_spo()\n  pipeline.push $index()\n  pipeline.push $encode()\n  pipeline.push $ensure_unique_spo()  if ensure_unique\n  pipeline.push $as_batch_entry()\n  pipeline.push D.$batch batch_size\n  pipeline.push $write()\n  pipeline.push $save_bloom()         if ensure_unique\n  #.........................................................................................................\n  R = R.pipe D.combine pipeline...\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@validate_spo = ( spo ) ->\n  ### Do a shallow sanity check to see whether `spo` is a triplet. ###\n  throw new Error \"invalid SPO key, must be list: #{rpr spo}\" unless CND.isa_list spo\n  throw new Error \"invalid SPO key, must be of length 3: #{rpr spo}\" unless spo.length is 3\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$validate_spo = ->\n  ### Do a shallow sanity check to see whether all incoming data are triplets. ###\n  return $ ( spo, send ) =>\n    ### Analyze SPO key and send all necessary POS facets: ###\n    try\n      @validate_spo spo\n    catch error\n      return send.error error\n      # throw error\n    send spo\n\n#-----------------------------------------------------------------------------------------------------------\n@_get_bloom_methods = ( db ) ->\n  #---------------------------------------------------------------------------------------------------------\n  entry_count           = 0\n  false_positive_count  = 0\n  bloom_settings        = size: db[ 'size' ] ? 1e5\n  #---------------------------------------------------------------------------------------------------------\n  show_bloom_info = =>\n    CND.BLOOM.report db[ '%bloom' ]\n  #---------------------------------------------------------------------------------------------------------\n  $ensure_unique_spo = =>\n    ### We skip all phrases except for SPO entries, the problem being that even IF some erroneous processing\n    should result in bogus `[ 'pos', 'foo', 'bar', 'baz', ]` tuples, fact is that the object value of that\n    bogus phrase gets right into the key—which may or may not be on record. In other words, you could still\n    create millions of wrong entries like `[ 'pos', 'weighs', kgs, 'my-rabbit' ]` for non-existing (but in\n    themselves, were those actually on record, repetitive) assertions like `[ 'spo', 'my-rabbit', 'weighs',\n    kgs, ]` for any possible value of `kgs` without ever being caught by the no-duplicates restriction.\n\n    It seems better to forgo this test as it only incurs a performance and space burden without being really\n    helpful (a worthwhile alternative would be to check that for all SPO entries there are all the POS\n    entries and that there are no extraneous POS entries, which is even more of a computational burden, but\n    at least reaches a meaningful level of safety against malformed data. ###\n    #.......................................................................................................\n    return $async ( xphrase, done ) =>\n      ### Skip if this is not a main entry to the DB: ###\n      return done xphrase unless xphrase[ 0 ] is 'spo'\n      key_bfr               = xphrase[ 1 ]\n      bloom                 = db[ '%bloom' ]\n      bloom_has_key         = CND.BLOOM.has bloom, key_bfr\n      CND.BLOOM.add bloom, key_bfr\n      entry_count          += +1\n      return done xphrase unless bloom_has_key\n      false_positive_count += +1\n      #.....................................................................................................\n      @has db, key_bfr, ( error, db_has_key ) =>\n        return done.error error if error?\n        ### At this point `rpr xphrase` show raw buffers; should decode ###\n        return done.error new Error \"phrase already in DB: #{rpr xphrase}\" if db_has_key\n        done xphrase\n  #---------------------------------------------------------------------------------------------------------\n  $load_bloom = =>\n    is_first = yes\n    return $async ( data, done ) =>\n      unless is_first\n        return if data? then done data else done()\n      #.....................................................................................................\n      is_first = no\n      whisper \"loading Bloom filter...\"\n      #.....................................................................................................\n      @_get_meta db, 'bloom', null, ( error, bloom_bfr ) =>\n        return done.error error if error?\n        if bloom_bfr is null\n          warn 'no bloom filter found'\n          bloom = CND.BLOOM.new_filter bloom_settings\n        else\n          bloom = CND.BLOOM.from_buffer bloom_bfr\n        db[ '%bloom' ] = bloom\n        whisper \"...ok\"\n        show_bloom_info()\n        return if data? then done data else done()\n  #---------------------------------------------------------------------------------------------------------\n  $save_bloom = =>\n    # return $async ( send, end ) =>\n    #   whisper \"saving Bloom filter...\"\n    #   bloom_bfr = CND.BLOOM.as_buffer db[ '%bloom' ]\n    #   whisper \"serialized bloom filter to #{ƒ bloom_bfr.length} bytes\"\n    #   show_bloom_info()\n    #   #.....................................................................................................\n    #   @_put_meta db, 'bloom', bloom_bfr, ( error ) =>\n    #     return send.error error if error?\n    #     whisper \"...ok\"\n    #     end()\n    # ###\n    # # It *might* be that `$on_end` shouldn't be asynchronous, so we swap it fron `$async`.\n    return D.$on_end ( send, end ) =>\n      whisper \"saving Bloom filter...\"\n      bloom_bfr = CND.BLOOM.as_buffer db[ '%bloom' ]\n      whisper \"serialized bloom filter to #{ƒ bloom_bfr.length} bytes\"\n      show_bloom_info()\n      #.....................................................................................................\n      @_put_meta db, 'bloom', bloom_bfr, ( error ) =>\n        return send.error error if error?\n        whisper \"...ok\"\n        end()\n    # ###\n  #---------------------------------------------------------------------------------------------------------\n  return { $ensure_unique_spo, $load_bloom, $save_bloom, }\n\n\n#===========================================================================================================\n# READING\n#-----------------------------------------------------------------------------------------------------------\n@create_phrasestream = ( db, query ) ->\n  return @_create_phrasestream db, query\n\n#-----------------------------------------------------------------------------------------------------------\n@read_phrases = ( db, query, handler ) ->\n  switch arity = arguments.length\n    when 2\n      handler   = query\n      query     = null\n    when 3\n      null\n    else\n      throw new Error \"expected 2 or 3 arguments, got #{arity}\"\n  return @_create_phrasestream db, query, handler\n\n#-----------------------------------------------------------------------------------------------------------\n@read_one_phrase = ( db, query, handler ) ->\n  fallback = @_misfit\n  #.........................................................................................................\n  switch arity = arguments.length\n    when 2\n      handler   = query\n      query     = null\n    when 3\n      null\n    else\n      throw new Error \"expected 4 or 5 arguments, got #{arity}\"\n  #.........................................................................................................\n  if query? and 'fallback' of query\n    fallback = query[ 'fallback' ]\n    delete query[ 'fallback' ]\n  #.........................................................................................................\n  @read_phrases db, query, ( error, phrases ) =>\n    return handler error if error?\n    return handler null, fallback if ( phrases.length is 0 ) and ( fallback isnt @_misfit )\n    return handler new Error \"expected 1 phrase, got #{phrases.length}\" if phrases.length isnt 1\n    handler null, phrases[ 0 ]\n\n#-----------------------------------------------------------------------------------------------------------\n@_create_phrasestream = ( db, query, handler ) ->\n  input = @create_facetstream db, query\n  R = input.pipe @$as_phrase db\n  if handler?\n    R = R\n      .pipe D.$collect()\n      .pipe $ ( data, send ) =>\n        handler null, data\n    R.on 'error', ( error ) => handler error\n  R[ '%meta' ] = input[ '%meta' ]\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@create_facetstream = ( db, query ) ->\n  ###\n  * If none of `lo`, `hi` or 'prefix' are given, the stream will iterate over all entries.\n  * If both `lo` and `hi` are given, a query with lower and upper, inclusive boundaries (in LevelDB these\n    are called `gte` and `lte`, repsectively) is issued.\n  * If only `prefix` is given, a prefix query is issued. Prefix queries may be 'exclusive' or 'inclusive'.\n    Exclusive prefixes match the list elements that make up the HOLLERITH entry keys in a component-wise\n    fashion, while inclusive queries also match when the last prefix element is the start of the\n    corresponding component of the entry key. For example, `{ prefix: [ 'pos', 'shape', ] }` will match\n    only entries whose first two key elements are `'pos'` and `'shape'`, while a query using\n    `{ prefix: [ 'pos', 'shape', ], star: '*', }` will additionally match entries with such keys as\n    `[ 'pos', 'shapeclass', ]` and `[ 'pos', 'shape/strokeorder', ]`.\n  * If only `lo` or only `hi` is given, an error is issued.\n  ###\n  lo_hint = null\n  hi_hint = null\n  #.........................................................................................................\n  if query?\n    keys = Object.keys query\n    switch arity = keys.length\n      when 1\n        switch key = keys[ 0 ]\n          when 'prefix'\n            lo_hint = query[ key ]\n          when 'lo', 'prefix'\n            throw new Error \"illegal to specify `lo` but not `hi`\"\n            # lo_hint = query[ key ]\n          when 'hi'\n            throw new Error \"illegal to specify `hi` but not `lo`\"\n            # hi_hint = query[ key ]\n          else\n            throw new Error \"unknown hint key #{rpr key}\"\n      when 2\n        keys.sort()\n        if keys[ 0 ] is 'hi' and keys[ 1 ] is 'lo'\n          lo_hint = query[ 'lo' ]\n          hi_hint = query[ 'hi' ]\n        else if keys[ 0 ] is 'prefix' and keys[ 1 ] is 'star'\n          lo_hint = query[ 'prefix' ]\n          hi_hint = query[ 'star' ]\n          throw new Error \"expected `star` to be '*', got #{rpr hi_hint}\" unless hi_hint is '*'\n        else\n          throw new Error \"illegal hint keys #{rpr keys}\"\n      else\n        throw new Error \"illegal hint arity #{rpr arity}\"\n  #.........................................................................................................\n  # debug '©KaWp7', lo_hint, hi_hint\n  return @_create_facetstream db, lo_hint, hi_hint\n\n#-----------------------------------------------------------------------------------------------------------\n@_create_facetstream = ( db, lo_hint = null, hi_hint = null ) ->\n  ### TAINT `lo_hint` and `hi_hint` should be called `first` and `second` ###\n  #.........................................................................................................\n  if hi_hint? and not lo_hint?\n    throw new Error \"must give `lo_hint` when `hi_hint` is given\"\n  #.........................................................................................................\n  if lo_hint? and not hi_hint?\n    query       = @_query_from_prefix db, lo_hint\n  #.........................................................................................................\n  else if lo_hint? and hi_hint is '*'\n    query       = @_query_from_prefix db, lo_hint, '*'\n  #.........................................................................................................\n  else\n    lo_hint_bfr = if lo_hint? then (        @_encode_key db, lo_hint )          else null\n    hi_hint_bfr = if hi_hint? then ( @_query_from_prefix db, hi_hint )[ 'lte' ] else null\n    # lo_hint_bfr = if lo_hint? then (        @_encode_key db, lo_hint )          else CODEC[ 'keys' ][ 'lo' ]\n    # hi_hint_bfr = if hi_hint? then ( @_query_from_prefix db, hi_hint )[ 'lte' ] else CODEC[ 'keys' ][ 'hi' ]\n    query       = { gte: lo_hint_bfr, lte: hi_hint_bfr, }\n  #.........................................................................................................\n  ### TAINT Should we test for well-formed entries here? ###\n  R = db[ '%self' ].createReadStream query\n  #.........................................................................................................\n  R = R.pipe $ ( { key, value }, send ) =>\n    unless @_is_meta db, key\n      send [ ( @_decode_key db, key ), ( @_decode_value db, value ), ]\n  #.........................................................................................................\n  R[ '%meta' ] = {}\n  R[ '%meta' ][ 'query' ] = query\n  #.........................................................................................................\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@has = ( db, key, handler ) ->\n  key_bfr = if CND.isa_jsbuffer then key else @_encode_key db, key\n  db[ '%self' ].get key_bfr, ( error, obj_bfr ) =>\n    if error?\n      return handler null, false if error[ 'type' ] is 'NotFoundError'\n      return handler error\n    handler null, true\n\n\n#===========================================================================================================\n# KEYS & VALUES\n#-----------------------------------------------------------------------------------------------------------\n@_encode_key = ( db, key, extra_byte ) ->\n  throw new Error \"illegal key #{rpr key}\" if key is undefined\n  return _codec_encode key, extra_byte\n\n#-----------------------------------------------------------------------------------------------------------\n@_decode_key = ( db, key ) ->\n  throw new Error \"illegal key #{rpr key}\" if ( R = _codec_decode key ) is undefined\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@_encode_value = ( db, value      ) -> new Buffer ( JSON.stringify value ), 'utf-8'\n@_decode_value = ( db, value_bfr  ) -> JSON.parse value_bfr.toString 'utf-8'\n\n#-----------------------------------------------------------------------------------------------------------\n@as_phrase = ( db, key, value ) ->\n  try\n    switch phrasetype = key[ 0 ]\n      when 'spo'\n        throw new Error \"illegal SPO key (length #{length})\"  unless ( length = key.length ) is 3\n        throw new Error \"illegal value (A) #{rpr value}\"      if value is undefined\n        return [ phrasetype, key[ 1 ], key[ 2 ], value, ]\n      when 'pos'\n        throw new Error \"illegal POS key (length #{length})\"  unless 4 <= ( length = key.length ) <= 5\n        throw new Error \"illegal value (B) #{rpr value}\"      unless ( value in [ undefined, null, ] )\n        return [ phrasetype, key[ 1 ], key[ 2 ], key[ 3 ], key[ 4 ], ] if key[ 4 ]?\n        return [ phrasetype, key[ 1 ], key[ 2 ], key[ 3 ],           ]\n    throw new Error \"unknown phrasetype #{rpr phrasetype}\"\n  catch error\n    warn \"detected problem with key #{rpr key}\"\n    warn \"and/or value              #{rpr value}\"\n    throw error\n#-----------------------------------------------------------------------------------------------------------\n@normalize_phrase = ( db, phrase ) ->\n  switch phrasetype = phrase[ 0 ]\n    when 'spo'\n      return phrase\n    when 'pos'\n      return [ 'spo', phrase[ 3 ], phrase[ 1 ], phrase[ 2 ], phrase[ 4 ], ] if phrase[ 4 ]?\n      return [ 'spo', phrase[ 3 ], phrase[ 1 ], phrase[ 2 ],           ]\n  throw new Error \"unknown phrasetype #{rpr phrasetype}\"\n\n#-----------------------------------------------------------------------------------------------------------\n@$as_phrase = ( db ) ->\n  return $ ( data, send ) =>\n    send @as_phrase db, data...\n\n#-----------------------------------------------------------------------------------------------------------\n@key_from_url = ( db, url ) ->\n  ### TAINT does not unescape as yet ###\n  ### TAINT does not cast values as yet ###\n  ### TAINT does not support multiple indexes as yet ###\n  [ phrasetype, first, second, idx, ] = url.split '|'\n  unless phrasetype? and phrasetype.length > 0 and phrasetype in [ 'so', 'os', ]\n    throw new Error \"illegal URL key #{rpr url}\"\n  unless first? and first.length > 0 and second? and second.length > 0\n    throw new Error \"illegal URL key #{rpr url}\"\n  idx = if ( idx? and idx.length > 0 ) then ( parseInt idx, 10 ) else 0\n  [ sk, sv, ] =  first.split ':'\n  [ ok, ov, ] = second.split ':'\n  unless sk? and sk.length > 0 and ok? and ok.length > 0\n    throw new Error \"illegal URL key #{rpr url}\"\n  [ sk, sv, ok, ov, ] = [ ok, ov, sk, sv, ] if phrasetype is 'os'\n  return [ phrasetype, sk, sv, ok, ov, idx, ]\n\n#-----------------------------------------------------------------------------------------------------------\n@as_url = ( db, key, value, settings ) ->\n  key         = @_decode_key    db, key   if CND.isa_jsbuffer key\n  value       = @_decode_value  db, value if CND.isa_jsbuffer value\n  colors      = settings?[ 'colors' ] ? no\n  I           = if colors then CND.darkgrey '|' else '|'\n  E           = if colors then CND.darkgrey ':' else ':'\n  # debug '©HDXXd', key\n  # debug '©HDXXd', value\n  # debug '©iU0gA', @as_phrase db, key, value\n  # debug '©iU0gA', @normalize_phrase db, @as_phrase db, key, value\n  [ phrasetype, tail..., ]  = key\n  if phrasetype is 'spo'\n    [ sbj, prd, ] = tail\n    obj           = rpr value\n    if colors\n      phrasetype  = CND.grey      phrasetype\n      sbj         = CND.RED       sbj\n      prd         = CND.YELLOW    prd\n      obj         = CND.GREEN     obj\n      return phrasetype + I + sbj + I + prd + E + obj\n    else\n      return \"spo|#{sbj}|#{prd}|\"\n  else\n    [ prd, obj, sbj, idx, ] = tail\n    idx_rpr = if idx? then rpr idx else ''\n    if colors\n      phrasetype  = CND.grey      phrasetype\n      sbj         = CND.RED       sbj\n      prd         = CND.YELLOW    prd\n      obj         = CND.GREEN     obj\n      return phrasetype + I + prd + E + obj + I + sbj\n    else\n      return \"pos|#{prd}:#{obj}|#{sbj}|#{idx_rpr}\"\n\n#-----------------------------------------------------------------------------------------------------------\n@$url_from_key = ( db ) -> $ ( key, send ) => send @url_from_key db, key\n@$key_from_url = ( db ) -> $ ( url, send ) => send @key_from_url db, key\n\n#-----------------------------------------------------------------------------------------------------------\n@_type_from_key = ( db, key ) ->\n  if Array.isArray key\n    # throw new Error \"illegal key: #{rpr key}\" unless key.length is 6\n    throw new Error \"illegal phrasetype: #{rpr key}\" unless key[ '0' ] in @phrasetypes\n    return 'list'\n  return 'other'\n\n\n#===========================================================================================================\n# PREFIXES & QUERIES\n#-----------------------------------------------------------------------------------------------------------\n@_query_from_prefix = ( db, prefix, star ) ->\n  if star?\n    ### 'Asterisk' encoding: partial key segments match ###\n    gte   = @_encode_key db, prefix\n    lte   = @_encode_key db, prefix\n    lte[ lte.length - 1 ] = CODEC[ 'typemarkers'  ][ 'hi' ]\n  #.........................................................................................................\n  else\n    ### 'Classical' encoding: only full key segments match ###\n    base  = @_encode_key db, prefix, CODEC[ 'typemarkers'  ][ 'hi' ]\n    gte   = base.slice 0, base.length - 1\n    lte   = base.slice 0, base.length\n  #.........................................................................................................\n  return { gte, lte, }\n\n\n\n\n\n"]}
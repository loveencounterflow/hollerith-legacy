{"version":3,"sources":["dump.coffee"],"names":[],"mappings":"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","file":"dump.js","sourceRoot":"/source/","sourcesContent":["\n\n\n############################################################################################################\nnjs_path                  = require 'path'\n# njs_fs                    = require 'fs'\njoin                      = njs_path.join\n#...........................................................................................................\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'HOLLERITH/dump'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\n# bytewise                  = require 'bytewise'\n# through                   = require 'through2'\n# LevelBatch                = require 'level-batch-stream'\n# BatchStream               = require 'batch-stream'\n# parallel                  = require 'concurrent-writable'\nD                         = require 'pipedreams'\n$                         = D.remit.bind D\n#...........................................................................................................\nnew_db                    = require 'level'\n# new_levelgraph            = require 'levelgraph'\n# db                        = new_levelgraph '/tmp/levelgraph'\nHOLLERITH                 = require './main'\nƒ                         = CND.format_number.bind CND\n\n# '@'\n\n# batched_db  = new LevelBatch level_db\n# input       = D.create_throughstream()\n\n\n# input\n#   .pipe $ ( key, send ) =>\n#     send { type: 'put', key: key, value: 1, }\n#   .pipe new BatchStream size: 100\n#   .pipe parallel batched_db, 10\n\n\n# triple = { subject: \"札\", predicate: \"strokeorder::foobar\", object: \"12345\" }\n# db.put triple, ( error ) ->\n#   throw error if error?\n\n\n#-----------------------------------------------------------------------------------------------------------\n@_first_chrs_of = ( text, n ) ->\n  ###\n  for text in [ 'abc', '中國皇帝', 'a𪜄b', ]\n    for n in [ 0 .. 5 ]\n      debug '©DLOTs', n, rpr prefix_of text, n\n  ###\n  return '' if n <= 0\n  count     = 0\n  idx       = -1\n  last_idx  = text.length - 1\n  while count < n\n    break if idx >= last_idx\n    idx    += +1\n    idx    += +1 if ( text.codePointAt idx ) > 0xffff\n    count  += 1\n  return [ text[ .. idx ], idx + 1, ]\n\n#-----------------------------------------------------------------------------------------------------------\n### TAINT code duplication ###\n@_$dump_facets = ( db, input, settings ) ->\n  { limit, colors, chrs, } = settings\n  count     = 0\n  write     = if colors then log else echo\n  #.........................................................................................................\n  return $ ( facet, send, end ) =>\n    #.......................................................................................................\n    if facet?\n      count += +1\n      { key: key_bfr, value: value_bfr, } = facet\n      if count < limit\n        if HOLLERITH._is_meta db, key_bfr\n          warn \"skipped meta: #{rpr key_bfr.toString()}\"\n        else\n          key_rpr     = HOLLERITH.as_url db, key_bfr, value_bfr, colors: colors\n          # phrasetype  = ( key_bfr.slice 1, 4 ).toString()\n          # if phrasetype is 'spo' and value_bfr?\n          #   value     = value_bfr.toString 'utf-8'\n          #   value_rpr = ( rpr value ).replace /^'(.*)'$/, '$1'\n          #   if colors\n          #     value_rpr = ( CND.grey '|' ) + ( CND.orange value_rpr )\n          #   else\n          #     value_rpr = '|' + value_rpr\n          # else\n          #   value_rpr = ''\n          count_txt = if colors then ( CND.grey ƒ count ) else ƒ count\n          write count_txt, key_rpr\n          # else\n          #   echo ( ƒ count ), key_bfr\n          send key_bfr\n      #.....................................................................................................\n      input.emit 'end' if count >= limit\n    #.......................................................................................................\n    if end?\n      help \"dumped #{ƒ count} entries\"\n      process.exit()\n\n# #-----------------------------------------------------------------------------------------------------------\n# ### TAINT code duplication ###\n# @_$dump_prefixes = ( db, input, settings ) ->\n#   { limit, colors, chrs, } = settings\n#   key_count     = 0\n#   prefix_count  = 0\n#   prefixes      = {}\n#   t0            = +new Date()\n#   #.........................................................................................................\n#   return $ ( key, send, end ) =>\n#     #.......................................................................................................\n#     if key?\n#       key_count += +1\n#       if key_count < limit\n#         key_rpr = HOLLERITH.url_from_key db, HOLLERITH._decode_key db, key\n#         [ prefix, suffix_idx, ] = @_first_chrs_of key_rpr, chrs\n#         unless prefixes[ prefix ]?\n#           prefix_count       += +1\n#           prefixes[ prefix ]  = 1\n#           if colors\n#             log ( CND.grey ƒ key_count ), ( CND.plum prefix ) + ( CND.grey key_rpr[ suffix_idx .. ] )\n#           else\n#             echo ( ƒ key_count ), prefix, key_rpr[ suffix_idx .. ]\n#           send key\n#       #.....................................................................................................\n#       input.emit 'end' if key_count >= limit\n#     #.......................................................................................................\n#     if end?\n#       t1      = +new Date()\n#       dt      = t1 - t0\n#       dt_s    = ( dt /  1000 ).toFixed 3\n#       dt_min  = ( dt / 60000 ).toFixed 1\n#       help \"dumped #{ƒ key_count} entries in #{dt_s}s (#{dt_min}min)\"\n#       help \"found #{ƒ prefix_count} distinct prefixes with up to #{ƒ chrs} characters\"\n#       process.exit()\n\n#-----------------------------------------------------------------------------------------------------------\n@dump = ( db, settings ) ->\n  { mode, prefix, } = settings\n  switch mode\n    when 'keys'\n      if prefix?\n        ### TAINT use library method ###\n        if prefix[ prefix.length - 1 ] is '*'\n          star      = '*'\n          star_rpr  = '*'\n          prefix = prefix[ ... prefix.length - 1 ]\n        else\n          star      = null\n          star_rpr  = ''\n        key = prefix.split /\\||:/\n        query = HOLLERITH._query_from_prefix db, key, star\n        urge \"prefix: #{rpr prefix} #{star_rpr}\"\n        urge \"key:    #{rpr key} #{star_rpr}\"\n        # urge \" #{query[ 'gte' ]}\"\n        # urge \" #{query[ 'lte' ]}\"\n        input = db[ '%self' ].createReadStream query\n      else\n        input = db[ '%self' ].createReadStream()\n      worker  = @_$dump_facets db, input, settings\n    # when 'prefixes'\n    #   input   = db[ '%self' ].createKeyStream()\n    #   worker  = @_$dump_prefixes db, input, settings\n    else throw new Error \"unknown mode #{rpr mode}\"\n  input\n    .pipe worker\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@rpr_of_facets = ( db, facets, encoding ) ->\n  columnify_settings =\n    paddingChr:       ' '\n    columnSplitter:   ' ┊ '\n    # columns:          [ 'key', 'value', ]\n    # minWidth: 120\n  a = []\n  b = []\n  for [ key, value, ] in facets\n    key_rpr   = ( rpr key   ).replace /^<Buffer (.*)>$/, '$1'\n    value_rpr = ( rpr value ).replace /^<Buffer (.*)>$/, '$1'\n    a.push [ key_rpr, value_rpr, ]\n  a = CND.columnify a, columnify_settings\n  for [ key, value, ] in facets\n    key_rpr   = HOLLERITH.CODEC._encode_buffer db, key,   encoding\n    value_rpr = HOLLERITH.CODEC._encode_buffer db, value, encoding\n    b.push [ key_rpr, value_rpr, ]\n  b = CND.columnify b, columnify_settings\n  return a + '\\n' + b\n\n\n\n\n############################################################################################################\nunless module.parent?\n\n  #---------------------------------------------------------------------------------------------------------\n  docopt    = ( require 'coffeenode-docopt' ).docopt\n  version   = ( require '../package.json' )[ 'version' ]\n  filename  = ( require 'path' ).basename __filename\n         # #{filename} pos [--sample] [<prefix>]\n  usage     = \"\"\"\n  Usage: #{filename} <db-route> [--limit=N]\n         #{filename} <db-route> ( [<prefix>] | keys [<prefix>] | prefixes [<chrs>] ) [--limit=N]\n\n  Options:\n    -l, --limit\n    -h, --help\n    -v, --version\n  \"\"\"\n  ###\n         #{filename} pos [--sample]\n         #{filename} so [--db] [--limit] [--stdout] [<prefix>]\n         #{filename} os [--db] [--limit] [--stdout] [<prefix>]\n         #{filename} x\n         #{filename} y\n         #{filename} q <query0> [+|-] <query1>\n         #{filename} sql\n         #{filename} count\n  ###\n  cli_options = docopt usage, version: version, help: ( left, collected ) ->\n    urge left\n    help collected\n    help '\\n' + usage\n    process.exit()\n  #.........................................................................................................\n  dump_settings =\n    limit:            Infinity\n    mode:             'keys'\n    colors:           if process.stdout.isTTY then true else false\n    chrs:             3\n  #.........................................................................................................\n  dump_settings[ 'route'    ] = cli_options[ '<db-route>' ]\n  dump_settings[ 'limit'    ] = ( parseInt limit, 10 ) if ( limit = cli_options[ '--limit' ] )\n  dump_settings[ 'mode'     ] = 'prefixes' if cli_options[ 'prefixes' ]\n  dump_settings[ 'chrs'     ] = ( parseInt  chrs, 10 ) if (  chrs = cli_options[  '<chrs>' ] )\n  dump_settings[ 'prefix'   ] = prefix if ( prefix = cli_options[ '<prefix>' ] )?\n  #---------------------------------------------------------------------------------------------------------\n  db = HOLLERITH.new_db dump_settings[ 'route' ], create: no\n  # debug '©bEIeE', cli_options\n  # help '©bEIeE', dump_settings\n  help \"using LevelDB at #{dump_settings[ 'route' ]}\"\n  @dump db, dump_settings\n\n  # debug '©lJ8nb', HOLLERITH._encode null, 1\n  # debug '©lJ8nb', HOLLERITH._encode null, [ 1, ]\n  # debug '©lJ8nb', HOLLERITH._encode null, [ 1, undefined, ]\n  # log()\n  # debug '©lJ8nb', HOLLERITH._encode null, '1'\n  # debug '©lJ8nb', HOLLERITH._encode null, [ '1', ]\n  # debug '©lJ8nb', HOLLERITH._query_from_prefix null, 1\n  # debug '©lJ8nb', HOLLERITH._query_from_prefix null, [ 1, ]\n  # debug '©lJ8nb', HOLLERITH._query_from_prefix null, '1'\n  # debug '©lJ8nb', HOLLERITH._query_from_prefix null, [ '1', ]\n  # debug '©lJ8nb', HOLLERITH._encode null, '\\x00'\n  # debug '©lJ8nb', HOLLERITH._encode null, '\\x01'\n  # debug '©lJ8nb', HOLLERITH._encode null, '\\x02'\n  # log()\n\n  # for cid in [ 0x00 .. 0xff ]\n  #   debug '©lJ8nb', ( '0x' + ( if cid <= 0xf then '0' else '' ) + cid.toString 16 ), HOLLERITH._encode null, [ String.fromCodePoint cid, ]\n  # debug '©vfkkx', HOLLERITH._decode_key null, HOLLERITH.encode null, +Infinity\n  # debug '©vfkkx', HOLLERITH._decode_key null, HOLLERITH.encode null, -Infinity\n  # debug '©vfkkx', HOLLERITH._decode_key null, HOLLERITH.encode null, null\n  # debug '©vfkkx', HOLLERITH._decode_key null, HOLLERITH.encode null, undefined\n  # CND.listen_to_keys ( P... ) ->\n  #   debug '©WOmlj', P\n  # process.stdin.resume()\n\n  # for text in [ 'abc', '中國皇帝', 'a𪜄b', ]\n  #   for n in [ 0 .. 5 ]\n  #     debug '©DLOTs', n, rpr @_first_chrs_of text, n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"]}
{"version":3,"sources":["dump.coffee"],"names":[],"mappings":"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","file":"dump.js","sourceRoot":"/source/","sourcesContent":["\n\n\n############################################################################################################\nnjs_path                  = require 'path'\n# njs_fs                    = require 'fs'\njoin                      = njs_path.join\n#...........................................................................................................\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'HOLLERITH/dump'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\n# bytewise                  = require 'bytewise'\n# through                   = require 'through2'\n# LevelBatch                = require 'level-batch-stream'\n# BatchStream               = require 'batch-stream'\n# parallel                  = require 'concurrent-writable'\nD                         = require 'pipedreams2'\n$                         = D.remit.bind D\n#...........................................................................................................\nnew_db                    = require 'level'\n# new_levelgraph            = require 'levelgraph'\n# db                        = new_levelgraph '/tmp/levelgraph'\nHOLLERITH                 = require './main'\nƒ                         = CND.format_number.bind CND\n\n# '@'\n\n# batched_db  = new LevelBatch level_db\n# input       = D.create_throughstream()\n\n\n# input\n#   .pipe $ ( key, send ) =>\n#     send { type: 'put', key: key, value: 1, }\n#   .pipe new BatchStream size: 100\n#   .pipe parallel batched_db, 10\n\n\n# triple = { subject: \"札\", predicate: \"strokeorder::foobar\", object: \"12345\" }\n# db.put triple, ( error ) ->\n#   throw error if error?\n\n\n#-----------------------------------------------------------------------------------------------------------\n@_first_chrs_of = ( text, n ) ->\n  ###\n  for text in [ 'abc', '中國皇帝', 'a𪜄b', ]\n    for n in [ 0 .. 5 ]\n      debug '©DLOTs', n, rpr prefix_of text, n\n  ###\n  return '' if n <= 0\n  count     = 0\n  idx       = -1\n  last_idx  = text.length - 1\n  while count < n\n    break if idx >= last_idx\n    idx    += +1\n    idx    += +1 if ( text.codePointAt idx ) > 0xffff\n    count  += 1\n  return [ text[ .. idx ], idx + 1, ]\n\n#-----------------------------------------------------------------------------------------------------------\n### TAINT code duplication ###\n@_$dump_facets = ( db, input, settings ) ->\n  { limit, colors, chrs, } = settings\n  count     = 0\n  write     = if colors then log else echo\n  #.........................................................................................................\n  return $ ( facet, send, end ) =>\n    #.......................................................................................................\n    if facet?\n      count += +1\n      { key: key_bfr, value: value_bfr, } = facet\n      if count < limit\n        if HOLLERITH._is_meta db, key_bfr\n          warn \"skipped meta: #{rpr key_bfr.toString()}\"\n        else\n          key_rpr     = HOLLERITH.as_url db, key_bfr, value_bfr, colors: colors\n          # phrasetype  = ( key_bfr.slice 1, 4 ).toString()\n          # if phrasetype is 'spo' and value_bfr?\n          #   value     = value_bfr.toString 'utf-8'\n          #   value_rpr = ( rpr value ).replace /^'(.*)'$/, '$1'\n          #   if colors\n          #     value_rpr = ( CND.grey '|' ) + ( CND.orange value_rpr )\n          #   else\n          #     value_rpr = '|' + value_rpr\n          # else\n          #   value_rpr = ''\n          count_txt = if colors then ( CND.grey ƒ count ) else ƒ count\n          write count_txt, key_rpr\n          # else\n          #   echo ( ƒ count ), key_bfr\n          send key_bfr\n      #.....................................................................................................\n      input.emit 'end' if count >= limit\n    #.......................................................................................................\n    if end?\n      help \"dumped #{ƒ count} entries\"\n      process.exit()\n\n# #-----------------------------------------------------------------------------------------------------------\n# ### TAINT code duplication ###\n# @_$dump_prefixes = ( db, input, settings ) ->\n#   { limit, colors, chrs, } = settings\n#   key_count     = 0\n#   prefix_count  = 0\n#   prefixes      = {}\n#   t0            = +new Date()\n#   #.........................................................................................................\n#   return $ ( key, send, end ) =>\n#     #.......................................................................................................\n#     if key?\n#       key_count += +1\n#       if key_count < limit\n#         key_rpr = HOLLERITH.url_from_key db, HOLLERITH._decode_key db, key\n#         [ prefix, suffix_idx, ] = @_first_chrs_of key_rpr, chrs\n#         unless prefixes[ prefix ]?\n#           prefix_count       += +1\n#           prefixes[ prefix ]  = 1\n#           if colors\n#             log ( CND.grey ƒ key_count ), ( CND.plum prefix ) + ( CND.grey key_rpr[ suffix_idx .. ] )\n#           else\n#             echo ( ƒ key_count ), prefix, key_rpr[ suffix_idx .. ]\n#           send key\n#       #.....................................................................................................\n#       input.emit 'end' if key_count >= limit\n#     #.......................................................................................................\n#     if end?\n#       t1      = +new Date()\n#       dt      = t1 - t0\n#       dt_s    = ( dt /  1000 ).toFixed 3\n#       dt_min  = ( dt / 60000 ).toFixed 1\n#       help \"dumped #{ƒ key_count} entries in #{dt_s}s (#{dt_min}min)\"\n#       help \"found #{ƒ prefix_count} distinct prefixes with up to #{ƒ chrs} characters\"\n#       process.exit()\n\n#-----------------------------------------------------------------------------------------------------------\n@dump = ( db, settings ) ->\n  { mode, prefix, } = settings\n  switch mode\n    when 'keys'\n      if prefix?\n        ### TAINT use library method ###\n        if prefix[ prefix.length - 1 ] is '*'\n          star      = '*'\n          star_rpr  = '*'\n          prefix = prefix[ ... prefix.length - 1 ]\n        else\n          star      = null\n          star_rpr  = ''\n        key = prefix.split /\\||:/\n        query = HOLLERITH._query_from_prefix db, key, star\n        urge \"prefix: #{rpr prefix} #{star_rpr}\"\n        urge \"key:    #{rpr key} #{star_rpr}\"\n        # urge \" #{query[ 'gte' ]}\"\n        # urge \" #{query[ 'lte' ]}\"\n        input = db[ '%self' ].createReadStream query\n      else\n        input = db[ '%self' ].createReadStream()\n      worker  = @_$dump_facets db, input, settings\n    # when 'prefixes'\n    #   input   = db[ '%self' ].createKeyStream()\n    #   worker  = @_$dump_prefixes db, input, settings\n    else throw new Error \"unknown mode #{rpr mode}\"\n  input\n    .pipe worker\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@encodings =\n\n  #.........................................................................................................\n  dbcs2: \"\"\"\n    ⓪①②③④⑤⑥⑦⑧⑨⑩⑪⑫⑬⑭⑮⑯⑰⑱⑲⑳㉑㉒㉓㉔㉕㉖㉗㉘㉙㉚㉛\n    ㉜！＂＃＄％＆＇（）＊＋，－．／０１２３４５６７８９：；＜＝＞？\n    ＠ＡＢＣＤＥＦＧＨＩＪＫＬＭＮＯＰＱＲＳＴＵＶＷＸＹＺ［＼］＾＿\n    ｀ａｂｃｄｅｆｇｈｉｊｋｌｍｎｏｐｑｒｓｔｕｖｗｘｙｚ｛｜｝～㉠\n    ㉝㉞㉟㊱㊲㊳㊴㊵㊶㊷㊸㊹㊺㊻㊼㊽㊾㊿㋐㋑㋒㋓㋔㋕㋖㋗㋘㋙㋚㋛㋜㋝\n    ㋞㋟㋠㋡㋢㋣㋤㋥㋦㋧㋨㋩㋪㋫㋬㋭㋮㋯㋰㋱㋲㋳㋴㋵㋶㋷㋸㋹㋺㋻㋼㋽\n    ㋾㊊㊋㊌㊍㊎㊏㊐㊑㊒㊓㊔㊕㊖㊗㊘㊙㊚㊛㊜㊝㊞㊟㊠㊡㊢㊣㊤㊥㊦㊧㊨\n    ㊩㊪㊫㊬㊭㊮㊯㊰㊀㊁㊂㊃㊄㊅㊆㊇㊈㊉㉈㉉㉊㉋㉌㉍㉎㉏⓵⓶⓷⓸⓹〓\n    \"\"\"\n  #.........................................................................................................\n  aleph: \"\"\"\n    БДИЛЦЧШЭЮƆƋƏƐƔƥƧƸψŐőŒœŊŁłЯɔɘɐɕəɞ\n    ␣!\"#$%&'()*+,-./0123456789:;<=>?\n    @ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_\n    `abcdefghijklmnopqrstuvwxyz{|}~ω\n    ΓΔΘΛΞΠΣΦΨΩαβγδεζηθικλμνξπρςστυφχ\n    Ж¡¢£¤¥¦§¨©ª«¬Я®¯°±²³´µ¶·¸¹º»¼½¾¿\n    ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞß\n    àáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ\n    \"\"\"\n  #.........................................................................................................\n  rdctn: \"\"\"\n    ∇≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡\n    ␣!\"#$%&'()*+,-./0123456789:;<=>?\n    @ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_\n    `abcdefghijklmnopqrstuvwxyz{|}~≡\n    ∃∃∃∃∃∃∃∃∃∃∃∃∃∃∃∃∃∃∃∃∃∃∃∃∃∃∃∃∃∃∃∃\n    ∃∃¢£¤¥¦§¨©ª«¬Я®¯°±²³´µ¶·¸¹º»¼½¾¿\n    ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞß\n    àáâãäåæçèéêëìíîïðñò≢≢≢≢≢≢≢≢≢≢≢≢Δ\n    \"\"\"\n\n\n#-----------------------------------------------------------------------------------------------------------\n@rpr_of_buffer = ( db, buffer, encoding ) ->\n  return ( rpr buffer ) + ' ' +  @_encode_buffer db, buffer, encoding\n\n#-----------------------------------------------------------------------------------------------------------\n@_encode_buffer = ( db, buffer, encoding = 'rdctn' ) ->\n  ### TAINT use switch, emit error if `encoding` not list or known key ###\n  encoding = @encodings[ encoding ] unless CND.isa_list encoding\n  return ( encoding[ buffer[ idx ] ] for idx in [ 0 ... buffer.length ] ).join ''\n\n#-----------------------------------------------------------------------------------------------------------\n@rpr_of_facets = ( db, facets, encoding ) ->\n  columnify_settings =\n    paddingChr:       ' '\n    columnSplitter:   ' ┊ '\n    # columns:          [ 'key', 'value', ]\n    # minWidth: 120\n  a = []\n  b = []\n  for [ key, value, ] in facets\n    key_rpr   = ( rpr key   ).replace /^<Buffer (.*)>$/, '$1'\n    value_rpr = ( rpr value ).replace /^<Buffer (.*)>$/, '$1'\n    a.push [ key_rpr, value_rpr, ]\n  a = CND.columnify a, columnify_settings\n  for [ key, value, ] in facets\n    key_rpr   = @_encode_buffer db, key,   encoding\n    value_rpr = @_encode_buffer db, value, encoding\n    b.push [ key_rpr, value_rpr, ]\n  b = CND.columnify b, columnify_settings\n  return a + '\\n' + b\n\n#-----------------------------------------------------------------------------------------------------------\n@_compile_encodings = ->\n  #.........................................................................................................\n  chrs_of = ( text ) ->\n    text = text.split /([\\ud800-\\udbff].|.)/\n    return ( chr for chr in text when chr isnt '' )\n  #.........................................................................................................\n  for name, encoding of @encodings\n    encoding = chrs_of encoding.replace /\\n+/g, ''\n    unless ( length = encoding.length ) is 256\n      throw new Error \"expected 256 characters, found #{length} in encoding #{rpr name}\"\n    @encodings[ name ] = encoding\n  return null\n@_compile_encodings()\n\n\n\n\n############################################################################################################\nunless module.parent?\n\n  #---------------------------------------------------------------------------------------------------------\n  docopt    = ( require 'coffeenode-docopt' ).docopt\n  version   = ( require '../package.json' )[ 'version' ]\n  filename  = ( require 'path' ).basename __filename\n         # #{filename} pos [--sample] [<prefix>]\n  usage     = \"\"\"\n  Usage: #{filename} <db-route> [--limit=N]\n         #{filename} <db-route> ( [<prefix>] | keys [<prefix>] | prefixes [<chrs>] ) [--limit=N]\n\n  Options:\n    -l, --limit\n    -h, --help\n    -v, --version\n  \"\"\"\n  ###\n         #{filename} pos [--sample]\n         #{filename} so [--db] [--limit] [--stdout] [<prefix>]\n         #{filename} os [--db] [--limit] [--stdout] [<prefix>]\n         #{filename} x\n         #{filename} y\n         #{filename} q <query0> [+|-] <query1>\n         #{filename} sql\n         #{filename} count\n  ###\n  cli_options = docopt usage, version: version, help: ( left, collected ) ->\n    urge left\n    help collected\n    help '\\n' + usage\n    process.exit()\n  #.........................................................................................................\n  dump_settings =\n    limit:            Infinity\n    mode:             'keys'\n    colors:           if process.stdout.isTTY then true else false\n    chrs:             3\n  #.........................................................................................................\n  dump_settings[ 'route'    ] = cli_options[ '<db-route>' ]\n  dump_settings[ 'limit'    ] = ( parseInt limit, 10 ) if ( limit = cli_options[ '--limit' ] )\n  dump_settings[ 'mode'     ] = 'prefixes' if cli_options[ 'prefixes' ]\n  dump_settings[ 'chrs'     ] = ( parseInt  chrs, 10 ) if (  chrs = cli_options[  '<chrs>' ] )\n  dump_settings[ 'prefix'   ] = prefix if ( prefix = cli_options[ '<prefix>' ] )?\n  #---------------------------------------------------------------------------------------------------------\n  db = HOLLERITH.new_db dump_settings[ 'route' ], create: no\n  # debug '©bEIeE', cli_options\n  # help '©bEIeE', dump_settings\n  help \"using LevelDB at #{dump_settings[ 'route' ]}\"\n  @dump db, dump_settings\n\n  # debug '©lJ8nb', HOLLERITH._encode null, 1\n  # debug '©lJ8nb', HOLLERITH._encode null, [ 1, ]\n  # debug '©lJ8nb', HOLLERITH._encode null, [ 1, undefined, ]\n  # log()\n  # debug '©lJ8nb', HOLLERITH._encode null, '1'\n  # debug '©lJ8nb', HOLLERITH._encode null, [ '1', ]\n  # debug '©lJ8nb', HOLLERITH._query_from_prefix null, 1\n  # debug '©lJ8nb', HOLLERITH._query_from_prefix null, [ 1, ]\n  # debug '©lJ8nb', HOLLERITH._query_from_prefix null, '1'\n  # debug '©lJ8nb', HOLLERITH._query_from_prefix null, [ '1', ]\n  # debug '©lJ8nb', HOLLERITH._encode null, '\\x00'\n  # debug '©lJ8nb', HOLLERITH._encode null, '\\x01'\n  # debug '©lJ8nb', HOLLERITH._encode null, '\\x02'\n  # log()\n\n  # for cid in [ 0x00 .. 0xff ]\n  #   debug '©lJ8nb', ( '0x' + ( if cid <= 0xf then '0' else '' ) + cid.toString 16 ), HOLLERITH._encode null, [ String.fromCodePoint cid, ]\n  # debug '©vfkkx', HOLLERITH._decode_key null, HOLLERITH.encode null, +Infinity\n  # debug '©vfkkx', HOLLERITH._decode_key null, HOLLERITH.encode null, -Infinity\n  # debug '©vfkkx', HOLLERITH._decode_key null, HOLLERITH.encode null, null\n  # debug '©vfkkx', HOLLERITH._decode_key null, HOLLERITH.encode null, undefined\n  # CND.listen_to_keys ( P... ) ->\n  #   debug '©WOmlj', P\n  # process.stdin.resume()\n\n  # for text in [ 'abc', '中國皇帝', 'a𪜄b', ]\n  #   for n in [ 0 .. 5 ]\n  #     debug '©DLOTs', n, rpr @_first_chrs_of text, n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"]}